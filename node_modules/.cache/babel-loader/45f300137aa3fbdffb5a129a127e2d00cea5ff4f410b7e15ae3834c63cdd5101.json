{"ast":null,"code":"import { authenticatedHandler } from '../../clients/handlers/authenticated.mjs';\nimport { composeServiceApi } from '../../clients/internal/composeServiceApi.mjs';\nimport { extendedEncodeURIComponent } from '../../clients/middleware/signing/utils/extendedEncodeURIComponent.mjs';\nimport { parseMetadata } from '../../clients/serde/responseInfo.mjs';\nimport { parseJsonError, parseJsonBody } from '../../clients/serde/json.mjs';\nimport { AmplifyUrl } from '../../utils/amplifyUrl/index.mjs';\nimport { defaultConfig, getSharedHeaders } from './base.mjs';\nimport { assert, PinpointValidationErrorCode } from './errorHelpers.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst putEventsSerializer = (_ref, endpoint) => {\n  let {\n    ApplicationId,\n    EventsRequest\n  } = _ref;\n  assert(!!ApplicationId, PinpointValidationErrorCode.NoAppId);\n  const headers = getSharedHeaders();\n  const url = new AmplifyUrl(endpoint.url);\n  url.pathname = `v1/apps/${extendedEncodeURIComponent(ApplicationId)}/events`;\n  const body = JSON.stringify(EventsRequest ?? {});\n  return {\n    method: 'POST',\n    headers,\n    url,\n    body\n  };\n};\nconst putEventsDeserializer = async response => {\n  if (response.statusCode >= 300) {\n    const error = await parseJsonError(response);\n    throw error;\n  } else {\n    const {\n      Results\n    } = await parseJsonBody(response);\n    return {\n      EventsResponse: {\n        Results\n      },\n      $metadata: parseMetadata(response)\n    };\n  }\n};\n/**\n * @internal\n */\nconst putEvents = composeServiceApi(authenticatedHandler, putEventsSerializer, putEventsDeserializer, defaultConfig);\nexport { putEvents };","map":{"version":3,"names":["putEventsSerializer","_ref","endpoint","ApplicationId","EventsRequest","assert","PinpointValidationErrorCode","NoAppId","headers","getSharedHeaders","url","AmplifyUrl","pathname","extendedEncodeURIComponent","body","JSON","stringify","method","putEventsDeserializer","response","statusCode","error","parseJsonError","Results","parseJsonBody","EventsResponse","$metadata","parseMetadata","putEvents","composeServiceApi","authenticatedHandler","defaultConfig"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/core/src/awsClients/pinpoint/putEvents.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { authenticatedHandler } from '../../clients/handlers/authenticated';\nimport { composeServiceApi } from '../../clients/internal/composeServiceApi';\nimport { extendedEncodeURIComponent } from '../../clients/middleware/signing/utils/extendedEncodeURIComponent';\nimport { parseJsonBody, parseJsonError, parseMetadata, } from '../../clients/serde';\nimport { AmplifyUrl } from '../../utils/amplifyUrl';\nimport { defaultConfig, getSharedHeaders } from './base';\nimport { PinpointValidationErrorCode, assert } from './errorHelpers';\nconst putEventsSerializer = ({ ApplicationId, EventsRequest }, endpoint) => {\n    assert(!!ApplicationId, PinpointValidationErrorCode.NoAppId);\n    const headers = getSharedHeaders();\n    const url = new AmplifyUrl(endpoint.url);\n    url.pathname = `v1/apps/${extendedEncodeURIComponent(ApplicationId)}/events`;\n    const body = JSON.stringify(EventsRequest ?? {});\n    return { method: 'POST', headers, url, body };\n};\nconst putEventsDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        const error = await parseJsonError(response);\n        throw error;\n    }\n    else {\n        const { Results } = await parseJsonBody(response);\n        return {\n            EventsResponse: { Results },\n            $metadata: parseMetadata(response),\n        };\n    }\n};\n/**\n * @internal\n */\nexport const putEvents = composeServiceApi(authenticatedHandler, putEventsSerializer, putEventsDeserializer, defaultConfig);\n"],"mappings":";;;;;;;;;AAAA;AACA;AAQA,MAAMA,mBAAmB,GAAGA,CAAAC,IAAA,EAAmCC,QAAQ,KAAK;EAAA,IAA/C;IAAEC,aAAa;IAAEC;EAAa,CAAE,GAAAH,IAAA;EACzDI,MAAM,CAAC,CAAC,CAACF,aAAa,EAAEG,2BAA2B,CAACC,OAAO,CAAC;EAC5D,MAAMC,OAAO,GAAGC,gBAAgB,EAAE;EAClC,MAAMC,GAAG,GAAG,IAAIC,UAAU,CAACT,QAAQ,CAACQ,GAAG,CAAC;EACxCA,GAAG,CAACE,QAAQ,GAAG,WAAWC,0BAA0B,CAACV,aAAa,CAAC,SAAS;EAC5E,MAAMW,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACZ,aAAa,IAAI,EAAE,CAAC;EAChD,OAAO;IAAEa,MAAM,EAAE,MAAM;IAAET,OAAO;IAAEE,GAAG;IAAEI;EAAI,CAAE;AACjD,CAAC;AACD,MAAMI,qBAAqB,GAAG,MAAOC,QAAQ,IAAK;EAC9C,IAAIA,QAAQ,CAACC,UAAU,IAAI,GAAG,EAAE;IAC5B,MAAMC,KAAK,GAAG,MAAMC,cAAc,CAACH,QAAQ,CAAC;IAC5C,MAAME,KAAK;EACnB,CAAK,MACI;IACD,MAAM;MAAEE;IAAO,CAAE,GAAG,MAAMC,aAAa,CAACL,QAAQ,CAAC;IACjD,OAAO;MACHM,cAAc,EAAE;QAAEF;MAAO,CAAE;MAC3BG,SAAS,EAAEC,aAAa,CAACR,QAAQ;IAC7C,CAAS;EACT;AACA,CAAC;AACD;AACA;AACA;AACY,MAACS,SAAS,GAAGC,iBAAiB,CAACC,oBAAoB,EAAE9B,mBAAmB,EAAEkB,qBAAqB,EAAEa,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}