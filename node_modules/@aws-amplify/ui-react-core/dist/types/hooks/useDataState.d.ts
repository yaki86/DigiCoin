export interface DataState<T> {
    data: T;
    hasError: boolean;
    isLoading: boolean;
    message: string | undefined;
}
export type DataAction<T = any, K = any> = (prevData: T, input: K) => T;
export type AsyncDataAction<T = any, K = any> = (prevData: T, input: K) => Promise<T>;
export default function useDataState<T, K>(action: DataAction<T, K> | AsyncDataAction<T, K>, initialData: T, options?: {
    onSuccess?: (data: T) => void;
    onError?: (message: string) => void;
}): [state: DataState<T>, handleAction: (input: K) => void];
