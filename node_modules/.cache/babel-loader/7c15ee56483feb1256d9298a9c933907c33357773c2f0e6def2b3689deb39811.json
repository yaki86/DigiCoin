{"ast":null,"code":"import { AmplifyError } from './AmplifyError.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createAssertionFunction = function (errorMap) {\n  let AssertionError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : AmplifyError;\n  return (assertion, name, additionalContext) => {\n    const {\n      message,\n      recoverySuggestion\n    } = errorMap[name];\n    if (!assertion) {\n      throw new AssertionError({\n        name,\n        message: additionalContext ? `${message} ${additionalContext}` : message,\n        recoverySuggestion\n      });\n    }\n  };\n};\nexport { createAssertionFunction };","map":{"version":3,"names":["createAssertionFunction","errorMap","AssertionError","arguments","length","undefined","AmplifyError","assertion","name","additionalContext","message","recoverySuggestion"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/core/src/errors/createAssertionFunction.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AmplifyError } from './AmplifyError';\nexport const createAssertionFunction = (errorMap, AssertionError = AmplifyError) => (assertion, name, additionalContext) => {\n    const { message, recoverySuggestion } = errorMap[name];\n    if (!assertion) {\n        throw new AssertionError({\n            name,\n            message: additionalContext\n                ? `${message} ${additionalContext}`\n                : message,\n            recoverySuggestion,\n        });\n    }\n};\n"],"mappings":";;AAAA;AACA;AAEY,MAACA,uBAAuB,GAAG,SAAAA,CAACC,QAAQ;EAAA,IAAEC,cAAc,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGG,YAAY;EAAA,OAAK,CAACC,SAAS,EAAEC,IAAI,EAAEC,iBAAiB,KAAK;IACxH,MAAM;MAAEC,OAAO;MAAEC;IAAkB,CAAE,GAAGV,QAAQ,CAACO,IAAI,CAAC;IACtD,IAAI,CAACD,SAAS,EAAE;MACZ,MAAM,IAAIL,cAAc,CAAC;QACrBM,IAAI;QACJE,OAAO,EAAED,iBAAiB,GACpB,GAAGC,OAAO,IAAID,iBAAiB,EAAE,GACjCC,OAAO;QACbC;MACZ,CAAS,CAAC;IACV;EACA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}