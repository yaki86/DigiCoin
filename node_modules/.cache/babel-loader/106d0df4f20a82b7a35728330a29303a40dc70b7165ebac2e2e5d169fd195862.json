{"ast":null,"code":"import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError.mjs';\nimport { getActiveSignInUsername, getNewDeviceMetadata, getSignInResult, getSignInResultFromError } from '../utils/signInHelpers.mjs';\nimport { autoSignInStore } from '../../../client/utils/store/autoSignInStore.mjs';\nimport { setActiveSignInState, resetActiveSignInState } from '../../../client/utils/store/signInStore.mjs';\nimport { cacheCognitoTokens } from '../tokenProvider/cacheTokens.mjs';\nimport { dispatchSignedInHubEvent } from '../utils/dispatchSignedInHubEvent.mjs';\nimport '../utils/refreshAuthTokens.mjs';\nimport '../tokenProvider/errorHelpers.mjs';\nimport '../utils/types.mjs';\nimport { tokenOrchestrator } from '../tokenProvider/tokenProvider.mjs';\nimport { handleUserAuthFlow } from '../../../client/flows/userAuth/handleUserAuthFlow.mjs';\nimport { resetAutoSignIn } from './autoSignIn.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Signs a user in through a registered email or phone number without a password by by receiving and entering an OTP.\n *\n * @param input - The SignInWithUserAuthInput object\n * @returns SignInWithUserAuthOutput\n * @throws service: {@link InitiateAuthException }, {@link RespondToAuthChallengeException } - Cognito service errors\n * thrown during the sign-in process.\n * @throws validation: {@link AuthValidationErrorCode  } - Validation errors thrown when either username or password -- needs to change\n *  are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function signInWithUserAuth(input) {\n  const {\n    username,\n    password,\n    options\n  } = input;\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  const signInDetails = {\n    loginId: username,\n    authFlowType: 'USER_AUTH'\n  };\n  assertTokenProviderConfig(authConfig);\n  const clientMetaData = options?.clientMetadata;\n  const preferredChallenge = options?.preferredChallenge;\n  assertValidationError(!!username, AuthValidationErrorCode.EmptySignInUsername);\n  try {\n    const handleUserAuthFlowInput = {\n      username,\n      config: authConfig,\n      tokenOrchestrator,\n      clientMetadata: clientMetaData,\n      preferredChallenge,\n      password\n    };\n    const autoSignInStoreState = autoSignInStore.getState();\n    if (autoSignInStoreState.active && autoSignInStoreState.username === username) {\n      handleUserAuthFlowInput.session = autoSignInStoreState.session;\n    }\n    const response = await handleUserAuthFlow(handleUserAuthFlowInput);\n    const activeUsername = getActiveSignInUsername(username);\n    setActiveSignInState({\n      signInSession: response.Session,\n      username: activeUsername,\n      challengeName: response.ChallengeName,\n      signInDetails\n    });\n    if (response.AuthenticationResult) {\n      await cacheCognitoTokens({\n        username: activeUsername,\n        ...response.AuthenticationResult,\n        NewDeviceMetadata: await getNewDeviceMetadata({\n          userPoolId: authConfig.userPoolId,\n          userPoolEndpoint: authConfig.userPoolEndpoint,\n          newDeviceMetadata: response.AuthenticationResult.NewDeviceMetadata,\n          accessToken: response.AuthenticationResult.AccessToken\n        }),\n        signInDetails\n      });\n      resetActiveSignInState();\n      await dispatchSignedInHubEvent();\n      resetAutoSignIn();\n      return {\n        isSignedIn: true,\n        nextStep: {\n          signInStep: 'DONE'\n        }\n      };\n    }\n    return getSignInResult({\n      challengeName: response.ChallengeName,\n      challengeParameters: response.ChallengeParameters,\n      availableChallenges: 'AvailableChallenges' in response ? response.AvailableChallenges : undefined\n    });\n  } catch (error) {\n    resetActiveSignInState();\n    resetAutoSignIn();\n    assertServiceError(error);\n    const result = getSignInResultFromError(error.name);\n    if (result) return result;\n    throw error;\n  }\n}\nexport { signInWithUserAuth };","map":{"version":3,"names":["signInWithUserAuth","input","username","password","options","authConfig","Amplify","getConfig","Auth","Cognito","signInDetails","loginId","authFlowType","assertTokenProviderConfig","clientMetaData","clientMetadata","preferredChallenge","assertValidationError","AuthValidationErrorCode","EmptySignInUsername","handleUserAuthFlowInput","config","tokenOrchestrator","autoSignInStoreState","autoSignInStore","getState","active","session","response","handleUserAuthFlow","activeUsername","getActiveSignInUsername","setActiveSignInState","signInSession","Session","challengeName","ChallengeName","AuthenticationResult","cacheCognitoTokens","NewDeviceMetadata","getNewDeviceMetadata","userPoolId","userPoolEndpoint","newDeviceMetadata","accessToken","AccessToken","resetActiveSignInState","dispatchSignedInHubEvent","resetAutoSignIn","isSignedIn","nextStep","signInStep","getSignInResult","challengeParameters","ChallengeParameters","availableChallenges","AvailableChallenges","undefined","error","assertServiceError","result","getSignInResultFromError","name"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/auth/src/providers/cognito/apis/signInWithUserAuth.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError';\nimport { getActiveSignInUsername, getNewDeviceMetadata, getSignInResult, getSignInResultFromError, } from '../utils/signInHelpers';\nimport { autoSignInStore } from '../../../client/utils/store';\nimport { resetActiveSignInState, setActiveSignInState, } from '../../../client/utils/store/signInStore';\nimport { cacheCognitoTokens } from '../tokenProvider/cacheTokens';\nimport { dispatchSignedInHubEvent } from '../utils/dispatchSignedInHubEvent';\nimport { tokenOrchestrator } from '../tokenProvider';\nimport { handleUserAuthFlow, } from '../../../client/flows/userAuth/handleUserAuthFlow';\nimport { resetAutoSignIn } from './autoSignIn';\n/**\n * Signs a user in through a registered email or phone number without a password by by receiving and entering an OTP.\n *\n * @param input - The SignInWithUserAuthInput object\n * @returns SignInWithUserAuthOutput\n * @throws service: {@link InitiateAuthException }, {@link RespondToAuthChallengeException } - Cognito service errors\n * thrown during the sign-in process.\n * @throws validation: {@link AuthValidationErrorCode  } - Validation errors thrown when either username or password -- needs to change\n *  are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function signInWithUserAuth(input) {\n    const { username, password, options } = input;\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    const signInDetails = {\n        loginId: username,\n        authFlowType: 'USER_AUTH',\n    };\n    assertTokenProviderConfig(authConfig);\n    const clientMetaData = options?.clientMetadata;\n    const preferredChallenge = options?.preferredChallenge;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptySignInUsername);\n    try {\n        const handleUserAuthFlowInput = {\n            username,\n            config: authConfig,\n            tokenOrchestrator,\n            clientMetadata: clientMetaData,\n            preferredChallenge,\n            password,\n        };\n        const autoSignInStoreState = autoSignInStore.getState();\n        if (autoSignInStoreState.active &&\n            autoSignInStoreState.username === username) {\n            handleUserAuthFlowInput.session = autoSignInStoreState.session;\n        }\n        const response = await handleUserAuthFlow(handleUserAuthFlowInput);\n        const activeUsername = getActiveSignInUsername(username);\n        setActiveSignInState({\n            signInSession: response.Session,\n            username: activeUsername,\n            challengeName: response.ChallengeName,\n            signInDetails,\n        });\n        if (response.AuthenticationResult) {\n            await cacheCognitoTokens({\n                username: activeUsername,\n                ...response.AuthenticationResult,\n                NewDeviceMetadata: await getNewDeviceMetadata({\n                    userPoolId: authConfig.userPoolId,\n                    userPoolEndpoint: authConfig.userPoolEndpoint,\n                    newDeviceMetadata: response.AuthenticationResult.NewDeviceMetadata,\n                    accessToken: response.AuthenticationResult.AccessToken,\n                }),\n                signInDetails,\n            });\n            resetActiveSignInState();\n            await dispatchSignedInHubEvent();\n            resetAutoSignIn();\n            return {\n                isSignedIn: true,\n                nextStep: { signInStep: 'DONE' },\n            };\n        }\n        return getSignInResult({\n            challengeName: response.ChallengeName,\n            challengeParameters: response.ChallengeParameters,\n            availableChallenges: 'AvailableChallenges' in response\n                ? response.AvailableChallenges\n                : undefined,\n        });\n    }\n    catch (error) {\n        resetActiveSignInState();\n        resetAutoSignIn();\n        assertServiceError(error);\n        const result = getSignInResultFromError(error.name);\n        if (result)\n            return result;\n        throw error;\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,kBAAkBA,CAACC,KAAK,EAAE;EAC5C,MAAM;IAAEC,QAAQ;IAAEC,QAAQ;IAAEC;EAAO,CAAE,GAAGH,KAAK;EAC7C,MAAMI,UAAU,GAAGC,OAAO,CAACC,SAAS,EAAE,CAACC,IAAI,EAAEC,OAAO;EACpD,MAAMC,aAAa,GAAG;IAClBC,OAAO,EAAET,QAAQ;IACjBU,YAAY,EAAE;EACtB,CAAK;EACDC,yBAAyB,CAACR,UAAU,CAAC;EACrC,MAAMS,cAAc,GAAGV,OAAO,EAAEW,cAAc;EAC9C,MAAMC,kBAAkB,GAAGZ,OAAO,EAAEY,kBAAkB;EACtDC,qBAAqB,CAAC,CAAC,CAACf,QAAQ,EAAEgB,uBAAuB,CAACC,mBAAmB,CAAC;EAC9E,IAAI;IACA,MAAMC,uBAAuB,GAAG;MAC5BlB,QAAQ;MACRmB,MAAM,EAAEhB,UAAU;MAClBiB,iBAAiB;MACjBP,cAAc,EAAED,cAAc;MAC9BE,kBAAkB;MAClBb;IACZ,CAAS;IACD,MAAMoB,oBAAoB,GAAGC,eAAe,CAACC,QAAQ,EAAE;IACvD,IAAIF,oBAAoB,CAACG,MAAM,IAC3BH,oBAAoB,CAACrB,QAAQ,KAAKA,QAAQ,EAAE;MAC5CkB,uBAAuB,CAACO,OAAO,GAAGJ,oBAAoB,CAACI,OAAO;IAC1E;IACQ,MAAMC,QAAQ,GAAG,MAAMC,kBAAkB,CAACT,uBAAuB,CAAC;IAClE,MAAMU,cAAc,GAAGC,uBAAuB,CAAC7B,QAAQ,CAAC;IACxD8B,oBAAoB,CAAC;MACjBC,aAAa,EAAEL,QAAQ,CAACM,OAAO;MAC/BhC,QAAQ,EAAE4B,cAAc;MACxBK,aAAa,EAAEP,QAAQ,CAACQ,aAAa;MACrC1B;IACZ,CAAS,CAAC;IACF,IAAIkB,QAAQ,CAACS,oBAAoB,EAAE;MAC/B,MAAMC,kBAAkB,CAAC;QACrBpC,QAAQ,EAAE4B,cAAc;QACxB,GAAGF,QAAQ,CAACS,oBAAoB;QAChCE,iBAAiB,EAAE,MAAMC,oBAAoB,CAAC;UAC1CC,UAAU,EAAEpC,UAAU,CAACoC,UAAU;UACjCC,gBAAgB,EAAErC,UAAU,CAACqC,gBAAgB;UAC7CC,iBAAiB,EAAEf,QAAQ,CAACS,oBAAoB,CAACE,iBAAiB;UAClEK,WAAW,EAAEhB,QAAQ,CAACS,oBAAoB,CAACQ;QAC/D,CAAiB,CAAC;QACFnC;MAChB,CAAa,CAAC;MACFoC,sBAAsB,EAAE;MACxB,MAAMC,wBAAwB,EAAE;MAChCC,eAAe,EAAE;MACjB,OAAO;QACHC,UAAU,EAAE,IAAI;QAChBC,QAAQ,EAAE;UAAEC,UAAU,EAAE;QAAM;MAC9C,CAAa;IACb;IACQ,OAAOC,eAAe,CAAC;MACnBjB,aAAa,EAAEP,QAAQ,CAACQ,aAAa;MACrCiB,mBAAmB,EAAEzB,QAAQ,CAAC0B,mBAAmB;MACjDC,mBAAmB,EAAE,qBAAqB,IAAI3B,QAAQ,GAChDA,QAAQ,CAAC4B,mBAAmB,GAC5BC;IAClB,CAAS,CAAC;EACV,CAAK,CACD,OAAOC,KAAK,EAAE;IACVZ,sBAAsB,EAAE;IACxBE,eAAe,EAAE;IACjBW,kBAAkB,CAACD,KAAK,CAAC;IACzB,MAAME,MAAM,GAAGC,wBAAwB,CAACH,KAAK,CAACI,IAAI,CAAC;IACnD,IAAIF,MAAM,EACN,OAAOA,MAAM;IACjB,MAAMF,KAAK;EACnB;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}