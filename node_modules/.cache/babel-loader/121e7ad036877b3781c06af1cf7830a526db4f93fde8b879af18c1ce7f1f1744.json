{"ast":null,"code":"import { syncSessionStorage } from '@aws-amplify/core';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n// Minutes until stored session invalidates is defaulted to 3 minutes\n// to maintain parity with Amazon Cognito user pools API behavior\nconst MS_TO_EXPIRY = 3 * 60 * 1000;\nconst TGT_STATE = 'CognitoSignInState';\nconst SIGN_IN_STATE_KEYS = {\n  username: `${TGT_STATE}.username`,\n  challengeName: `${TGT_STATE}.challengeName`,\n  signInSession: `${TGT_STATE}.signInSession`,\n  expiry: `${TGT_STATE}.expiry`\n};\nconst signInReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_SIGN_IN_SESSION':\n      persistSignInState({\n        signInSession: action.value\n      });\n      return {\n        ...state,\n        signInSession: action.value\n      };\n    case 'SET_SIGN_IN_STATE':\n      persistSignInState(action.value);\n      return {\n        ...action.value\n      };\n    case 'SET_CHALLENGE_NAME':\n      persistSignInState({\n        challengeName: action.value\n      });\n      return {\n        ...state,\n        challengeName: action.value\n      };\n    case 'SET_USERNAME':\n      persistSignInState({\n        username: action.value\n      });\n      return {\n        ...state,\n        username: action.value\n      };\n    case 'SET_INITIAL_STATE':\n      return getInitialState();\n    case 'RESET_STATE':\n      clearPersistedSignInState();\n      return getDefaultState();\n    // this state is never reachable\n    default:\n      return state;\n  }\n};\nconst isExpired = expiryDate => {\n  const expiryTimestamp = Number(expiryDate);\n  const currentTimestamp = Date.now();\n  return expiryTimestamp <= currentTimestamp;\n};\nconst resetActiveSignInState = () => {\n  signInStore.dispatch({\n    type: 'RESET_STATE'\n  });\n};\nconst clearPersistedSignInState = () => {\n  for (const stateKey of Object.values(SIGN_IN_STATE_KEYS)) {\n    syncSessionStorage.removeItem(stateKey);\n  }\n};\nconst getDefaultState = () => ({\n  username: undefined,\n  challengeName: undefined,\n  signInSession: undefined\n});\n// Hydrate signInStore from syncSessionStorage if the session has not expired\nconst getInitialState = () => {\n  const expiry = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.expiry);\n  if (!expiry || isExpired(expiry)) {\n    clearPersistedSignInState();\n    return getDefaultState();\n  }\n  const username = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.username) ?? undefined;\n  const challengeName = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.challengeName) ?? undefined;\n  const signInSession = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.signInSession) ?? undefined;\n  return {\n    username,\n    challengeName,\n    signInSession\n  };\n};\nconst createStore = reducer => {\n  let currentState = reducer(getDefaultState(), {\n    type: 'SET_INITIAL_STATE'\n  });\n  return {\n    getState: () => currentState,\n    dispatch: action => {\n      currentState = reducer(currentState, action);\n    }\n  };\n};\nconst signInStore = createStore(signInReducer);\nfunction setActiveSignInState(state) {\n  signInStore.dispatch({\n    type: 'SET_SIGN_IN_STATE',\n    value: state\n  });\n}\n// Save local state into Session Storage\nconst persistSignInState = _ref => {\n  let {\n    challengeName,\n    signInSession,\n    username\n  } = _ref;\n  username && syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.username, username);\n  challengeName && syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.challengeName, challengeName);\n  if (signInSession) {\n    syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.signInSession, signInSession);\n    // Updates expiry when session is passed\n    syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.expiry, String(Date.now() + MS_TO_EXPIRY));\n  }\n};\nexport { persistSignInState, resetActiveSignInState, setActiveSignInState, signInStore };","map":{"version":3,"names":["MS_TO_EXPIRY","TGT_STATE","SIGN_IN_STATE_KEYS","username","challengeName","signInSession","expiry","signInReducer","state","action","type","persistSignInState","value","getInitialState","clearPersistedSignInState","getDefaultState","isExpired","expiryDate","expiryTimestamp","Number","currentTimestamp","Date","now","resetActiveSignInState","signInStore","dispatch","stateKey","Object","values","syncSessionStorage","removeItem","undefined","getItem","createStore","reducer","currentState","getState","setActiveSignInState","_ref","setItem","String"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/auth/src/client/utils/store/signInStore.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { syncSessionStorage } from '@aws-amplify/core';\n// Minutes until stored session invalidates is defaulted to 3 minutes\n// to maintain parity with Amazon Cognito user pools API behavior\nconst MS_TO_EXPIRY = 3 * 60 * 1000;\nconst TGT_STATE = 'CognitoSignInState';\nconst SIGN_IN_STATE_KEYS = {\n    username: `${TGT_STATE}.username`,\n    challengeName: `${TGT_STATE}.challengeName`,\n    signInSession: `${TGT_STATE}.signInSession`,\n    expiry: `${TGT_STATE}.expiry`,\n};\nconst signInReducer = (state, action) => {\n    switch (action.type) {\n        case 'SET_SIGN_IN_SESSION':\n            persistSignInState({ signInSession: action.value });\n            return {\n                ...state,\n                signInSession: action.value,\n            };\n        case 'SET_SIGN_IN_STATE':\n            persistSignInState(action.value);\n            return {\n                ...action.value,\n            };\n        case 'SET_CHALLENGE_NAME':\n            persistSignInState({ challengeName: action.value });\n            return {\n                ...state,\n                challengeName: action.value,\n            };\n        case 'SET_USERNAME':\n            persistSignInState({ username: action.value });\n            return {\n                ...state,\n                username: action.value,\n            };\n        case 'SET_INITIAL_STATE':\n            return getInitialState();\n        case 'RESET_STATE':\n            clearPersistedSignInState();\n            return getDefaultState();\n        // this state is never reachable\n        default:\n            return state;\n    }\n};\nconst isExpired = (expiryDate) => {\n    const expiryTimestamp = Number(expiryDate);\n    const currentTimestamp = Date.now();\n    return expiryTimestamp <= currentTimestamp;\n};\nexport const resetActiveSignInState = () => {\n    signInStore.dispatch({ type: 'RESET_STATE' });\n};\nconst clearPersistedSignInState = () => {\n    for (const stateKey of Object.values(SIGN_IN_STATE_KEYS)) {\n        syncSessionStorage.removeItem(stateKey);\n    }\n};\nconst getDefaultState = () => ({\n    username: undefined,\n    challengeName: undefined,\n    signInSession: undefined,\n});\n// Hydrate signInStore from syncSessionStorage if the session has not expired\nconst getInitialState = () => {\n    const expiry = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.expiry);\n    if (!expiry || isExpired(expiry)) {\n        clearPersistedSignInState();\n        return getDefaultState();\n    }\n    const username = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.username) ?? undefined;\n    const challengeName = (syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.challengeName) ?? undefined);\n    const signInSession = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.signInSession) ?? undefined;\n    return {\n        username,\n        challengeName,\n        signInSession,\n    };\n};\nconst createStore = reducer => {\n    let currentState = reducer(getDefaultState(), { type: 'SET_INITIAL_STATE' });\n    return {\n        getState: () => currentState,\n        dispatch: action => {\n            currentState = reducer(currentState, action);\n        },\n    };\n};\nexport const signInStore = createStore(signInReducer);\nexport function setActiveSignInState(state) {\n    signInStore.dispatch({\n        type: 'SET_SIGN_IN_STATE',\n        value: state,\n    });\n}\n// Save local state into Session Storage\nexport const persistSignInState = ({ challengeName, signInSession, username, }) => {\n    username && syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.username, username);\n    challengeName &&\n        syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.challengeName, challengeName);\n    if (signInSession) {\n        syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.signInSession, signInSession);\n        // Updates expiry when session is passed\n        syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.expiry, String(Date.now() + MS_TO_EXPIRY));\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}