{"ast":null,"code":"import { authenticatedHandler } from '../../clients/handlers/authenticated.mjs';\nimport { composeServiceApi } from '../../clients/internal/composeServiceApi.mjs';\nimport { extendedEncodeURIComponent } from '../../clients/middleware/signing/utils/extendedEncodeURIComponent.mjs';\nimport { parseMetadata } from '../../clients/serde/responseInfo.mjs';\nimport { parseJsonError, parseJsonBody } from '../../clients/serde/json.mjs';\nimport { AmplifyUrl } from '../../utils/amplifyUrl/index.mjs';\nimport { defaultConfig, getSharedHeaders } from './base.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst updateEndpointSerializer = (_ref, endpoint) => {\n  let {\n    ApplicationId = '',\n    EndpointId = '',\n    EndpointRequest\n  } = _ref;\n  const headers = getSharedHeaders();\n  const url = new AmplifyUrl(endpoint.url);\n  url.pathname = `v1/apps/${extendedEncodeURIComponent(ApplicationId)}/endpoints/${extendedEncodeURIComponent(EndpointId)}`;\n  const body = JSON.stringify(EndpointRequest);\n  return {\n    method: 'PUT',\n    headers,\n    url,\n    body\n  };\n};\nconst updateEndpointDeserializer = async response => {\n  if (response.statusCode >= 300) {\n    const error = await parseJsonError(response);\n    throw error;\n  } else {\n    const {\n      Message,\n      RequestID\n    } = await parseJsonBody(response);\n    return {\n      MessageBody: {\n        Message,\n        RequestID\n      },\n      $metadata: parseMetadata(response)\n    };\n  }\n};\n/**\n * @internal\n */\nconst updateEndpoint = composeServiceApi(authenticatedHandler, updateEndpointSerializer, updateEndpointDeserializer, defaultConfig);\nexport { updateEndpoint };","map":{"version":3,"names":["updateEndpointSerializer","_ref","endpoint","ApplicationId","EndpointId","EndpointRequest","headers","getSharedHeaders","url","AmplifyUrl","pathname","extendedEncodeURIComponent","body","JSON","stringify","method","updateEndpointDeserializer","response","statusCode","error","parseJsonError","Message","RequestID","parseJsonBody","MessageBody","$metadata","parseMetadata","updateEndpoint","composeServiceApi","authenticatedHandler","defaultConfig"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/core/src/awsClients/pinpoint/updateEndpoint.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { authenticatedHandler } from '../../clients/handlers/authenticated';\nimport { composeServiceApi } from '../../clients/internal/composeServiceApi';\nimport { extendedEncodeURIComponent } from '../../clients/middleware/signing/utils/extendedEncodeURIComponent';\nimport { parseJsonBody, parseJsonError, parseMetadata, } from '../../clients/serde';\nimport { AmplifyUrl } from '../../utils/amplifyUrl';\nimport { defaultConfig, getSharedHeaders } from './base';\nconst updateEndpointSerializer = ({ ApplicationId = '', EndpointId = '', EndpointRequest }, endpoint) => {\n    const headers = getSharedHeaders();\n    const url = new AmplifyUrl(endpoint.url);\n    url.pathname = `v1/apps/${extendedEncodeURIComponent(ApplicationId)}/endpoints/${extendedEncodeURIComponent(EndpointId)}`;\n    const body = JSON.stringify(EndpointRequest);\n    return { method: 'PUT', headers, url, body };\n};\nconst updateEndpointDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        const error = await parseJsonError(response);\n        throw error;\n    }\n    else {\n        const { Message, RequestID } = await parseJsonBody(response);\n        return {\n            MessageBody: {\n                Message,\n                RequestID,\n            },\n            $metadata: parseMetadata(response),\n        };\n    }\n};\n/**\n * @internal\n */\nexport const updateEndpoint = composeServiceApi(authenticatedHandler, updateEndpointSerializer, updateEndpointDeserializer, defaultConfig);\n"],"mappings":";;;;;;;;AAAA;AACA;AAOA,MAAMA,wBAAwB,GAAGA,CAAAC,IAAA,EAA2DC,QAAQ,KAAK;EAAA,IAAvE;IAAEC,aAAa,GAAG,EAAE;IAAEC,UAAU,GAAG,EAAE;IAAEC;EAAe,CAAE,GAAAJ,IAAA;EACtF,MAAMK,OAAO,GAAGC,gBAAgB,EAAE;EAClC,MAAMC,GAAG,GAAG,IAAIC,UAAU,CAACP,QAAQ,CAACM,GAAG,CAAC;EACxCA,GAAG,CAACE,QAAQ,GAAG,WAAWC,0BAA0B,CAACR,aAAa,CAAC,cAAcQ,0BAA0B,CAACP,UAAU,CAAC,EAAE;EACzH,MAAMQ,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACT,eAAe,CAAC;EAC5C,OAAO;IAAEU,MAAM,EAAE,KAAK;IAAET,OAAO;IAAEE,GAAG;IAAEI;EAAI,CAAE;AAChD,CAAC;AACD,MAAMI,0BAA0B,GAAG,MAAOC,QAAQ,IAAK;EACnD,IAAIA,QAAQ,CAACC,UAAU,IAAI,GAAG,EAAE;IAC5B,MAAMC,KAAK,GAAG,MAAMC,cAAc,CAACH,QAAQ,CAAC;IAC5C,MAAME,KAAK;EACnB,CAAK,MACI;IACD,MAAM;MAAEE,OAAO;MAAEC;IAAS,CAAE,GAAG,MAAMC,aAAa,CAACN,QAAQ,CAAC;IAC5D,OAAO;MACHO,WAAW,EAAE;QACTH,OAAO;QACPC;MAChB,CAAa;MACDG,SAAS,EAAEC,aAAa,CAACT,QAAQ;IAC7C,CAAS;EACT;AACA,CAAC;AACD;AACA;AACA;AACY,MAACU,cAAc,GAAGC,iBAAiB,CAACC,oBAAoB,EAAE7B,wBAAwB,EAAEgB,0BAA0B,EAAEc,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}