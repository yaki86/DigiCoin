{"ast":null,"code":"import { listFactory } from '../../operations/list.mjs';\nimport { indexQueryFactory } from '../../operations/indexQuery.mjs';\nimport { getFactory } from '../../operations/get.mjs';\nimport { subscriptionFactory } from '../../operations/subscription.mjs';\nimport { observeQueryFactory } from '../../operations/observeQuery.mjs';\nimport { excludeDisabledOps, getSecondaryIndexesFromSchemaModel } from '../../clientUtils.mjs';\nfunction generateModelsProperty(client, apiGraphQLConfig, getInternals) {\n  const models = {};\n  const modelIntrospection = apiGraphQLConfig.modelIntrospection;\n  if (!modelIntrospection) {\n    return {};\n  }\n  const SUBSCRIPTION_OPS = ['ONCREATE', 'ONUPDATE', 'ONDELETE'];\n  for (const model of Object.values(modelIntrospection.models)) {\n    const {\n      name\n    } = model;\n    models[name] = {};\n    const enabledModelOps = excludeDisabledOps(modelIntrospection, name);\n    Object.entries(enabledModelOps).forEach(([key, {\n      operationPrefix\n    }]) => {\n      const operation = key;\n      if (operation === 'LIST') {\n        models[name][operationPrefix] = listFactory(client, modelIntrospection, model, getInternals);\n      } else if (SUBSCRIPTION_OPS.includes(operation)) {\n        models[name][operationPrefix] = subscriptionFactory(client, modelIntrospection, model, operation, getInternals);\n      } else if (operation === 'OBSERVEQUERY') {\n        models[name][operationPrefix] = observeQueryFactory(models, model);\n      } else {\n        models[name][operationPrefix] = getFactory(client, modelIntrospection, model, operation, getInternals);\n      }\n    });\n    const secondaryIdxs = getSecondaryIndexesFromSchemaModel(model);\n    for (const idx of secondaryIdxs) {\n      models[name][idx.queryField] = indexQueryFactory(client, modelIntrospection, model, idx, getInternals);\n    }\n  }\n  return models;\n}\nexport { generateModelsProperty };","map":{"version":3,"names":["generateModelsProperty","client","apiGraphQLConfig","getInternals","models","modelIntrospection","SUBSCRIPTION_OPS","model","Object","values","name","enabledModelOps","excludeDisabledOps","entries","forEach","key","operationPrefix","operation","listFactory","includes","subscriptionFactory","observeQueryFactory","getFactory","secondaryIdxs","getSecondaryIndexesFromSchemaModel","idx","queryField","indexQueryFactory"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/data-schema/src/runtime/internals/utils/clientProperties/generateModelsProperty.ts"],"sourcesContent":["import { listFactory } from '../../operations/list';\nimport { indexQueryFactory } from '../../operations/indexQuery';\nimport { getFactory } from '../../operations/get';\nimport { subscriptionFactory } from '../../operations/subscription';\nimport { observeQueryFactory } from '../../operations/observeQuery';\nimport { getSecondaryIndexesFromSchemaModel, excludeDisabledOps, } from '../../clientUtils';\nexport function generateModelsProperty(client, apiGraphQLConfig, getInternals) {\n    const models = {};\n    const modelIntrospection = apiGraphQLConfig.modelIntrospection;\n    if (!modelIntrospection) {\n        return {};\n    }\n    const SUBSCRIPTION_OPS = ['ONCREATE', 'ONUPDATE', 'ONDELETE'];\n    for (const model of Object.values(modelIntrospection.models)) {\n        const { name } = model;\n        models[name] = {};\n        const enabledModelOps = excludeDisabledOps(modelIntrospection, name);\n        Object.entries(enabledModelOps).forEach(([key, { operationPrefix }]) => {\n            const operation = key;\n            if (operation === 'LIST') {\n                models[name][operationPrefix] = listFactory(client, modelIntrospection, model, getInternals);\n            }\n            else if (SUBSCRIPTION_OPS.includes(operation)) {\n                models[name][operationPrefix] = subscriptionFactory(client, modelIntrospection, model, operation, getInternals);\n            }\n            else if (operation === 'OBSERVEQUERY') {\n                models[name][operationPrefix] = observeQueryFactory(models, model);\n            }\n            else {\n                models[name][operationPrefix] = getFactory(client, modelIntrospection, model, operation, getInternals);\n            }\n        });\n        const secondaryIdxs = getSecondaryIndexesFromSchemaModel(model);\n        for (const idx of secondaryIdxs) {\n            models[name][idx.queryField] = indexQueryFactory(client, modelIntrospection, model, idx, getInternals);\n        }\n    }\n    return models;\n}\n"],"mappings":";;;;;;AAMO,SAASA,sBAAsBA,CAACC,MAAM,EAAEC,gBAAgB,EAAEC,YAAY,EAAE;EAC3E,MAAMC,MAAM,GAAG,EAAE;EACjB,MAAMC,kBAAkB,GAAGH,gBAAgB,CAACG,kBAAkB;EAC9D,IAAI,CAACA,kBAAkB,EAAE;IACrB,OAAO,EAAE;EACjB;EACI,MAAMC,gBAAgB,GAAG,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,CAAC;EAC7D,KAAK,MAAMC,KAAK,IAAIC,MAAM,CAACC,MAAM,CAACJ,kBAAkB,CAACD,MAAM,CAAC,EAAE;IAC1D,MAAM;MAAEM;IAAI,CAAE,GAAGH,KAAK;IACtBH,MAAM,CAACM,IAAI,CAAC,GAAG,EAAE;IACjB,MAAMC,eAAe,GAAGC,kBAAkB,CAACP,kBAAkB,EAAEK,IAAI,CAAC;IACpEF,MAAM,CAACK,OAAO,CAACF,eAAe,CAAC,CAACG,OAAO,CAAC,CAAC,CAACC,GAAG,EAAE;MAAEC;IAAe,CAAE,CAAC,KAAK;MACpE,MAAMC,SAAS,GAAGF,GAAG;MACrB,IAAIE,SAAS,KAAK,MAAM,EAAE;QACtBb,MAAM,CAACM,IAAI,CAAC,CAACM,eAAe,CAAC,GAAGE,WAAW,CAACjB,MAAM,EAAEI,kBAAkB,EAAEE,KAAK,EAAEJ,YAAY,CAAC;MAC5G,CAAa,MACI,IAAIG,gBAAgB,CAACa,QAAQ,CAACF,SAAS,CAAC,EAAE;QAC3Cb,MAAM,CAACM,IAAI,CAAC,CAACM,eAAe,CAAC,GAAGI,mBAAmB,CAACnB,MAAM,EAAEI,kBAAkB,EAAEE,KAAK,EAAEU,SAAS,EAAEd,YAAY,CAAC;MAC/H,CAAa,MACI,IAAIc,SAAS,KAAK,cAAc,EAAE;QACnCb,MAAM,CAACM,IAAI,CAAC,CAACM,eAAe,CAAC,GAAGK,mBAAmB,CAACjB,MAAM,EAAEG,KAAK,CAAC;MAClF,CAAa,MACI;QACDH,MAAM,CAACM,IAAI,CAAC,CAACM,eAAe,CAAC,GAAGM,UAAU,CAACrB,MAAM,EAAEI,kBAAkB,EAAEE,KAAK,EAAEU,SAAS,EAAEd,YAAY,CAAC;MACtH;IACA,CAAS,CAAC;IACF,MAAMoB,aAAa,GAAGC,kCAAkC,CAACjB,KAAK,CAAC;IAC/D,KAAK,MAAMkB,GAAG,IAAIF,aAAa,EAAE;MAC7BnB,MAAM,CAACM,IAAI,CAAC,CAACe,GAAG,CAACC,UAAU,CAAC,GAAGC,iBAAiB,CAAC1B,MAAM,EAAEI,kBAAkB,EAAEE,KAAK,EAAEkB,GAAG,EAAEtB,YAAY,CAAC;IAClH;EACA;EACI,OAAOC,MAAM;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}