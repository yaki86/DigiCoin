{"ast":null,"code":"import { assertCredentialIsPkcWithAuthenticatorAttestationResponse } from './types/index.mjs';\nimport { deserializeJsonToPkcCreationOptions, serializePkcWithAttestationToJson } from './serde.mjs';\nimport { assertPasskeyError, PasskeyErrorCode, handlePasskeyRegistrationError } from './errors.mjs';\nimport { getIsPasskeySupported } from './getIsPasskeySupported.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Registers a new passkey for user\n * @param input - PasskeyCreateOptionsJson\n * @returns serialized PasskeyCreateResult\n */\nconst registerPasskey = async input => {\n  try {\n    const isPasskeySupported = getIsPasskeySupported();\n    assertPasskeyError(isPasskeySupported, PasskeyErrorCode.PasskeyNotSupported);\n    const passkeyCreationOptions = deserializeJsonToPkcCreationOptions(input);\n    const credential = await navigator.credentials.create({\n      publicKey: passkeyCreationOptions\n    });\n    assertCredentialIsPkcWithAuthenticatorAttestationResponse(credential);\n    return serializePkcWithAttestationToJson(credential);\n  } catch (err) {\n    throw handlePasskeyRegistrationError(err);\n  }\n};\nexport { registerPasskey };","map":{"version":3,"names":["registerPasskey","input","isPasskeySupported","getIsPasskeySupported","assertPasskeyError","PasskeyErrorCode","PasskeyNotSupported","passkeyCreationOptions","deserializeJsonToPkcCreationOptions","credential","navigator","credentials","create","publicKey","assertCredentialIsPkcWithAuthenticatorAttestationResponse","serializePkcWithAttestationToJson","err","handlePasskeyRegistrationError"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/auth/src/client/utils/passkey/registerPasskey.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { assertCredentialIsPkcWithAuthenticatorAttestationResponse, } from './types';\nimport { deserializeJsonToPkcCreationOptions, serializePkcWithAttestationToJson, } from './serde';\nimport { PasskeyErrorCode, assertPasskeyError, handlePasskeyRegistrationError, } from './errors';\nimport { getIsPasskeySupported } from './getIsPasskeySupported';\n/**\n * Registers a new passkey for user\n * @param input - PasskeyCreateOptionsJson\n * @returns serialized PasskeyCreateResult\n */\nexport const registerPasskey = async (input) => {\n    try {\n        const isPasskeySupported = getIsPasskeySupported();\n        assertPasskeyError(isPasskeySupported, PasskeyErrorCode.PasskeyNotSupported);\n        const passkeyCreationOptions = deserializeJsonToPkcCreationOptions(input);\n        const credential = await navigator.credentials.create({\n            publicKey: passkeyCreationOptions,\n        });\n        assertCredentialIsPkcWithAuthenticatorAttestationResponse(credential);\n        return serializePkcWithAttestationToJson(credential);\n    }\n    catch (err) {\n        throw handlePasskeyRegistrationError(err);\n    }\n};\n"],"mappings":";;;;;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACY,MAACA,eAAe,GAAG,MAAOC,KAAK,IAAK;EAC5C,IAAI;IACA,MAAMC,kBAAkB,GAAGC,qBAAqB,EAAE;IAClDC,kBAAkB,CAACF,kBAAkB,EAAEG,gBAAgB,CAACC,mBAAmB,CAAC;IAC5E,MAAMC,sBAAsB,GAAGC,mCAAmC,CAACP,KAAK,CAAC;IACzE,MAAMQ,UAAU,GAAG,MAAMC,SAAS,CAACC,WAAW,CAACC,MAAM,CAAC;MAClDC,SAAS,EAAEN;IACvB,CAAS,CAAC;IACFO,yDAAyD,CAACL,UAAU,CAAC;IACrE,OAAOM,iCAAiC,CAACN,UAAU,CAAC;EAC5D,CAAK,CACD,OAAOO,GAAG,EAAE;IACR,MAAMC,8BAA8B,CAACD,GAAG,CAAC;EACjD;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}