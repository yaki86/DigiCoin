{"ast":null,"code":"import { customOpFactory } from '../operations/custom.mjs';\nimport { getCustomUserAgentDetails, AiAction } from './getCustomUserAgentDetails.mjs';\nimport { convertItemToConversationStreamEvent } from './conversationStreamEventDeserializers.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createOnStreamEventFunction = (client, modelIntrospection, conversationId, conversationRouteName, getInternals) => handler => {\n  const {\n    conversations\n  } = modelIntrospection;\n  // Safe guard for standalone function. When called as part of client generation, this should never be falsy.\n  if (!conversations) {\n    return {};\n  }\n  const subscribeSchema = conversations[conversationRouteName].message.subscribe;\n  const subscribeOperation = customOpFactory(client, modelIntrospection, 'subscription', subscribeSchema, false, getInternals, getCustomUserAgentDetails(AiAction.OnStreamEvent));\n  return subscribeOperation({\n    conversationId\n  }).subscribe(data => {\n    const {\n      next,\n      error\n    } = convertItemToConversationStreamEvent(data);\n    if (error) handler.error(error);\n    if (next) handler.next(next);\n  });\n};\nexport { createOnStreamEventFunction };","map":{"version":3,"names":["createOnStreamEventFunction","client","modelIntrospection","conversationId","conversationRouteName","getInternals","handler","conversations","subscribeSchema","message","subscribe","subscribeOperation","customOpFactory","getCustomUserAgentDetails","AiAction","OnStreamEvent","data","next","error","convertItemToConversationStreamEvent"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/data-schema/src/runtime/internals/ai/createOnStreamEventFunction.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { customOpFactory } from '../operations/custom';\nimport { AiAction, getCustomUserAgentDetails } from './getCustomUserAgentDetails';\nimport { convertItemToConversationStreamEvent } from './conversationStreamEventDeserializers';\nexport const createOnStreamEventFunction = (client, modelIntrospection, conversationId, conversationRouteName, getInternals) => (handler) => {\n    const { conversations } = modelIntrospection;\n    // Safe guard for standalone function. When called as part of client generation, this should never be falsy.\n    if (!conversations) {\n        return {};\n    }\n    const subscribeSchema = conversations[conversationRouteName].message.subscribe;\n    const subscribeOperation = customOpFactory(client, modelIntrospection, 'subscription', subscribeSchema, false, getInternals, getCustomUserAgentDetails(AiAction.OnStreamEvent));\n    return subscribeOperation({ conversationId }).subscribe((data) => {\n        const { next, error } = convertItemToConversationStreamEvent(data);\n        if (error)\n            handler.error(error);\n        if (next)\n            handler.next(next);\n    });\n};\n"],"mappings":";;;;AAAA;AACA;AAIY,MAACA,2BAA2B,GAAGA,CAACC,MAAM,EAAEC,kBAAkB,EAAEC,cAAc,EAAEC,qBAAqB,EAAEC,YAAY,KAAMC,OAAO,IAAK;EACzI,MAAM;IAAEC;EAAa,CAAE,GAAGL,kBAAkB;EAChD;EACI,IAAI,CAACK,aAAa,EAAE;IAChB,OAAO,EAAE;EACjB;EACI,MAAMC,eAAe,GAAGD,aAAa,CAACH,qBAAqB,CAAC,CAACK,OAAO,CAACC,SAAS;EAC9E,MAAMC,kBAAkB,GAAGC,eAAe,CAACX,MAAM,EAAEC,kBAAkB,EAAE,cAAc,EAAEM,eAAe,EAAE,KAAK,EAAEH,YAAY,EAAEQ,yBAAyB,CAACC,QAAQ,CAACC,aAAa,CAAC,CAAC;EAC/K,OAAOJ,kBAAkB,CAAC;IAAER;EAAc,CAAE,CAAC,CAACO,SAAS,CAAEM,IAAI,IAAK;IAC9D,MAAM;MAAEC,IAAI;MAAEC;IAAK,CAAE,GAAGC,oCAAoC,CAACH,IAAI,CAAC;IAClE,IAAIE,KAAK,EACLZ,OAAO,CAACY,KAAK,CAACA,KAAK,CAAC;IACxB,IAAID,IAAI,EACJX,OAAO,CAACW,IAAI,CAACA,IAAI,CAAC;EAC9B,CAAK,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}