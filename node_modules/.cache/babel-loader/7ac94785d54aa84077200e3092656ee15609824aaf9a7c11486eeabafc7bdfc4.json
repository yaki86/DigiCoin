{"ast":null,"code":"import { decodeJWT, assertTokenProviderConfig } from '@aws-amplify/core/internals/utils';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { AuthTokenStorageKeys } from './types.mjs';\nimport { assert, TokenProviderErrorCode } from './errorHelpers.mjs';\nclass DefaultTokenStore {\n  constructor() {\n    this.name = 'CognitoIdentityServiceProvider'; // To be backwards compatible with V5, no migration needed\n  }\n  getKeyValueStorage() {\n    if (!this.keyValueStorage) {\n      throw new AuthError({\n        name: 'KeyValueStorageNotFoundException',\n        message: 'KeyValueStorage was not found in TokenStore'\n      });\n    }\n    return this.keyValueStorage;\n  }\n  setKeyValueStorage(keyValueStorage) {\n    this.keyValueStorage = keyValueStorage;\n  }\n  setAuthConfig(authConfig) {\n    this.authConfig = authConfig;\n  }\n  async loadTokens() {\n    // TODO(v6): migration logic should be here\n    // Reading V5 tokens old format\n    try {\n      const authKeys = await this.getAuthKeys();\n      const accessTokenString = await this.getKeyValueStorage().getItem(authKeys.accessToken);\n      if (!accessTokenString) {\n        throw new AuthError({\n          name: 'NoSessionFoundException',\n          message: 'Auth session was not found. Make sure to call signIn.'\n        });\n      }\n      const accessToken = decodeJWT(accessTokenString);\n      const itString = await this.getKeyValueStorage().getItem(authKeys.idToken);\n      const idToken = itString ? decodeJWT(itString) : undefined;\n      const refreshToken = (await this.getKeyValueStorage().getItem(authKeys.refreshToken)) ?? undefined;\n      const clockDriftString = (await this.getKeyValueStorage().getItem(authKeys.clockDrift)) ?? '0';\n      const clockDrift = Number.parseInt(clockDriftString);\n      const signInDetails = await this.getKeyValueStorage().getItem(authKeys.signInDetails);\n      const tokens = {\n        accessToken,\n        idToken,\n        refreshToken,\n        deviceMetadata: (await this.getDeviceMetadata()) ?? undefined,\n        clockDrift,\n        username: await this.getLastAuthUser()\n      };\n      if (signInDetails) {\n        tokens.signInDetails = JSON.parse(signInDetails);\n      }\n      return tokens;\n    } catch (err) {\n      return null;\n    }\n  }\n  async storeTokens(tokens) {\n    assert(tokens !== undefined, TokenProviderErrorCode.InvalidAuthTokens);\n    await this.clearTokens();\n    const lastAuthUser = tokens.username;\n    await this.getKeyValueStorage().setItem(this.getLastAuthUserKey(), lastAuthUser);\n    const authKeys = await this.getAuthKeys();\n    await this.getKeyValueStorage().setItem(authKeys.accessToken, tokens.accessToken.toString());\n    if (tokens.idToken) {\n      await this.getKeyValueStorage().setItem(authKeys.idToken, tokens.idToken.toString());\n    }\n    if (tokens.refreshToken) {\n      await this.getKeyValueStorage().setItem(authKeys.refreshToken, tokens.refreshToken);\n    }\n    if (tokens.deviceMetadata) {\n      if (tokens.deviceMetadata.deviceKey) {\n        await this.getKeyValueStorage().setItem(authKeys.deviceKey, tokens.deviceMetadata.deviceKey);\n      }\n      if (tokens.deviceMetadata.deviceGroupKey) {\n        await this.getKeyValueStorage().setItem(authKeys.deviceGroupKey, tokens.deviceMetadata.deviceGroupKey);\n      }\n      await this.getKeyValueStorage().setItem(authKeys.randomPasswordKey, tokens.deviceMetadata.randomPassword);\n    }\n    if (tokens.signInDetails) {\n      await this.getKeyValueStorage().setItem(authKeys.signInDetails, JSON.stringify(tokens.signInDetails));\n    }\n    await this.getKeyValueStorage().setItem(authKeys.clockDrift, `${tokens.clockDrift}`);\n  }\n  async clearTokens() {\n    const authKeys = await this.getAuthKeys();\n    // Not calling clear because it can remove data that is not managed by AuthTokenStore\n    await Promise.all([this.getKeyValueStorage().removeItem(authKeys.accessToken), this.getKeyValueStorage().removeItem(authKeys.idToken), this.getKeyValueStorage().removeItem(authKeys.clockDrift), this.getKeyValueStorage().removeItem(authKeys.refreshToken), this.getKeyValueStorage().removeItem(authKeys.signInDetails), this.getKeyValueStorage().removeItem(this.getLastAuthUserKey()), this.getKeyValueStorage().removeItem(authKeys.oauthMetadata)]);\n  }\n  async getDeviceMetadata(username) {\n    const authKeys = await this.getAuthKeys(username);\n    const deviceKey = await this.getKeyValueStorage().getItem(authKeys.deviceKey);\n    const deviceGroupKey = await this.getKeyValueStorage().getItem(authKeys.deviceGroupKey);\n    const randomPassword = await this.getKeyValueStorage().getItem(authKeys.randomPasswordKey);\n    return randomPassword && deviceGroupKey && deviceKey ? {\n      deviceKey,\n      deviceGroupKey,\n      randomPassword\n    } : null;\n  }\n  async clearDeviceMetadata(username) {\n    const authKeys = await this.getAuthKeys(username);\n    await Promise.all([this.getKeyValueStorage().removeItem(authKeys.deviceKey), this.getKeyValueStorage().removeItem(authKeys.deviceGroupKey), this.getKeyValueStorage().removeItem(authKeys.randomPasswordKey)]);\n  }\n  async getAuthKeys(username) {\n    assertTokenProviderConfig(this.authConfig?.Cognito);\n    const lastAuthUser = username ?? (await this.getLastAuthUser());\n    return createKeysForAuthStorage(this.name, `${this.authConfig.Cognito.userPoolClientId}.${lastAuthUser}`);\n  }\n  getLastAuthUserKey() {\n    assertTokenProviderConfig(this.authConfig?.Cognito);\n    const identifier = this.authConfig.Cognito.userPoolClientId;\n    return `${this.name}.${identifier}.LastAuthUser`;\n  }\n  async getLastAuthUser() {\n    const lastAuthUser = (await this.getKeyValueStorage().getItem(this.getLastAuthUserKey())) ?? 'username';\n    return lastAuthUser;\n  }\n  async setOAuthMetadata(metadata) {\n    const {\n      oauthMetadata: oauthMetadataKey\n    } = await this.getAuthKeys();\n    await this.getKeyValueStorage().setItem(oauthMetadataKey, JSON.stringify(metadata));\n  }\n  async getOAuthMetadata() {\n    const {\n      oauthMetadata: oauthMetadataKey\n    } = await this.getAuthKeys();\n    const oauthMetadata = await this.getKeyValueStorage().getItem(oauthMetadataKey);\n    return oauthMetadata && JSON.parse(oauthMetadata);\n  }\n}\nconst createKeysForAuthStorage = (provider, identifier) => {\n  return getAuthStorageKeys(AuthTokenStorageKeys)(`${provider}`, identifier);\n};\nfunction getAuthStorageKeys(authKeys) {\n  const keys = Object.values({\n    ...authKeys\n  });\n  return (prefix, identifier) => keys.reduce((acc, authKey) => ({\n    ...acc,\n    [authKey]: `${prefix}.${identifier}.${authKey}`\n  }), {});\n}\nexport { DefaultTokenStore, createKeysForAuthStorage, getAuthStorageKeys };","map":{"version":3,"names":["DefaultTokenStore","constructor","name","getKeyValueStorage","keyValueStorage","AuthError","message","setKeyValueStorage","setAuthConfig","authConfig","loadTokens","authKeys","getAuthKeys","accessTokenString","getItem","accessToken","decodeJWT","itString","idToken","undefined","refreshToken","clockDriftString","clockDrift","Number","parseInt","signInDetails","tokens","deviceMetadata","getDeviceMetadata","username","getLastAuthUser","JSON","parse","err","storeTokens","assert","TokenProviderErrorCode","InvalidAuthTokens","clearTokens","lastAuthUser","setItem","getLastAuthUserKey","toString","deviceKey","deviceGroupKey","randomPasswordKey","randomPassword","stringify","Promise","all","removeItem","oauthMetadata","clearDeviceMetadata","assertTokenProviderConfig","Cognito","createKeysForAuthStorage","userPoolClientId","identifier","setOAuthMetadata","metadata","oauthMetadataKey","getOAuthMetadata","provider","getAuthStorageKeys","AuthTokenStorageKeys","keys","Object","values","prefix","reduce","acc","authKey"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/auth/src/providers/cognito/tokenProvider/TokenStore.ts"],"sourcesContent":["import { assertTokenProviderConfig, decodeJWT, } from '@aws-amplify/core/internals/utils';\nimport { AuthError } from '../../../errors/AuthError';\nimport { AuthTokenStorageKeys, } from './types';\nimport { TokenProviderErrorCode, assert } from './errorHelpers';\nexport class DefaultTokenStore {\n    constructor() {\n        this.name = 'CognitoIdentityServiceProvider'; // To be backwards compatible with V5, no migration needed\n    }\n    getKeyValueStorage() {\n        if (!this.keyValueStorage) {\n            throw new AuthError({\n                name: 'KeyValueStorageNotFoundException',\n                message: 'KeyValueStorage was not found in TokenStore',\n            });\n        }\n        return this.keyValueStorage;\n    }\n    setKeyValueStorage(keyValueStorage) {\n        this.keyValueStorage = keyValueStorage;\n    }\n    setAuthConfig(authConfig) {\n        this.authConfig = authConfig;\n    }\n    async loadTokens() {\n        // TODO(v6): migration logic should be here\n        // Reading V5 tokens old format\n        try {\n            const authKeys = await this.getAuthKeys();\n            const accessTokenString = await this.getKeyValueStorage().getItem(authKeys.accessToken);\n            if (!accessTokenString) {\n                throw new AuthError({\n                    name: 'NoSessionFoundException',\n                    message: 'Auth session was not found. Make sure to call signIn.',\n                });\n            }\n            const accessToken = decodeJWT(accessTokenString);\n            const itString = await this.getKeyValueStorage().getItem(authKeys.idToken);\n            const idToken = itString ? decodeJWT(itString) : undefined;\n            const refreshToken = (await this.getKeyValueStorage().getItem(authKeys.refreshToken)) ??\n                undefined;\n            const clockDriftString = (await this.getKeyValueStorage().getItem(authKeys.clockDrift)) ?? '0';\n            const clockDrift = Number.parseInt(clockDriftString);\n            const signInDetails = await this.getKeyValueStorage().getItem(authKeys.signInDetails);\n            const tokens = {\n                accessToken,\n                idToken,\n                refreshToken,\n                deviceMetadata: (await this.getDeviceMetadata()) ?? undefined,\n                clockDrift,\n                username: await this.getLastAuthUser(),\n            };\n            if (signInDetails) {\n                tokens.signInDetails = JSON.parse(signInDetails);\n            }\n            return tokens;\n        }\n        catch (err) {\n            return null;\n        }\n    }\n    async storeTokens(tokens) {\n        assert(tokens !== undefined, TokenProviderErrorCode.InvalidAuthTokens);\n        await this.clearTokens();\n        const lastAuthUser = tokens.username;\n        await this.getKeyValueStorage().setItem(this.getLastAuthUserKey(), lastAuthUser);\n        const authKeys = await this.getAuthKeys();\n        await this.getKeyValueStorage().setItem(authKeys.accessToken, tokens.accessToken.toString());\n        if (tokens.idToken) {\n            await this.getKeyValueStorage().setItem(authKeys.idToken, tokens.idToken.toString());\n        }\n        if (tokens.refreshToken) {\n            await this.getKeyValueStorage().setItem(authKeys.refreshToken, tokens.refreshToken);\n        }\n        if (tokens.deviceMetadata) {\n            if (tokens.deviceMetadata.deviceKey) {\n                await this.getKeyValueStorage().setItem(authKeys.deviceKey, tokens.deviceMetadata.deviceKey);\n            }\n            if (tokens.deviceMetadata.deviceGroupKey) {\n                await this.getKeyValueStorage().setItem(authKeys.deviceGroupKey, tokens.deviceMetadata.deviceGroupKey);\n            }\n            await this.getKeyValueStorage().setItem(authKeys.randomPasswordKey, tokens.deviceMetadata.randomPassword);\n        }\n        if (tokens.signInDetails) {\n            await this.getKeyValueStorage().setItem(authKeys.signInDetails, JSON.stringify(tokens.signInDetails));\n        }\n        await this.getKeyValueStorage().setItem(authKeys.clockDrift, `${tokens.clockDrift}`);\n    }\n    async clearTokens() {\n        const authKeys = await this.getAuthKeys();\n        // Not calling clear because it can remove data that is not managed by AuthTokenStore\n        await Promise.all([\n            this.getKeyValueStorage().removeItem(authKeys.accessToken),\n            this.getKeyValueStorage().removeItem(authKeys.idToken),\n            this.getKeyValueStorage().removeItem(authKeys.clockDrift),\n            this.getKeyValueStorage().removeItem(authKeys.refreshToken),\n            this.getKeyValueStorage().removeItem(authKeys.signInDetails),\n            this.getKeyValueStorage().removeItem(this.getLastAuthUserKey()),\n            this.getKeyValueStorage().removeItem(authKeys.oauthMetadata),\n        ]);\n    }\n    async getDeviceMetadata(username) {\n        const authKeys = await this.getAuthKeys(username);\n        const deviceKey = await this.getKeyValueStorage().getItem(authKeys.deviceKey);\n        const deviceGroupKey = await this.getKeyValueStorage().getItem(authKeys.deviceGroupKey);\n        const randomPassword = await this.getKeyValueStorage().getItem(authKeys.randomPasswordKey);\n        return randomPassword && deviceGroupKey && deviceKey\n            ? {\n                deviceKey,\n                deviceGroupKey,\n                randomPassword,\n            }\n            : null;\n    }\n    async clearDeviceMetadata(username) {\n        const authKeys = await this.getAuthKeys(username);\n        await Promise.all([\n            this.getKeyValueStorage().removeItem(authKeys.deviceKey),\n            this.getKeyValueStorage().removeItem(authKeys.deviceGroupKey),\n            this.getKeyValueStorage().removeItem(authKeys.randomPasswordKey),\n        ]);\n    }\n    async getAuthKeys(username) {\n        assertTokenProviderConfig(this.authConfig?.Cognito);\n        const lastAuthUser = username ?? (await this.getLastAuthUser());\n        return createKeysForAuthStorage(this.name, `${this.authConfig.Cognito.userPoolClientId}.${lastAuthUser}`);\n    }\n    getLastAuthUserKey() {\n        assertTokenProviderConfig(this.authConfig?.Cognito);\n        const identifier = this.authConfig.Cognito.userPoolClientId;\n        return `${this.name}.${identifier}.LastAuthUser`;\n    }\n    async getLastAuthUser() {\n        const lastAuthUser = (await this.getKeyValueStorage().getItem(this.getLastAuthUserKey())) ??\n            'username';\n        return lastAuthUser;\n    }\n    async setOAuthMetadata(metadata) {\n        const { oauthMetadata: oauthMetadataKey } = await this.getAuthKeys();\n        await this.getKeyValueStorage().setItem(oauthMetadataKey, JSON.stringify(metadata));\n    }\n    async getOAuthMetadata() {\n        const { oauthMetadata: oauthMetadataKey } = await this.getAuthKeys();\n        const oauthMetadata = await this.getKeyValueStorage().getItem(oauthMetadataKey);\n        return oauthMetadata && JSON.parse(oauthMetadata);\n    }\n}\nexport const createKeysForAuthStorage = (provider, identifier) => {\n    return getAuthStorageKeys(AuthTokenStorageKeys)(`${provider}`, identifier);\n};\nexport function getAuthStorageKeys(authKeys) {\n    const keys = Object.values({ ...authKeys });\n    return (prefix, identifier) => keys.reduce((acc, authKey) => ({\n        ...acc,\n        [authKey]: `${prefix}.${identifier}.${authKey}`,\n    }), {});\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}