{"ast":null,"code":"import { map } from 'rxjs';\nimport { authModeParams, getCustomHeaders, initializeModel, selectionSetIRToString, getDefaultSelectionSetForNonModelWithIR, generateSelectionSet } from '../APIClient.mjs';\nimport { handleSingularGraphQlError } from './utils.mjs';\nimport { selfAwareAsync } from '../../utils/selfAwareAsync.mjs';\nimport { extendCancellability } from '../cancellation.mjs';\nimport { createUserAgentOverride } from '../ai/getCustomUserAgentDetails.mjs';\n\n/**\n * Type guard for checking whether a Custom Operation argument is a contextSpec object\n */\nconst argIsContextSpec = arg => {\n  return typeof arg?.token?.value === 'symbol';\n};\n/**\n * Builds an operation function, embedded with all client and context data, that\n * can be attached to a client as a custom query or mutation.\n *\n * If we have this source schema:\n *\n * ```typescript\n * a.schema({\n *   echo: a.query()\n *     .arguments({input: a.string().required()})\n *     .returns(a.string())\n * })\n * ```\n *\n * Our model intro schema will contain an entry like this:\n *\n * ```ts\n * {\n *   queries: {\n *     echo: {\n *       name: \"echo\",\n *       isArray: false,\n *       type: 'String',\n *       isRequired: false,\n *       arguments: {\n *         input: {\n *           name: 'input',\n *           isArray: false,\n *           type: String,\n *           isRequired: true\n *         }\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * The `echo` object is used to build the `echo' method that goes here:\n *\n * ```typescript\n * const client = generateClent()\n * const { data } = await client.queries.echo({input: 'a string'});\n * //                                    ^\n * //                                    |\n * //                                    +-- This one right here.\n * //\n * ```\n *\n *\n * @param client The client to run graphql queries through.\n * @param modelIntrospection The model introspection schema the op comes from.\n * @param operationType The broad category of graphql operation.\n * @param operation The operation definition from the introspection schema.\n * @param useContext Whether the function needs to accept an SSR context.\n * @returns The operation function to attach to query, mutations, etc.\n */\nfunction customOpFactory(client, modelIntrospection, operationType, operation, useContext, getInternals, customUserAgentDetails) {\n  // .arguments() are defined for the custom operation in the schema builder\n  // and are present in the model introspection schema\n  const argsDefined = operation.arguments !== undefined;\n  const op = (...args) => {\n    // options is always the last argument\n    const options = args[args.length - 1];\n    let contextSpec;\n    let arg;\n    if (useContext) {\n      if (argIsContextSpec(args[0])) {\n        contextSpec = args[0];\n      } else {\n        throw new Error(`Invalid first argument passed to ${operation.name}. Expected contextSpec`);\n      }\n    }\n    if (argsDefined) {\n      if (useContext) {\n        arg = args[1];\n      } else {\n        arg = args[0];\n      }\n    }\n    if (operationType === 'subscription') {\n      return _opSubscription(\n      // subscriptions are only enabled on the clientside\n      client, modelIntrospection, operation, getInternals, arg, options, customUserAgentDetails);\n    }\n    return _op(client, modelIntrospection, operationType, operation, getInternals, arg, options, contextSpec, customUserAgentDetails);\n  };\n  return op;\n}\n/**\n * Runtime test and type guard to check whether `o[field]` is a `String`.\n *\n * ```typescript\n * if (hasStringField(o, 'prop')) {\n *   const s = o.prop;\n *   //    ^? const s: string\n * }\n * ```\n *\n * @param o Object to inspect\n * @param field Field to look for\n * @returns Boolean: `true` if the `o[field]` is a `string`\n */\nfunction hasStringField(o, field) {\n  return typeof o[field] === 'string';\n}\nfunction isEnumType(type) {\n  return type instanceof Object && 'enum' in type;\n}\nfunction isInputType(type) {\n  return type instanceof Object && 'input' in type;\n}\n/**\n * @param argDef A single argument definition from a custom operation\n * @returns A string naming the base type including the `!` if the arg is required.\n */\nfunction argumentBaseTypeString({\n  type,\n  isRequired\n}) {\n  const requiredFlag = isRequired ? '!' : '';\n  if (isEnumType(type)) {\n    return `${type.enum}${requiredFlag}`;\n  }\n  if (isInputType(type)) {\n    return `${type.input}${requiredFlag}`;\n  }\n  return `${type}${requiredFlag}`;\n}\n/**\n * Generates \"outer\" arguments string for a custom operation. For example,\n * in this operation:\n *\n * ```graphql\n * query MyQuery(InputString: String!) {\n *   echoString(InputString: $InputString)\n * }\n * ```\n *\n * This function returns the top/outer level arguments as a string:\n *\n * ```json\n * \"InputString: String!\"\n * ```\n *\n * @param operation Operation object from model introspection schema.\n * @returns \"outer\" arguments string\n */\nfunction outerArguments(operation) {\n  if (operation.arguments === undefined) {\n    return '';\n  }\n  const args = Object.entries(operation.arguments).map(([k, argument]) => {\n    const baseType = argumentBaseTypeString(argument);\n    const finalType = argument.isArray ? `[${baseType}]${argument.isArrayNullable ? '' : '!'}` : baseType;\n    return `$${k}: ${finalType}`;\n  }).join(', ');\n  return args.length > 0 ? `(${args})` : '';\n}\n/**\n * Generates \"inner\" arguments string for a custom operation. For example,\n * in this operation:\n *\n * ```graphql\n * query MyQuery(InputString: String!) {\n *   echoString(InputString: $InputString)\n * }\n * ```\n *\n * This function returns the inner arguments as a string:\n *\n * ```json\n * \"InputString: $InputString\"\n * ```\n *\n * @param operation Operation object from model introspection schema.\n * @returns \"outer\" arguments string\n */\nfunction innerArguments(operation) {\n  if (operation.arguments === undefined) {\n    return '';\n  }\n  const args = Object.keys(operation.arguments).map(k => `${k}: $${k}`).join(', ');\n  return args.length > 0 ? `(${args})` : '';\n}\n/**\n * Generates the selection set string for a custom operation. This is slightly\n * different than the selection set generation for models. If the custom op returns\n * a primitive or enum types, it doesn't require a selection set at all.\n *\n * E.g., the graphql might look like this:\n *\n * ```graphql\n * query MyQuery {\n *   echoString(inputString: \"whatever\")\n * }\n * #                                     ^\n * #                                     |\n * #                                     +-- no selection set\n * ```\n *\n * Non-primitive return type selection set generation will be similar to other\n * model operations.\n *\n * @param modelIntrospection The full code-generated introspection schema.\n * @param operation The operation object from the schema.\n * @returns The selection set as a string.\n */\nfunction operationSelectionSet(modelIntrospection, operation) {\n  if (hasStringField(operation, 'type') || hasStringField(operation.type, 'enum')) {\n    return '';\n  } else if (hasStringField(operation.type, 'nonModel')) {\n    const nonModel = modelIntrospection.nonModels[operation.type.nonModel];\n    return `{${selectionSetIRToString(getDefaultSelectionSetForNonModelWithIR(nonModel, modelIntrospection))}}`;\n  } else if (hasStringField(operation.type, 'model')) {\n    return `{${generateSelectionSet(modelIntrospection, operation.type.model)}}`;\n  } else {\n    return '';\n  }\n}\n/**\n * Maps an arguments objec to graphql variables, removing superfluous args and\n * screaming loudly when required args are missing.\n *\n * @param operation The operation to construct graphql request variables for.\n * @param args The arguments to map variables from.\n * @returns The graphql variables object.\n */\nfunction operationVariables(operation, args = {}) {\n  const variables = {};\n  if (operation.arguments === undefined) {\n    return variables;\n  }\n  for (const argDef of Object.values(operation.arguments)) {\n    if (typeof args[argDef.name] !== 'undefined') {\n      variables[argDef.name] = args[argDef.name];\n    } else if (argDef.isRequired) {\n      // At this point, the variable is both required and missing: We don't need\n      // to continue. The operation is expected to fail.\n      throw new Error(`${operation.name} requires arguments '${argDef.name}'`);\n    }\n  }\n  return variables;\n}\n/**\n * Executes an operation from the given model intro schema against a client, returning\n * a fully instantiated model when relevant.\n *\n * @param client The client to operate `graphql()` calls through.\n * @param modelIntrospection The model intro schema to construct requests from.\n * @param operationType The high level graphql operation type.\n * @param operation The specific operation name, args, return type details.\n * @param args The arguments to provide to the operation as variables.\n * @param options Request options like headers, etc.\n * @param context SSR context if relevant.\n * @returns Result from the graphql request, model-instantiated when relevant.\n */\nfunction _op(client, modelIntrospection, operationType, operation, getInternals, args, options, context, customUserAgentDetails) {\n  return selfAwareAsync(async resultPromise => {\n    const {\n      name: operationName\n    } = operation;\n    const auth = authModeParams(client, getInternals, options);\n    const headers = getCustomHeaders(client, getInternals, options?.headers);\n    const outerArgsString = outerArguments(operation);\n    const innerArgsString = innerArguments(operation);\n    const selectionSet = operationSelectionSet(modelIntrospection, operation);\n    const returnTypeModelName = hasStringField(operation.type, 'model') ? operation.type.model : undefined;\n    const query = `\n    ${operationType.toLocaleLowerCase()}${outerArgsString} {\n      ${operationName}${innerArgsString} ${selectionSet}\n    }\n  `;\n    const variables = operationVariables(operation, args);\n    const userAgentOverride = createUserAgentOverride(customUserAgentDetails);\n    try {\n      const basePromise = context ? client.graphql(context, {\n        ...auth,\n        query,\n        variables\n      }, headers) : client.graphql({\n        ...auth,\n        query,\n        variables,\n        ...userAgentOverride\n      }, headers);\n      const extendedPromise = extendCancellability(basePromise, resultPromise);\n      const {\n        data,\n        extensions\n      } = await extendedPromise;\n      // flatten response\n      if (data) {\n        const [key] = Object.keys(data);\n        const isArrayResult = Array.isArray(data[key]);\n        // TODO: when adding support for custom selection set, flattening will need\n        // to occur recursively. For now, it's expected that related models are not\n        // present in the result. Only FK's are present. Any related model properties\n        // should be replaced with lazy loaders under the current implementation.\n        const flattenedResult = isArrayResult ? data[key].filter(x => x) : data[key];\n        // TODO: custom selection set. current selection set is default selection set only\n        // custom selection set requires data-schema-type + runtime updates above.\n        const initialized = returnTypeModelName ? initializeModel(client, returnTypeModelName, isArrayResult ? flattenedResult : [flattenedResult], modelIntrospection, auth.authMode, auth.authToken, !!context) : flattenedResult;\n        return {\n          data: !isArrayResult && Array.isArray(initialized) ? initialized.shift() : initialized,\n          extensions\n        };\n      } else {\n        return {\n          data: null,\n          extensions\n        };\n      }\n    } catch (error) {\n      /**\n       * The `data` type returned by `error` here could be:\n       * 1) `null`\n       * 2) an empty object\n       * 3) \"populated\" but with a `null` value `{ getPost: null }`\n       * 4) an actual record `{ getPost: { id: '1', title: 'Hello, World!' } }`\n       */\n      const {\n        data,\n        errors\n      } = error;\n      /**\n       * `data` is not `null`, and is not an empty object:\n       */\n      if (data && Object.keys(data).length !== 0 && errors) {\n        const [key] = Object.keys(data);\n        const isArrayResult = Array.isArray(data[key]);\n        // TODO: when adding support for custom selection set, flattening will need\n        // to occur recursively. For now, it's expected that related models are not\n        // present in the result. Only FK's are present. Any related model properties\n        // should be replaced with lazy loaders under the current implementation.\n        const flattenedResult = isArrayResult ? data[key].filter(x => x) : data[key];\n        /**\n         * `flattenedResult` could be `null` here (e.g. `data: { getPost: null }`)\n         * if `flattenedResult`, result is an actual record:\n         */\n        if (flattenedResult) {\n          // TODO: custom selection set. current selection set is default selection set only\n          // custom selection set requires data-schema-type + runtime updates above.\n          const initialized = returnTypeModelName ? initializeModel(client, returnTypeModelName, isArrayResult ? flattenedResult : [flattenedResult], modelIntrospection, auth.authMode, auth.authToken, !!context) : flattenedResult;\n          return {\n            data: !isArrayResult && Array.isArray(initialized) ? initialized.shift() : initialized,\n            errors\n          };\n        } else {\n          // was `data: { getPost: null }`)\n          return handleSingularGraphQlError(error);\n        }\n      } else {\n        // `data` is `null`:\n        return handleSingularGraphQlError(error);\n      }\n    }\n  });\n}\n/**\n * Executes an operation from the given model intro schema against a client, returning\n * a fully instantiated model when relevant.\n *\n * @param client The client to operate `graphql()` calls through.\n * @param modelIntrospection The model intro schema to construct requests from.\n * @param operation The specific operation name, args, return type details.\n * @param args The arguments to provide to the operation as variables.\n * @param options Request options like headers, etc.\n * @returns Result from the graphql request, model-instantiated when relevant.\n */\nfunction _opSubscription(client, modelIntrospection, operation, getInternals, args, options, customUserAgentDetails) {\n  const operationType = 'subscription';\n  const {\n    name: operationName\n  } = operation;\n  const auth = authModeParams(client, getInternals, options);\n  const headers = getCustomHeaders(client, getInternals, options?.headers);\n  const outerArgsString = outerArguments(operation);\n  const innerArgsString = innerArguments(operation);\n  const selectionSet = operationSelectionSet(modelIntrospection, operation);\n  const returnTypeModelName = hasStringField(operation.type, 'model') ? operation.type.model : undefined;\n  const query = `\n    ${operationType.toLocaleLowerCase()}${outerArgsString} {\n      ${operationName}${innerArgsString} ${selectionSet}\n    }\n  `;\n  const variables = operationVariables(operation, args);\n  const userAgentOverride = createUserAgentOverride(customUserAgentDetails);\n  const observable = client.graphql({\n    ...auth,\n    query,\n    variables,\n    ...userAgentOverride\n  }, headers);\n  return observable.pipe(map(value => {\n    const [key] = Object.keys(value.data);\n    const data = value.data[key];\n    const [initialized] = returnTypeModelName ? initializeModel(client, returnTypeModelName, [data], modelIntrospection, auth.authMode, auth.authToken) : [data];\n    return initialized;\n  }));\n}\nexport { customOpFactory };","map":{"version":3,"names":["argIsContextSpec","arg","token","value","customOpFactory","client","modelIntrospection","operationType","operation","useContext","getInternals","customUserAgentDetails","argsDefined","arguments","undefined","op","args","options","length","contextSpec","Error","name","_opSubscription","_op","hasStringField","o","field","isEnumType","type","Object","isInputType","argumentBaseTypeString","isRequired","requiredFlag","enum","input","outerArguments","entries","map","k","argument","baseType","finalType","isArray","isArrayNullable","join","innerArguments","keys","operationSelectionSet","nonModel","nonModels","selectionSetIRToString","getDefaultSelectionSetForNonModelWithIR","generateSelectionSet","model","operationVariables","variables","argDef","values","context","selfAwareAsync","resultPromise","operationName","auth","authModeParams","headers","getCustomHeaders","outerArgsString","innerArgsString","selectionSet","returnTypeModelName","query","toLocaleLowerCase","userAgentOverride","createUserAgentOverride","basePromise","graphql","extendedPromise","extendCancellability","data","extensions","key","isArrayResult","Array","flattenedResult","filter","x","initialized","initializeModel","authMode","authToken","shift","error","errors","handleSingularGraphQlError","observable","pipe"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/data-schema/src/runtime/internals/operations/custom.ts"],"sourcesContent":["import { map } from 'rxjs';\nimport { authModeParams, getDefaultSelectionSetForNonModelWithIR, generateSelectionSet, getCustomHeaders, initializeModel, selectionSetIRToString, } from '../APIClient';\nimport { handleSingularGraphQlError } from './utils';\nimport { selfAwareAsync } from '../../utils';\nimport { extendCancellability } from '../cancellation';\nimport { createUserAgentOverride } from '../ai/getCustomUserAgentDetails';\n/**\n * Type guard for checking whether a Custom Operation argument is a contextSpec object\n */\nconst argIsContextSpec = (arg) => {\n    return typeof arg?.token?.value === 'symbol';\n};\n/**\n * Builds an operation function, embedded with all client and context data, that\n * can be attached to a client as a custom query or mutation.\n *\n * If we have this source schema:\n *\n * ```typescript\n * a.schema({\n *   echo: a.query()\n *     .arguments({input: a.string().required()})\n *     .returns(a.string())\n * })\n * ```\n *\n * Our model intro schema will contain an entry like this:\n *\n * ```ts\n * {\n *   queries: {\n *     echo: {\n *       name: \"echo\",\n *       isArray: false,\n *       type: 'String',\n *       isRequired: false,\n *       arguments: {\n *         input: {\n *           name: 'input',\n *           isArray: false,\n *           type: String,\n *           isRequired: true\n *         }\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * The `echo` object is used to build the `echo' method that goes here:\n *\n * ```typescript\n * const client = generateClent()\n * const { data } = await client.queries.echo({input: 'a string'});\n * //                                    ^\n * //                                    |\n * //                                    +-- This one right here.\n * //\n * ```\n *\n *\n * @param client The client to run graphql queries through.\n * @param modelIntrospection The model introspection schema the op comes from.\n * @param operationType The broad category of graphql operation.\n * @param operation The operation definition from the introspection schema.\n * @param useContext Whether the function needs to accept an SSR context.\n * @returns The operation function to attach to query, mutations, etc.\n */\nexport function customOpFactory(client, modelIntrospection, operationType, operation, useContext, getInternals, customUserAgentDetails) {\n    // .arguments() are defined for the custom operation in the schema builder\n    // and are present in the model introspection schema\n    const argsDefined = operation.arguments !== undefined;\n    const op = (...args) => {\n        // options is always the last argument\n        const options = args[args.length - 1];\n        let contextSpec;\n        let arg;\n        if (useContext) {\n            if (argIsContextSpec(args[0])) {\n                contextSpec = args[0];\n            }\n            else {\n                throw new Error(`Invalid first argument passed to ${operation.name}. Expected contextSpec`);\n            }\n        }\n        if (argsDefined) {\n            if (useContext) {\n                arg = args[1];\n            }\n            else {\n                arg = args[0];\n            }\n        }\n        if (operationType === 'subscription') {\n            return _opSubscription(\n            // subscriptions are only enabled on the clientside\n            client, modelIntrospection, operation, getInternals, arg, options, customUserAgentDetails);\n        }\n        return _op(client, modelIntrospection, operationType, operation, getInternals, arg, options, contextSpec, customUserAgentDetails);\n    };\n    return op;\n}\n/**\n * Runtime test and type guard to check whether `o[field]` is a `String`.\n *\n * ```typescript\n * if (hasStringField(o, 'prop')) {\n *   const s = o.prop;\n *   //    ^? const s: string\n * }\n * ```\n *\n * @param o Object to inspect\n * @param field Field to look for\n * @returns Boolean: `true` if the `o[field]` is a `string`\n */\nfunction hasStringField(o, field) {\n    return typeof o[field] === 'string';\n}\nfunction isEnumType(type) {\n    return type instanceof Object && 'enum' in type;\n}\nfunction isInputType(type) {\n    return type instanceof Object && 'input' in type;\n}\n/**\n * @param argDef A single argument definition from a custom operation\n * @returns A string naming the base type including the `!` if the arg is required.\n */\nfunction argumentBaseTypeString({ type, isRequired }) {\n    const requiredFlag = isRequired ? '!' : '';\n    if (isEnumType(type)) {\n        return `${type.enum}${requiredFlag}`;\n    }\n    if (isInputType(type)) {\n        return `${type.input}${requiredFlag}`;\n    }\n    return `${type}${requiredFlag}`;\n}\n/**\n * Generates \"outer\" arguments string for a custom operation. For example,\n * in this operation:\n *\n * ```graphql\n * query MyQuery(InputString: String!) {\n *   echoString(InputString: $InputString)\n * }\n * ```\n *\n * This function returns the top/outer level arguments as a string:\n *\n * ```json\n * \"InputString: String!\"\n * ```\n *\n * @param operation Operation object from model introspection schema.\n * @returns \"outer\" arguments string\n */\nfunction outerArguments(operation) {\n    if (operation.arguments === undefined) {\n        return '';\n    }\n    const args = Object.entries(operation.arguments)\n        .map(([k, argument]) => {\n        const baseType = argumentBaseTypeString(argument);\n        const finalType = argument.isArray\n            ? `[${baseType}]${argument.isArrayNullable ? '' : '!'}`\n            : baseType;\n        return `$${k}: ${finalType}`;\n    })\n        .join(', ');\n    return args.length > 0 ? `(${args})` : '';\n}\n/**\n * Generates \"inner\" arguments string for a custom operation. For example,\n * in this operation:\n *\n * ```graphql\n * query MyQuery(InputString: String!) {\n *   echoString(InputString: $InputString)\n * }\n * ```\n *\n * This function returns the inner arguments as a string:\n *\n * ```json\n * \"InputString: $InputString\"\n * ```\n *\n * @param operation Operation object from model introspection schema.\n * @returns \"outer\" arguments string\n */\nfunction innerArguments(operation) {\n    if (operation.arguments === undefined) {\n        return '';\n    }\n    const args = Object.keys(operation.arguments)\n        .map((k) => `${k}: $${k}`)\n        .join(', ');\n    return args.length > 0 ? `(${args})` : '';\n}\n/**\n * Generates the selection set string for a custom operation. This is slightly\n * different than the selection set generation for models. If the custom op returns\n * a primitive or enum types, it doesn't require a selection set at all.\n *\n * E.g., the graphql might look like this:\n *\n * ```graphql\n * query MyQuery {\n *   echoString(inputString: \"whatever\")\n * }\n * #                                     ^\n * #                                     |\n * #                                     +-- no selection set\n * ```\n *\n * Non-primitive return type selection set generation will be similar to other\n * model operations.\n *\n * @param modelIntrospection The full code-generated introspection schema.\n * @param operation The operation object from the schema.\n * @returns The selection set as a string.\n */\nfunction operationSelectionSet(modelIntrospection, operation) {\n    if (hasStringField(operation, 'type') ||\n        hasStringField(operation.type, 'enum')) {\n        return '';\n    }\n    else if (hasStringField(operation.type, 'nonModel')) {\n        const nonModel = modelIntrospection.nonModels[operation.type.nonModel];\n        return `{${selectionSetIRToString(getDefaultSelectionSetForNonModelWithIR(nonModel, modelIntrospection))}}`;\n    }\n    else if (hasStringField(operation.type, 'model')) {\n        return `{${generateSelectionSet(modelIntrospection, operation.type.model)}}`;\n    }\n    else {\n        return '';\n    }\n}\n/**\n * Maps an arguments objec to graphql variables, removing superfluous args and\n * screaming loudly when required args are missing.\n *\n * @param operation The operation to construct graphql request variables for.\n * @param args The arguments to map variables from.\n * @returns The graphql variables object.\n */\nfunction operationVariables(operation, args = {}) {\n    const variables = {};\n    if (operation.arguments === undefined) {\n        return variables;\n    }\n    for (const argDef of Object.values(operation.arguments)) {\n        if (typeof args[argDef.name] !== 'undefined') {\n            variables[argDef.name] = args[argDef.name];\n        }\n        else if (argDef.isRequired) {\n            // At this point, the variable is both required and missing: We don't need\n            // to continue. The operation is expected to fail.\n            throw new Error(`${operation.name} requires arguments '${argDef.name}'`);\n        }\n    }\n    return variables;\n}\n/**\n * Executes an operation from the given model intro schema against a client, returning\n * a fully instantiated model when relevant.\n *\n * @param client The client to operate `graphql()` calls through.\n * @param modelIntrospection The model intro schema to construct requests from.\n * @param operationType The high level graphql operation type.\n * @param operation The specific operation name, args, return type details.\n * @param args The arguments to provide to the operation as variables.\n * @param options Request options like headers, etc.\n * @param context SSR context if relevant.\n * @returns Result from the graphql request, model-instantiated when relevant.\n */\nfunction _op(client, modelIntrospection, operationType, operation, getInternals, args, options, context, customUserAgentDetails) {\n    return selfAwareAsync(async (resultPromise) => {\n        const { name: operationName } = operation;\n        const auth = authModeParams(client, getInternals, options);\n        const headers = getCustomHeaders(client, getInternals, options?.headers);\n        const outerArgsString = outerArguments(operation);\n        const innerArgsString = innerArguments(operation);\n        const selectionSet = operationSelectionSet(modelIntrospection, operation);\n        const returnTypeModelName = hasStringField(operation.type, 'model')\n            ? operation.type.model\n            : undefined;\n        const query = `\n    ${operationType.toLocaleLowerCase()}${outerArgsString} {\n      ${operationName}${innerArgsString} ${selectionSet}\n    }\n  `;\n        const variables = operationVariables(operation, args);\n        const userAgentOverride = createUserAgentOverride(customUserAgentDetails);\n        try {\n            const basePromise = context\n                ? client.graphql(context, {\n                    ...auth,\n                    query,\n                    variables,\n                }, headers)\n                : client.graphql({\n                    ...auth,\n                    query,\n                    variables,\n                    ...userAgentOverride,\n                }, headers);\n            const extendedPromise = extendCancellability(basePromise, resultPromise);\n            const { data, extensions } = await extendedPromise;\n            // flatten response\n            if (data) {\n                const [key] = Object.keys(data);\n                const isArrayResult = Array.isArray(data[key]);\n                // TODO: when adding support for custom selection set, flattening will need\n                // to occur recursively. For now, it's expected that related models are not\n                // present in the result. Only FK's are present. Any related model properties\n                // should be replaced with lazy loaders under the current implementation.\n                const flattenedResult = isArrayResult\n                    ? data[key].filter((x) => x)\n                    : data[key];\n                // TODO: custom selection set. current selection set is default selection set only\n                // custom selection set requires data-schema-type + runtime updates above.\n                const initialized = returnTypeModelName\n                    ? initializeModel(client, returnTypeModelName, isArrayResult ? flattenedResult : [flattenedResult], modelIntrospection, auth.authMode, auth.authToken, !!context)\n                    : flattenedResult;\n                return {\n                    data: !isArrayResult && Array.isArray(initialized)\n                        ? initialized.shift()\n                        : initialized,\n                    extensions,\n                };\n            }\n            else {\n                return { data: null, extensions };\n            }\n        }\n        catch (error) {\n            /**\n             * The `data` type returned by `error` here could be:\n             * 1) `null`\n             * 2) an empty object\n             * 3) \"populated\" but with a `null` value `{ getPost: null }`\n             * 4) an actual record `{ getPost: { id: '1', title: 'Hello, World!' } }`\n             */\n            const { data, errors } = error;\n            /**\n             * `data` is not `null`, and is not an empty object:\n             */\n            if (data && Object.keys(data).length !== 0 && errors) {\n                const [key] = Object.keys(data);\n                const isArrayResult = Array.isArray(data[key]);\n                // TODO: when adding support for custom selection set, flattening will need\n                // to occur recursively. For now, it's expected that related models are not\n                // present in the result. Only FK's are present. Any related model properties\n                // should be replaced with lazy loaders under the current implementation.\n                const flattenedResult = isArrayResult\n                    ? data[key].filter((x) => x)\n                    : data[key];\n                /**\n                 * `flattenedResult` could be `null` here (e.g. `data: { getPost: null }`)\n                 * if `flattenedResult`, result is an actual record:\n                 */\n                if (flattenedResult) {\n                    // TODO: custom selection set. current selection set is default selection set only\n                    // custom selection set requires data-schema-type + runtime updates above.\n                    const initialized = returnTypeModelName\n                        ? initializeModel(client, returnTypeModelName, isArrayResult ? flattenedResult : [flattenedResult], modelIntrospection, auth.authMode, auth.authToken, !!context)\n                        : flattenedResult;\n                    return {\n                        data: !isArrayResult && Array.isArray(initialized)\n                            ? initialized.shift()\n                            : initialized,\n                        errors,\n                    };\n                }\n                else {\n                    // was `data: { getPost: null }`)\n                    return handleSingularGraphQlError(error);\n                }\n            }\n            else {\n                // `data` is `null`:\n                return handleSingularGraphQlError(error);\n            }\n        }\n    });\n}\n/**\n * Executes an operation from the given model intro schema against a client, returning\n * a fully instantiated model when relevant.\n *\n * @param client The client to operate `graphql()` calls through.\n * @param modelIntrospection The model intro schema to construct requests from.\n * @param operation The specific operation name, args, return type details.\n * @param args The arguments to provide to the operation as variables.\n * @param options Request options like headers, etc.\n * @returns Result from the graphql request, model-instantiated when relevant.\n */\nfunction _opSubscription(client, modelIntrospection, operation, getInternals, args, options, customUserAgentDetails) {\n    const operationType = 'subscription';\n    const { name: operationName } = operation;\n    const auth = authModeParams(client, getInternals, options);\n    const headers = getCustomHeaders(client, getInternals, options?.headers);\n    const outerArgsString = outerArguments(operation);\n    const innerArgsString = innerArguments(operation);\n    const selectionSet = operationSelectionSet(modelIntrospection, operation);\n    const returnTypeModelName = hasStringField(operation.type, 'model')\n        ? operation.type.model\n        : undefined;\n    const query = `\n    ${operationType.toLocaleLowerCase()}${outerArgsString} {\n      ${operationName}${innerArgsString} ${selectionSet}\n    }\n  `;\n    const variables = operationVariables(operation, args);\n    const userAgentOverride = createUserAgentOverride(customUserAgentDetails);\n    const observable = client.graphql({\n        ...auth,\n        query,\n        variables,\n        ...userAgentOverride,\n    }, headers);\n    return observable.pipe(map((value) => {\n        const [key] = Object.keys(value.data);\n        const data = value.data[key];\n        const [initialized] = returnTypeModelName\n            ? initializeModel(client, returnTypeModelName, [data], modelIntrospection, auth.authMode, auth.authToken)\n            : [data];\n        return initialized;\n    }));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}