{"ast":null,"code":"import { assertPasskeyError, PasskeyErrorCode, handlePasskeyAuthenticationError } from './errors.mjs';\nimport { getIsPasskeySupported } from './getIsPasskeySupported.mjs';\nimport { deserializeJsonToPkcGetOptions, serializePkcWithAssertionToJson } from './serde.mjs';\nimport { assertCredentialIsPkcWithAuthenticatorAssertionResponse } from './types/index.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst getPasskey = async input => {\n  try {\n    const isPasskeySupported = getIsPasskeySupported();\n    assertPasskeyError(isPasskeySupported, PasskeyErrorCode.PasskeyNotSupported);\n    const passkeyGetOptions = deserializeJsonToPkcGetOptions(input);\n    const credential = await navigator.credentials.get({\n      publicKey: passkeyGetOptions\n    });\n    assertCredentialIsPkcWithAuthenticatorAssertionResponse(credential);\n    return serializePkcWithAssertionToJson(credential);\n  } catch (err) {\n    throw handlePasskeyAuthenticationError(err);\n  }\n};\nexport { getPasskey };","map":{"version":3,"names":["getPasskey","input","isPasskeySupported","getIsPasskeySupported","assertPasskeyError","PasskeyErrorCode","PasskeyNotSupported","passkeyGetOptions","deserializeJsonToPkcGetOptions","credential","navigator","credentials","get","publicKey","assertCredentialIsPkcWithAuthenticatorAssertionResponse","serializePkcWithAssertionToJson","err","handlePasskeyAuthenticationError"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/auth/src/client/utils/passkey/getPasskey.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { PasskeyErrorCode, assertPasskeyError, handlePasskeyAuthenticationError, } from './errors';\nimport { getIsPasskeySupported } from './getIsPasskeySupported';\nimport { deserializeJsonToPkcGetOptions, serializePkcWithAssertionToJson, } from './serde';\nimport { assertCredentialIsPkcWithAuthenticatorAssertionResponse, } from './types';\nexport const getPasskey = async (input) => {\n    try {\n        const isPasskeySupported = getIsPasskeySupported();\n        assertPasskeyError(isPasskeySupported, PasskeyErrorCode.PasskeyNotSupported);\n        const passkeyGetOptions = deserializeJsonToPkcGetOptions(input);\n        const credential = await navigator.credentials.get({\n            publicKey: passkeyGetOptions,\n        });\n        assertCredentialIsPkcWithAuthenticatorAssertionResponse(credential);\n        return serializePkcWithAssertionToJson(credential);\n    }\n    catch (err) {\n        throw handlePasskeyAuthenticationError(err);\n    }\n};\n"],"mappings":";;;;;AAAA;AACA;AAKY,MAACA,UAAU,GAAG,MAAOC,KAAK,IAAK;EACvC,IAAI;IACA,MAAMC,kBAAkB,GAAGC,qBAAqB,EAAE;IAClDC,kBAAkB,CAACF,kBAAkB,EAAEG,gBAAgB,CAACC,mBAAmB,CAAC;IAC5E,MAAMC,iBAAiB,GAAGC,8BAA8B,CAACP,KAAK,CAAC;IAC/D,MAAMQ,UAAU,GAAG,MAAMC,SAAS,CAACC,WAAW,CAACC,GAAG,CAAC;MAC/CC,SAAS,EAAEN;IACvB,CAAS,CAAC;IACFO,uDAAuD,CAACL,UAAU,CAAC;IACnE,OAAOM,+BAA+B,CAACN,UAAU,CAAC;EAC1D,CAAK,CACD,OAAOO,GAAG,EAAE;IACR,MAAMC,gCAAgC,CAACD,GAAG,CAAC;EACnD;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}