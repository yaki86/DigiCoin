{"ast":null,"code":"import { ConsoleLogger, fetchAuthSession } from '@aws-amplify/core';\nimport { signRequest } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl } from '@aws-amplify/core/internals/utils';\nimport { AWS_APPSYNC_REALTIME_HEADERS } from '../constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst logger = new ConsoleLogger('AWSAppSyncRealTimeProvider Auth');\nconst awsAuthTokenHeader = async _ref => {\n  let {\n    host\n  } = _ref;\n  const session = await fetchAuthSession();\n  return {\n    Authorization: session?.tokens?.accessToken?.toString(),\n    host\n  };\n};\nconst awsRealTimeApiKeyHeader = async _ref2 => {\n  let {\n    apiKey,\n    host\n  } = _ref2;\n  const dt = new Date();\n  const dtStr = dt.toISOString().replace(/[:-]|\\.\\d{3}/g, '');\n  return {\n    host,\n    'x-amz-date': dtStr,\n    'x-api-key': apiKey\n  };\n};\nconst awsRealTimeIAMHeader = async _ref3 => {\n  let {\n    payload,\n    canonicalUri,\n    appSyncGraphqlEndpoint,\n    region\n  } = _ref3;\n  const endpointInfo = {\n    region,\n    service: 'appsync'\n  };\n  const creds = (await fetchAuthSession()).credentials;\n  const request = {\n    url: `${appSyncGraphqlEndpoint}${canonicalUri}`,\n    data: payload,\n    method: 'POST',\n    headers: {\n      ...AWS_APPSYNC_REALTIME_HEADERS\n    }\n  };\n  const signedParams = signRequest({\n    headers: request.headers,\n    method: request.method,\n    url: new AmplifyUrl(request.url),\n    body: request.data\n  }, {\n    credentials: creds,\n    signingRegion: endpointInfo.region,\n    signingService: endpointInfo.service\n  });\n  return signedParams.headers;\n};\nconst customAuthHeader = async _ref4 => {\n  let {\n    host,\n    additionalCustomHeaders\n  } = _ref4;\n  /**\n   * If `additionalHeaders` was provided to the subscription as a function,\n   * the headers that are returned by that function will already have been\n   * provided before this function is called.\n   */\n  if (!additionalCustomHeaders?.Authorization) {\n    throw new Error('No auth token specified');\n  }\n  return {\n    Authorization: additionalCustomHeaders.Authorization,\n    host\n  };\n};\nconst awsRealTimeHeaderBasedAuth = async _ref5 => {\n  let {\n    apiKey,\n    authenticationType,\n    canonicalUri,\n    appSyncGraphqlEndpoint,\n    region,\n    additionalCustomHeaders,\n    payload\n  } = _ref5;\n  const headerHandler = {\n    apiKey: awsRealTimeApiKeyHeader,\n    iam: awsRealTimeIAMHeader,\n    oidc: awsAuthTokenHeader,\n    userPool: awsAuthTokenHeader,\n    lambda: customAuthHeader,\n    none: customAuthHeader\n  };\n  if (!authenticationType || !headerHandler[authenticationType]) {\n    logger.debug(`Authentication type ${authenticationType} not supported`);\n    return undefined;\n  } else {\n    const handler = headerHandler[authenticationType];\n    const host = appSyncGraphqlEndpoint ? new AmplifyUrl(appSyncGraphqlEndpoint).host : undefined;\n    const resolvedApiKey = authenticationType === 'apiKey' ? apiKey : undefined;\n    logger.debug(`Authenticating with ${JSON.stringify(authenticationType)}`);\n    const result = await handler({\n      payload,\n      canonicalUri,\n      appSyncGraphqlEndpoint,\n      apiKey: resolvedApiKey,\n      region,\n      host,\n      additionalCustomHeaders\n    });\n    return result;\n  }\n};\nexport { awsRealTimeHeaderBasedAuth };","map":{"version":3,"names":["logger","ConsoleLogger","awsAuthTokenHeader","_ref","host","session","fetchAuthSession","Authorization","tokens","accessToken","toString","awsRealTimeApiKeyHeader","_ref2","apiKey","dt","Date","dtStr","toISOString","replace","awsRealTimeIAMHeader","_ref3","payload","canonicalUri","appSyncGraphqlEndpoint","region","endpointInfo","service","creds","credentials","request","url","data","method","headers","AWS_APPSYNC_REALTIME_HEADERS","signedParams","signRequest","AmplifyUrl","body","signingRegion","signingService","customAuthHeader","_ref4","additionalCustomHeaders","Error","awsRealTimeHeaderBasedAuth","_ref5","authenticationType","headerHandler","iam","oidc","userPool","lambda","none","debug","undefined","handler","resolvedApiKey","JSON","stringify","result"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/api-graphql/src/Providers/AWSWebSocketProvider/authHeaders.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ConsoleLogger, fetchAuthSession } from '@aws-amplify/core';\nimport { signRequest } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl } from '@aws-amplify/core/internals/utils';\nimport { AWS_APPSYNC_REALTIME_HEADERS } from '../constants';\nconst logger = new ConsoleLogger('AWSAppSyncRealTimeProvider Auth');\nconst awsAuthTokenHeader = async ({ host }) => {\n    const session = await fetchAuthSession();\n    return {\n        Authorization: session?.tokens?.accessToken?.toString(),\n        host,\n    };\n};\nconst awsRealTimeApiKeyHeader = async ({ apiKey, host, }) => {\n    const dt = new Date();\n    const dtStr = dt.toISOString().replace(/[:-]|\\.\\d{3}/g, '');\n    return {\n        host,\n        'x-amz-date': dtStr,\n        'x-api-key': apiKey,\n    };\n};\nconst awsRealTimeIAMHeader = async ({ payload, canonicalUri, appSyncGraphqlEndpoint, region, }) => {\n    const endpointInfo = {\n        region,\n        service: 'appsync',\n    };\n    const creds = (await fetchAuthSession()).credentials;\n    const request = {\n        url: `${appSyncGraphqlEndpoint}${canonicalUri}`,\n        data: payload,\n        method: 'POST',\n        headers: { ...AWS_APPSYNC_REALTIME_HEADERS },\n    };\n    const signedParams = signRequest({\n        headers: request.headers,\n        method: request.method,\n        url: new AmplifyUrl(request.url),\n        body: request.data,\n    }, {\n        credentials: creds,\n        signingRegion: endpointInfo.region,\n        signingService: endpointInfo.service,\n    });\n    return signedParams.headers;\n};\nconst customAuthHeader = async ({ host, additionalCustomHeaders, }) => {\n    /**\n     * If `additionalHeaders` was provided to the subscription as a function,\n     * the headers that are returned by that function will already have been\n     * provided before this function is called.\n     */\n    if (!additionalCustomHeaders?.Authorization) {\n        throw new Error('No auth token specified');\n    }\n    return {\n        Authorization: additionalCustomHeaders.Authorization,\n        host,\n    };\n};\nexport const awsRealTimeHeaderBasedAuth = async ({ apiKey, authenticationType, canonicalUri, appSyncGraphqlEndpoint, region, additionalCustomHeaders, payload, }) => {\n    const headerHandler = {\n        apiKey: awsRealTimeApiKeyHeader,\n        iam: awsRealTimeIAMHeader,\n        oidc: awsAuthTokenHeader,\n        userPool: awsAuthTokenHeader,\n        lambda: customAuthHeader,\n        none: customAuthHeader,\n    };\n    if (!authenticationType || !headerHandler[authenticationType]) {\n        logger.debug(`Authentication type ${authenticationType} not supported`);\n        return undefined;\n    }\n    else {\n        const handler = headerHandler[authenticationType];\n        const host = appSyncGraphqlEndpoint\n            ? new AmplifyUrl(appSyncGraphqlEndpoint).host\n            : undefined;\n        const resolvedApiKey = authenticationType === 'apiKey' ? apiKey : undefined;\n        logger.debug(`Authenticating with ${JSON.stringify(authenticationType)}`);\n        const result = await handler({\n            payload,\n            canonicalUri,\n            appSyncGraphqlEndpoint,\n            apiKey: resolvedApiKey,\n            region,\n            host,\n            additionalCustomHeaders,\n        });\n        return result;\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}