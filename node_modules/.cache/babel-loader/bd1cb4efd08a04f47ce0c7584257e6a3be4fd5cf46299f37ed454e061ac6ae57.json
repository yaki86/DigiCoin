{"ast":null,"code":"import { getCanonicalHeaders } from './getCanonicalHeaders.mjs';\nimport { getCanonicalQueryString } from './getCanonicalQueryString.mjs';\nimport { getCanonicalUri } from './getCanonicalUri.mjs';\nimport { getHashedPayload } from './getHashedPayload.mjs';\nimport { getSignedHeaders } from './getSignedHeaders.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Returns a canonical request.\n *\n * @param request `HttpRequest` from which to create the canonical request from.\n * @param uriEscapePath Whether to uri encode the path as part of canonical uri. It's used for S3 only where the\n *   pathname is already uri encoded, and the signing process is not expected to uri encode it again. Defaults to true.\n * @returns String created by by concatenating the following strings, separated by newline characters:\n * - HTTPMethod\n * - CanonicalUri\n * - CanonicalQueryString\n * - CanonicalHeaders\n * - SignedHeaders\n * - HashedPayload\n *\n * @internal\n */\nconst getCanonicalRequest = function (_ref) {\n  let {\n    body,\n    headers,\n    method,\n    url\n  } = _ref;\n  let uriEscapePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return [method, getCanonicalUri(url.pathname, uriEscapePath), getCanonicalQueryString(url.searchParams), getCanonicalHeaders(headers), getSignedHeaders(headers), getHashedPayload(body)].join('\\n');\n};\nexport { getCanonicalRequest };","map":{"version":3,"names":["getCanonicalRequest","_ref","body","headers","method","url","uriEscapePath","arguments","length","undefined","getCanonicalUri","pathname","getCanonicalQueryString","searchParams","getCanonicalHeaders","getSignedHeaders","getHashedPayload","join"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/core/src/clients/middleware/signing/signer/signatureV4/utils/getCanonicalRequest.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getCanonicalHeaders } from './getCanonicalHeaders';\nimport { getCanonicalQueryString } from './getCanonicalQueryString';\nimport { getCanonicalUri } from './getCanonicalUri';\nimport { getHashedPayload } from './getHashedPayload';\nimport { getSignedHeaders } from './getSignedHeaders';\n/**\n * Returns a canonical request.\n *\n * @param request `HttpRequest` from which to create the canonical request from.\n * @param uriEscapePath Whether to uri encode the path as part of canonical uri. It's used for S3 only where the\n *   pathname is already uri encoded, and the signing process is not expected to uri encode it again. Defaults to true.\n * @returns String created by by concatenating the following strings, separated by newline characters:\n * - HTTPMethod\n * - CanonicalUri\n * - CanonicalQueryString\n * - CanonicalHeaders\n * - SignedHeaders\n * - HashedPayload\n *\n * @internal\n */\nexport const getCanonicalRequest = ({ body, headers, method, url }, uriEscapePath = true) => [\n    method,\n    getCanonicalUri(url.pathname, uriEscapePath),\n    getCanonicalQueryString(url.searchParams),\n    getCanonicalHeaders(headers),\n    getSignedHeaders(headers),\n    getHashedPayload(body),\n].join('\\n');\n"],"mappings":";;;;;;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,mBAAmB,GAAG,SAAAA,CAAAC,IAAA;EAAA,IAAC;IAAEC,IAAI;IAAEC,OAAO;IAAEC,MAAM;IAAEC;EAAG,CAAE,GAAAJ,IAAA;EAAA,IAAEK,aAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAAA,OAAK,CACzFH,MAAM,EACNM,eAAe,CAACL,GAAG,CAACM,QAAQ,EAAEL,aAAa,CAAC,EAC5CM,uBAAuB,CAACP,GAAG,CAACQ,YAAY,CAAC,EACzCC,mBAAmB,CAACX,OAAO,CAAC,EAC5BY,gBAAgB,CAACZ,OAAO,CAAC,EACzBa,gBAAgB,CAACd,IAAI,CAAC,CACzB,CAACe,IAAI,CAAC,IAAI;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}