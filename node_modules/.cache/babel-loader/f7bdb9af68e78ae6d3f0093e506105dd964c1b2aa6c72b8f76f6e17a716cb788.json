{"ast":null,"code":"import { Amplify } from '@aws-amplify/core';\nimport { AppSyncEventProvider } from '../../Providers/AWSAppSyncEventsProvider/index.mjs';\nimport { appsyncRequest } from './appsyncRequest.mjs';\nimport { configure, normalizeAuth, serializeEvents } from './utils.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * @experimental API may change in future versions\n *\n * Establish a WebSocket connection to an Events channel\n *\n * @example\n * const channel = await events.connect(\"default/channel\")\n *\n * channel.subscribe({\n *   next: (data) => { console.log(data) },\n *   error: (err) => { console.error(err) },\n * })\n *\n * @example // authMode override\n * const channel = await events.connect(\"default/channel\", { authMode: \"userPool\" })\n *\n * @param channel - channel path; `<namespace>/<channel>`\n * @param options - request overrides: `authMode`, `authToken`\n *\n */\nasync function connect(channel, options) {\n  const providerOptions = configure();\n  providerOptions.authenticationType = normalizeAuth(options?.authMode, providerOptions.authenticationType);\n  await AppSyncEventProvider.connect(providerOptions);\n  let _subscription;\n  const sub = (observer, subOptions) => {\n    const subscribeOptions = {\n      ...providerOptions,\n      query: channel\n    };\n    subscribeOptions.authenticationType = normalizeAuth(subOptions?.authMode, subscribeOptions.authenticationType);\n    _subscription = AppSyncEventProvider.subscribe(subscribeOptions).subscribe(observer);\n    return _subscription;\n  };\n  const close = () => {\n    _subscription && _subscription.unsubscribe();\n  };\n  return {\n    subscribe: sub,\n    close\n    // publish: pub,\n  };\n}\n/**\n * @experimental API may change in future versions\n *\n * Publish events to a channel via HTTP request\n *\n * @example\n * await events.post(\"default/channel\", { some: \"event\" })\n *\n * @example // event batching\n * await events.post(\"default/channel\", [{ some: \"event\" }, { some: \"event2\" }])\n *\n * @example // authMode override\n * await events.post(\"default/channel\", { some: \"event\" }, { authMode: \"userPool\" })\n *\n * @param channel - channel path; `<namespace>/<channel>`\n * @param event - JSON-serializable value or an array of values\n * @param options - request overrides: `authMode`, `authToken`\n *\n * @returns void on success\n * @throws on error\n */\nasync function post(channel, event, options) {\n  const providerOptions = configure();\n  providerOptions.authenticationType = normalizeAuth(options?.authMode, providerOptions.authenticationType);\n  // trailing slash required in publish\n  const normalizedChannelName = channel[0] === '/' ? channel : `/${channel}`;\n  const publishOptions = {\n    ...providerOptions,\n    query: normalizedChannelName,\n    variables: serializeEvents(event),\n    authToken: options?.authToken\n  };\n  const abortController = new AbortController();\n  const res = await appsyncRequest(Amplify, publishOptions, {}, abortController);\n  if (res.failed?.length > 0) {\n    return res.failed;\n  }\n}\n/**\n * @experimental API may change in future versions\n *\n * Close WebSocket connection, disconnect listeners and reconnect observers\n *\n * @example\n * await events.closeAll()\n *\n * @returns void on success\n * @throws on error\n */\nasync function closeAll() {\n  await AppSyncEventProvider.close();\n}\nexport { closeAll, connect, post };","map":{"version":3,"names":["connect","channel","options","providerOptions","configure","authenticationType","normalizeAuth","authMode","AppSyncEventProvider","_subscription","sub","observer","subOptions","subscribeOptions","query","subscribe","close","unsubscribe","post","event","normalizedChannelName","publishOptions","variables","serializeEvents","authToken","abortController","AbortController","res","appsyncRequest","Amplify","failed","length","closeAll"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/api-graphql/src/internals/events/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { AppSyncEventProvider as eventProvider } from '../../Providers/AWSAppSyncEventsProvider';\nimport { appsyncRequest } from './appsyncRequest';\nimport { configure, normalizeAuth, serializeEvents } from './utils';\n/**\n * @experimental API may change in future versions\n *\n * Establish a WebSocket connection to an Events channel\n *\n * @example\n * const channel = await events.connect(\"default/channel\")\n *\n * channel.subscribe({\n *   next: (data) => { console.log(data) },\n *   error: (err) => { console.error(err) },\n * })\n *\n * @example // authMode override\n * const channel = await events.connect(\"default/channel\", { authMode: \"userPool\" })\n *\n * @param channel - channel path; `<namespace>/<channel>`\n * @param options - request overrides: `authMode`, `authToken`\n *\n */\nasync function connect(channel, options) {\n    const providerOptions = configure();\n    providerOptions.authenticationType = normalizeAuth(options?.authMode, providerOptions.authenticationType);\n    await eventProvider.connect(providerOptions);\n    let _subscription;\n    const sub = (observer, subOptions) => {\n        const subscribeOptions = { ...providerOptions, query: channel };\n        subscribeOptions.authenticationType = normalizeAuth(subOptions?.authMode, subscribeOptions.authenticationType);\n        _subscription = eventProvider\n            .subscribe(subscribeOptions)\n            .subscribe(observer);\n        return _subscription;\n    };\n    // WS publish is not enabled in the service yet. It will be a follow up feature\n    const _pub = async (event, pubOptions) => {\n        const publishOptions = {\n            ...providerOptions,\n            query: channel,\n            variables: event,\n        };\n        publishOptions.authenticationType = normalizeAuth(pubOptions?.authMode, publishOptions.authenticationType);\n        return eventProvider.publish(publishOptions);\n    };\n    const close = () => {\n        _subscription && _subscription.unsubscribe();\n    };\n    return {\n        subscribe: sub,\n        close,\n        // publish: pub,\n    };\n}\n/**\n * @experimental API may change in future versions\n *\n * Publish events to a channel via HTTP request\n *\n * @example\n * await events.post(\"default/channel\", { some: \"event\" })\n *\n * @example // event batching\n * await events.post(\"default/channel\", [{ some: \"event\" }, { some: \"event2\" }])\n *\n * @example // authMode override\n * await events.post(\"default/channel\", { some: \"event\" }, { authMode: \"userPool\" })\n *\n * @param channel - channel path; `<namespace>/<channel>`\n * @param event - JSON-serializable value or an array of values\n * @param options - request overrides: `authMode`, `authToken`\n *\n * @returns void on success\n * @throws on error\n */\nasync function post(channel, event, options) {\n    const providerOptions = configure();\n    providerOptions.authenticationType = normalizeAuth(options?.authMode, providerOptions.authenticationType);\n    // trailing slash required in publish\n    const normalizedChannelName = channel[0] === '/' ? channel : `/${channel}`;\n    const publishOptions = {\n        ...providerOptions,\n        query: normalizedChannelName,\n        variables: serializeEvents(event),\n        authToken: options?.authToken,\n    };\n    const abortController = new AbortController();\n    const res = await appsyncRequest(Amplify, publishOptions, {}, abortController);\n    if (res.failed?.length > 0) {\n        return res.failed;\n    }\n}\n/**\n * @experimental API may change in future versions\n *\n * Close WebSocket connection, disconnect listeners and reconnect observers\n *\n * @example\n * await events.closeAll()\n *\n * @returns void on success\n * @throws on error\n */\nasync function closeAll() {\n    await eventProvider.close();\n}\nexport { connect, post, closeAll };\n"],"mappings":";;;;;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeA,OAAOA,CAACC,OAAO,EAAEC,OAAO,EAAE;EACrC,MAAMC,eAAe,GAAGC,SAAS,EAAE;EACnCD,eAAe,CAACE,kBAAkB,GAAGC,aAAa,CAACJ,OAAO,EAAEK,QAAQ,EAAEJ,eAAe,CAACE,kBAAkB,CAAC;EACzG,MAAMG,oBAAa,CAACR,OAAO,CAACG,eAAe,CAAC;EAC5C,IAAIM,aAAa;EACjB,MAAMC,GAAG,GAAGA,CAACC,QAAQ,EAAEC,UAAU,KAAK;IAClC,MAAMC,gBAAgB,GAAG;MAAE,GAAGV,eAAe;MAAEW,KAAK,EAAEb;IAAO,CAAE;IAC/DY,gBAAgB,CAACR,kBAAkB,GAAGC,aAAa,CAACM,UAAU,EAAEL,QAAQ,EAAEM,gBAAgB,CAACR,kBAAkB,CAAC;IAC9GI,aAAa,GAAGD,oBAAa,CACxBO,SAAS,CAACF,gBAAgB,CAAC,CAC3BE,SAAS,CAACJ,QAAQ,CAAC;IACxB,OAAOF,aAAa;EAC5B,CAAK;EAWD,MAAMO,KAAK,GAAGA,CAAA,KAAM;IAChBP,aAAa,IAAIA,aAAa,CAACQ,WAAW,EAAE;EACpD,CAAK;EACD,OAAO;IACHF,SAAS,EAAEL,GAAG;IACdM;IACR;EACA,CAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeE,IAAIA,CAACjB,OAAO,EAAEkB,KAAK,EAAEjB,OAAO,EAAE;EACzC,MAAMC,eAAe,GAAGC,SAAS,EAAE;EACnCD,eAAe,CAACE,kBAAkB,GAAGC,aAAa,CAACJ,OAAO,EAAEK,QAAQ,EAAEJ,eAAe,CAACE,kBAAkB,CAAC;EAC7G;EACI,MAAMe,qBAAqB,GAAGnB,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG,GAAGA,OAAO,GAAG,IAAIA,OAAO,EAAE;EAC1E,MAAMoB,cAAc,GAAG;IACnB,GAAGlB,eAAe;IAClBW,KAAK,EAAEM,qBAAqB;IAC5BE,SAAS,EAAEC,eAAe,CAACJ,KAAK,CAAC;IACjCK,SAAS,EAAEtB,OAAO,EAAEsB;EAC5B,CAAK;EACD,MAAMC,eAAe,GAAG,IAAIC,eAAe,EAAE;EAC7C,MAAMC,GAAG,GAAG,MAAMC,cAAc,CAACC,OAAO,EAAER,cAAc,EAAE,EAAE,EAAEI,eAAe,CAAC;EAC9E,IAAIE,GAAG,CAACG,MAAM,EAAEC,MAAM,GAAG,CAAC,EAAE;IACxB,OAAOJ,GAAG,CAACG,MAAM;EACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeE,QAAQA,CAAA,EAAG;EACtB,MAAMxB,oBAAa,CAACQ,KAAK,EAAE;AAC/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}