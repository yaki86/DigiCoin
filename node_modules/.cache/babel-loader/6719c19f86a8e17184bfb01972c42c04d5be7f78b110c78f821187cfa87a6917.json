{"ast":null,"code":"import { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { assertAuthTokens } from '../utils/types.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../types/errors.mjs';\nimport { createVerifyUserAttributeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createVerifyUserAttributeClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Confirms a user attribute with the confirmation code.\n *\n * @param input -  The ConfirmUserAttributeInput object\n * @throws  -{@link AuthValidationErrorCode } -\n * Thrown when `confirmationCode` is not defined.\n * @throws  -{@link VerifyUserAttributeException } - Thrown due to an invalid confirmation code or attribute.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function confirmUserAttribute(input) {\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolEndpoint,\n    userPoolId\n  } = authConfig;\n  const {\n    confirmationCode,\n    userAttributeKey\n  } = input;\n  assertValidationError(!!confirmationCode, AuthValidationErrorCode.EmptyConfirmUserAttributeCode);\n  const {\n    tokens\n  } = await fetchAuthSession({\n    forceRefresh: false\n  });\n  assertAuthTokens(tokens);\n  const verifyUserAttribute = createVerifyUserAttributeClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  await verifyUserAttribute({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmUserAttribute)\n  }, {\n    AccessToken: tokens.accessToken.toString(),\n    AttributeName: userAttributeKey,\n    Code: confirmationCode\n  });\n}\nexport { confirmUserAttribute };","map":{"version":3,"names":["confirmUserAttribute","input","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","userPoolEndpoint","userPoolId","confirmationCode","userAttributeKey","assertValidationError","AuthValidationErrorCode","EmptyConfirmUserAttributeCode","tokens","fetchAuthSession","forceRefresh","assertAuthTokens","verifyUserAttribute","createVerifyUserAttributeClient","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","region","getRegionFromUserPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","ConfirmUserAttribute","AccessToken","accessToken","toString","AttributeName","Code"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/auth/src/providers/cognito/apis/confirmUserAttribute.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { assertAuthTokens } from '../utils/types';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { createVerifyUserAttributeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\n/**\n * Confirms a user attribute with the confirmation code.\n *\n * @param input -  The ConfirmUserAttributeInput object\n * @throws  -{@link AuthValidationErrorCode } -\n * Thrown when `confirmationCode` is not defined.\n * @throws  -{@link VerifyUserAttributeException } - Thrown due to an invalid confirmation code or attribute.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function confirmUserAttribute(input) {\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolEndpoint, userPoolId } = authConfig;\n    const { confirmationCode, userAttributeKey } = input;\n    assertValidationError(!!confirmationCode, AuthValidationErrorCode.EmptyConfirmUserAttributeCode);\n    const { tokens } = await fetchAuthSession({ forceRefresh: false });\n    assertAuthTokens(tokens);\n    const verifyUserAttribute = createVerifyUserAttributeClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    await verifyUserAttribute({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmUserAttribute),\n    }, {\n        AccessToken: tokens.accessToken.toString(),\n        AttributeName: userAttributeKey,\n        Code: confirmationCode,\n    });\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,oBAAoBA,CAACC,KAAK,EAAE;EAC9C,MAAMC,UAAU,GAAGC,OAAO,CAACC,SAAS,EAAE,CAACC,IAAI,EAAEC,OAAO;EACpDC,yBAAyB,CAACL,UAAU,CAAC;EACrC,MAAM;IAAEM,gBAAgB;IAAEC;EAAU,CAAE,GAAGP,UAAU;EACnD,MAAM;IAAEQ,gBAAgB;IAAEC;EAAgB,CAAE,GAAGV,KAAK;EACpDW,qBAAqB,CAAC,CAAC,CAACF,gBAAgB,EAAEG,uBAAuB,CAACC,6BAA6B,CAAC;EAChG,MAAM;IAAEC;EAAM,CAAE,GAAG,MAAMC,gBAAgB,CAAC;IAAEC,YAAY,EAAE;EAAK,CAAE,CAAC;EAClEC,gBAAgB,CAACH,MAAM,CAAC;EACxB,MAAMI,mBAAmB,GAAGC,+BAA+B,CAAC;IACxDC,gBAAgB,EAAEC,qCAAqC,CAAC;MACpDC,gBAAgB,EAAEf;IAC9B,CAAS;EACT,CAAK,CAAC;EACF,MAAMW,mBAAmB,CAAC;IACtBK,MAAM,EAAEC,uBAAuB,CAAChB,UAAU,CAAC;IAC3CiB,cAAc,EAAEC,qBAAqB,CAACC,UAAU,CAACC,oBAAoB;EAC7E,CAAK,EAAE;IACCC,WAAW,EAAEf,MAAM,CAACgB,WAAW,CAACC,QAAQ,EAAE;IAC1CC,aAAa,EAAEtB,gBAAgB;IAC/BuB,IAAI,EAAExB;EACd,CAAK,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}