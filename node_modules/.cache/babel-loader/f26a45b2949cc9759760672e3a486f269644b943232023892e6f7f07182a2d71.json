{"ast":null,"code":"import { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { getMFAType, getMFATypes } from '../utils/signInHelpers.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { assertAuthTokens } from '../utils/types.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../types/errors.mjs';\nimport { createGetUserClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createGetUserClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Fetches the preferred MFA setting and enabled MFA settings for the user.\n *\n * @returns FetchMFAPreferenceOutput\n * @throws  -{@link GetUserException} : error thrown when the service fails to fetch MFA preference\n * and settings.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function fetchMFAPreference() {\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolEndpoint,\n    userPoolId\n  } = authConfig;\n  const {\n    tokens\n  } = await fetchAuthSession({\n    forceRefresh: false\n  });\n  assertAuthTokens(tokens);\n  const getUser = createGetUserClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const {\n    PreferredMfaSetting,\n    UserMFASettingList\n  } = await getUser({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.FetchMFAPreference)\n  }, {\n    AccessToken: tokens.accessToken.toString()\n  });\n  return {\n    preferred: getMFAType(PreferredMfaSetting),\n    enabled: getMFATypes(UserMFASettingList)\n  };\n}\nexport { fetchMFAPreference };","map":{"version":3,"names":["fetchMFAPreference","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","userPoolEndpoint","userPoolId","tokens","fetchAuthSession","forceRefresh","assertAuthTokens","getUser","createGetUserClient","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","PreferredMfaSetting","UserMFASettingList","region","getRegionFromUserPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","FetchMFAPreference","AccessToken","accessToken","toString","preferred","getMFAType","enabled","getMFATypes"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/auth/src/providers/cognito/apis/fetchMFAPreference.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { getMFAType, getMFATypes } from '../utils/signInHelpers';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { assertAuthTokens } from '../utils/types';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { createGetUserClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\n/**\n * Fetches the preferred MFA setting and enabled MFA settings for the user.\n *\n * @returns FetchMFAPreferenceOutput\n * @throws  -{@link GetUserException} : error thrown when the service fails to fetch MFA preference\n * and settings.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function fetchMFAPreference() {\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolEndpoint, userPoolId } = authConfig;\n    const { tokens } = await fetchAuthSession({ forceRefresh: false });\n    assertAuthTokens(tokens);\n    const getUser = createGetUserClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const { PreferredMfaSetting, UserMFASettingList } = await getUser({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.FetchMFAPreference),\n    }, {\n        AccessToken: tokens.accessToken.toString(),\n    });\n    return {\n        preferred: getMFAType(PreferredMfaSetting),\n        enabled: getMFATypes(UserMFASettingList),\n    };\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,kBAAkBA,CAAA,EAAG;EACvC,MAAMC,UAAU,GAAGC,OAAO,CAACC,SAAS,EAAE,CAACC,IAAI,EAAEC,OAAO;EACpDC,yBAAyB,CAACL,UAAU,CAAC;EACrC,MAAM;IAAEM,gBAAgB;IAAEC;EAAU,CAAE,GAAGP,UAAU;EACnD,MAAM;IAAEQ;EAAM,CAAE,GAAG,MAAMC,gBAAgB,CAAC;IAAEC,YAAY,EAAE;EAAK,CAAE,CAAC;EAClEC,gBAAgB,CAACH,MAAM,CAAC;EACxB,MAAMI,OAAO,GAAGC,mBAAmB,CAAC;IAChCC,gBAAgB,EAAEC,qCAAqC,CAAC;MACpDC,gBAAgB,EAAEV;IAC9B,CAAS;EACT,CAAK,CAAC;EACF,MAAM;IAAEW,mBAAmB;IAAEC;EAAkB,CAAE,GAAG,MAAMN,OAAO,CAAC;IAC9DO,MAAM,EAAEC,uBAAuB,CAACb,UAAU,CAAC;IAC3Cc,cAAc,EAAEC,qBAAqB,CAACC,UAAU,CAACC,kBAAkB;EAC3E,CAAK,EAAE;IACCC,WAAW,EAAEjB,MAAM,CAACkB,WAAW,CAACC,QAAQ;EAChD,CAAK,CAAC;EACF,OAAO;IACHC,SAAS,EAAEC,UAAU,CAACZ,mBAAmB,CAAC;IAC1Ca,OAAO,EAAEC,WAAW,CAACb,kBAAkB;EAC/C,CAAK;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}