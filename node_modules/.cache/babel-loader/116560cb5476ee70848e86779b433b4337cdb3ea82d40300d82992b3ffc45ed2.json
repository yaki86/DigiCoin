{"ast":null,"code":"import { createAssertionFunction, AmplifyError, AmplifyErrorCode } from '@aws-amplify/core/internals/utils';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nclass PasskeyError extends AmplifyError {\n  constructor(params) {\n    super(params);\n    // Hack for making the custom error class work when transpiled to es5\n    // TODO: Delete the following 2 lines after we change the build target to >= es2015\n    this.constructor = PasskeyError;\n    Object.setPrototypeOf(this, PasskeyError.prototype);\n  }\n}\nvar PasskeyErrorCode;\n(function (PasskeyErrorCode) {\n  // not supported\n  PasskeyErrorCode[\"PasskeyNotSupported\"] = \"PasskeyNotSupported\";\n  // duplicate passkey\n  PasskeyErrorCode[\"PasskeyAlreadyExists\"] = \"PasskeyAlreadyExists\";\n  // misconfigurations\n  PasskeyErrorCode[\"InvalidPasskeyRegistrationOptions\"] = \"InvalidPasskeyRegistrationOptions\";\n  PasskeyErrorCode[\"InvalidPasskeyAuthenticationOptions\"] = \"InvalidPasskeyAuthenticationOptions\";\n  PasskeyErrorCode[\"RelyingPartyMismatch\"] = \"RelyingPartyMismatch\";\n  // failed credential creation / retrieval\n  PasskeyErrorCode[\"PasskeyRegistrationFailed\"] = \"PasskeyRegistrationFailed\";\n  PasskeyErrorCode[\"PasskeyRetrievalFailed\"] = \"PasskeyRetrievalFailed\";\n  // cancel / aborts\n  PasskeyErrorCode[\"PasskeyRegistrationCanceled\"] = \"PasskeyRegistrationCanceled\";\n  PasskeyErrorCode[\"PasskeyAuthenticationCanceled\"] = \"PasskeyAuthenticationCanceled\";\n  PasskeyErrorCode[\"PasskeyOperationAborted\"] = \"PasskeyOperationAborted\";\n})(PasskeyErrorCode || (PasskeyErrorCode = {}));\nconst notSupportedRecoverySuggestion = 'Passkeys may not be supported on this device. Ensure your application is running in a secure context (HTTPS) and Web Authentication API is supported.';\nconst abortOrCancelRecoverySuggestion = 'User may have canceled the ceremony or another interruption has occurred. Check underlying error for details.';\nconst misconfigurationRecoverySuggestion = 'Ensure your user pool is configured to support the WEB_AUTHN as an authentication factor.';\nconst passkeyErrorMap = {\n  [PasskeyErrorCode.PasskeyNotSupported]: {\n    message: 'Passkeys may not be supported on this device.',\n    recoverySuggestion: notSupportedRecoverySuggestion\n  },\n  [PasskeyErrorCode.InvalidPasskeyRegistrationOptions]: {\n    message: 'Invalid passkey registration options.',\n    recoverySuggestion: misconfigurationRecoverySuggestion\n  },\n  [PasskeyErrorCode.InvalidPasskeyAuthenticationOptions]: {\n    message: 'Invalid passkey authentication options.',\n    recoverySuggestion: misconfigurationRecoverySuggestion\n  },\n  [PasskeyErrorCode.PasskeyRegistrationFailed]: {\n    message: 'Device failed to create passkey.',\n    recoverySuggestion: notSupportedRecoverySuggestion\n  },\n  [PasskeyErrorCode.PasskeyRetrievalFailed]: {\n    message: 'Device failed to retrieve passkey.',\n    recoverySuggestion: 'Passkeys may not be available on this device. Try an alternative authentication factor like PASSWORD, EMAIL_OTP, or SMS_OTP.'\n  },\n  [PasskeyErrorCode.PasskeyAlreadyExists]: {\n    message: 'Passkey already exists in authenticator.',\n    recoverySuggestion: 'Proceed with existing passkey or try again after deleting the credential.'\n  },\n  [PasskeyErrorCode.PasskeyRegistrationCanceled]: {\n    message: 'Passkey registration ceremony has been canceled.',\n    recoverySuggestion: abortOrCancelRecoverySuggestion\n  },\n  [PasskeyErrorCode.PasskeyAuthenticationCanceled]: {\n    message: 'Passkey authentication ceremony has been canceled.',\n    recoverySuggestion: abortOrCancelRecoverySuggestion\n  },\n  [PasskeyErrorCode.PasskeyOperationAborted]: {\n    message: 'Passkey operation has been aborted.',\n    recoverySuggestion: abortOrCancelRecoverySuggestion\n  },\n  [PasskeyErrorCode.RelyingPartyMismatch]: {\n    message: 'Relying party does not match current domain.',\n    recoverySuggestion: 'Ensure relying party identifier matches current domain.'\n  }\n};\nconst assertPasskeyError = createAssertionFunction(passkeyErrorMap, PasskeyError);\n/**\n * Handle Passkey Authentication Errors\n * https://w3c.github.io/webauthn/#sctn-get-request-exceptions\n *\n * @param err unknown\n * @returns PasskeyError\n */\nconst handlePasskeyAuthenticationError = err => {\n  if (err instanceof PasskeyError) {\n    return err;\n  }\n  if (err instanceof Error) {\n    if (err.name === 'NotAllowedError') {\n      const {\n        message,\n        recoverySuggestion\n      } = passkeyErrorMap[PasskeyErrorCode.PasskeyAuthenticationCanceled];\n      return new PasskeyError({\n        name: PasskeyErrorCode.PasskeyAuthenticationCanceled,\n        message,\n        recoverySuggestion,\n        underlyingError: err\n      });\n    }\n  }\n  return handlePasskeyError(err);\n};\n/**\n * Handle Passkey Registration Errors\n * https://w3c.github.io/webauthn/#sctn-create-request-exceptions\n *\n * @param err unknown\n * @returns PasskeyError\n */\nconst handlePasskeyRegistrationError = err => {\n  if (err instanceof PasskeyError) {\n    return err;\n  }\n  if (err instanceof Error) {\n    // Duplicate Passkey\n    if (err.name === 'InvalidStateError') {\n      const {\n        message,\n        recoverySuggestion\n      } = passkeyErrorMap[PasskeyErrorCode.PasskeyAlreadyExists];\n      return new PasskeyError({\n        name: PasskeyErrorCode.PasskeyAlreadyExists,\n        message,\n        recoverySuggestion,\n        underlyingError: err\n      });\n    }\n    // User Cancels Ceremony / Generic Catch All\n    if (err.name === 'NotAllowedError') {\n      const {\n        message,\n        recoverySuggestion\n      } = passkeyErrorMap[PasskeyErrorCode.PasskeyRegistrationCanceled];\n      return new PasskeyError({\n        name: PasskeyErrorCode.PasskeyRegistrationCanceled,\n        message,\n        recoverySuggestion,\n        underlyingError: err\n      });\n    }\n  }\n  return handlePasskeyError(err);\n};\n/**\n * Handles Overlapping Passkey Errors Between Registration & Authentication\n * https://w3c.github.io/webauthn/#sctn-create-request-exceptions\n * https://w3c.github.io/webauthn/#sctn-get-request-exceptions\n *\n * @param err unknown\n * @returns PasskeyError\n */\nconst handlePasskeyError = err => {\n  if (err instanceof Error) {\n    // Passkey Operation Aborted\n    if (err.name === 'AbortError') {\n      const {\n        message,\n        recoverySuggestion\n      } = passkeyErrorMap[PasskeyErrorCode.PasskeyOperationAborted];\n      return new PasskeyError({\n        name: PasskeyErrorCode.PasskeyOperationAborted,\n        message,\n        recoverySuggestion,\n        underlyingError: err\n      });\n    }\n    // Relying Party / Domain Mismatch\n    if (err.name === 'SecurityError') {\n      const {\n        message,\n        recoverySuggestion\n      } = passkeyErrorMap[PasskeyErrorCode.RelyingPartyMismatch];\n      return new PasskeyError({\n        name: PasskeyErrorCode.RelyingPartyMismatch,\n        message,\n        recoverySuggestion,\n        underlyingError: err\n      });\n    }\n  }\n  return new PasskeyError({\n    name: AmplifyErrorCode.Unknown,\n    message: 'An unknown error has occurred.',\n    underlyingError: err\n  });\n};\nexport { PasskeyError, PasskeyErrorCode, assertPasskeyError, handlePasskeyAuthenticationError, handlePasskeyRegistrationError };","map":{"version":3,"names":["PasskeyError","AmplifyError","constructor","params","Object","setPrototypeOf","prototype","PasskeyErrorCode","notSupportedRecoverySuggestion","abortOrCancelRecoverySuggestion","misconfigurationRecoverySuggestion","passkeyErrorMap","PasskeyNotSupported","message","recoverySuggestion","InvalidPasskeyRegistrationOptions","InvalidPasskeyAuthenticationOptions","PasskeyRegistrationFailed","PasskeyRetrievalFailed","PasskeyAlreadyExists","PasskeyRegistrationCanceled","PasskeyAuthenticationCanceled","PasskeyOperationAborted","RelyingPartyMismatch","assertPasskeyError","createAssertionFunction","handlePasskeyAuthenticationError","err","Error","name","underlyingError","handlePasskeyError","handlePasskeyRegistrationError","AmplifyErrorCode","Unknown"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/auth/src/client/utils/passkey/errors.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AmplifyError, AmplifyErrorCode, createAssertionFunction, } from '@aws-amplify/core/internals/utils';\nexport class PasskeyError extends AmplifyError {\n    constructor(params) {\n        super(params);\n        // Hack for making the custom error class work when transpiled to es5\n        // TODO: Delete the following 2 lines after we change the build target to >= es2015\n        this.constructor = PasskeyError;\n        Object.setPrototypeOf(this, PasskeyError.prototype);\n    }\n}\nexport var PasskeyErrorCode;\n(function (PasskeyErrorCode) {\n    // not supported\n    PasskeyErrorCode[\"PasskeyNotSupported\"] = \"PasskeyNotSupported\";\n    // duplicate passkey\n    PasskeyErrorCode[\"PasskeyAlreadyExists\"] = \"PasskeyAlreadyExists\";\n    // misconfigurations\n    PasskeyErrorCode[\"InvalidPasskeyRegistrationOptions\"] = \"InvalidPasskeyRegistrationOptions\";\n    PasskeyErrorCode[\"InvalidPasskeyAuthenticationOptions\"] = \"InvalidPasskeyAuthenticationOptions\";\n    PasskeyErrorCode[\"RelyingPartyMismatch\"] = \"RelyingPartyMismatch\";\n    // failed credential creation / retrieval\n    PasskeyErrorCode[\"PasskeyRegistrationFailed\"] = \"PasskeyRegistrationFailed\";\n    PasskeyErrorCode[\"PasskeyRetrievalFailed\"] = \"PasskeyRetrievalFailed\";\n    // cancel / aborts\n    PasskeyErrorCode[\"PasskeyRegistrationCanceled\"] = \"PasskeyRegistrationCanceled\";\n    PasskeyErrorCode[\"PasskeyAuthenticationCanceled\"] = \"PasskeyAuthenticationCanceled\";\n    PasskeyErrorCode[\"PasskeyOperationAborted\"] = \"PasskeyOperationAborted\";\n})(PasskeyErrorCode || (PasskeyErrorCode = {}));\nconst notSupportedRecoverySuggestion = 'Passkeys may not be supported on this device. Ensure your application is running in a secure context (HTTPS) and Web Authentication API is supported.';\nconst abortOrCancelRecoverySuggestion = 'User may have canceled the ceremony or another interruption has occurred. Check underlying error for details.';\nconst misconfigurationRecoverySuggestion = 'Ensure your user pool is configured to support the WEB_AUTHN as an authentication factor.';\nconst passkeyErrorMap = {\n    [PasskeyErrorCode.PasskeyNotSupported]: {\n        message: 'Passkeys may not be supported on this device.',\n        recoverySuggestion: notSupportedRecoverySuggestion,\n    },\n    [PasskeyErrorCode.InvalidPasskeyRegistrationOptions]: {\n        message: 'Invalid passkey registration options.',\n        recoverySuggestion: misconfigurationRecoverySuggestion,\n    },\n    [PasskeyErrorCode.InvalidPasskeyAuthenticationOptions]: {\n        message: 'Invalid passkey authentication options.',\n        recoverySuggestion: misconfigurationRecoverySuggestion,\n    },\n    [PasskeyErrorCode.PasskeyRegistrationFailed]: {\n        message: 'Device failed to create passkey.',\n        recoverySuggestion: notSupportedRecoverySuggestion,\n    },\n    [PasskeyErrorCode.PasskeyRetrievalFailed]: {\n        message: 'Device failed to retrieve passkey.',\n        recoverySuggestion: 'Passkeys may not be available on this device. Try an alternative authentication factor like PASSWORD, EMAIL_OTP, or SMS_OTP.',\n    },\n    [PasskeyErrorCode.PasskeyAlreadyExists]: {\n        message: 'Passkey already exists in authenticator.',\n        recoverySuggestion: 'Proceed with existing passkey or try again after deleting the credential.',\n    },\n    [PasskeyErrorCode.PasskeyRegistrationCanceled]: {\n        message: 'Passkey registration ceremony has been canceled.',\n        recoverySuggestion: abortOrCancelRecoverySuggestion,\n    },\n    [PasskeyErrorCode.PasskeyAuthenticationCanceled]: {\n        message: 'Passkey authentication ceremony has been canceled.',\n        recoverySuggestion: abortOrCancelRecoverySuggestion,\n    },\n    [PasskeyErrorCode.PasskeyOperationAborted]: {\n        message: 'Passkey operation has been aborted.',\n        recoverySuggestion: abortOrCancelRecoverySuggestion,\n    },\n    [PasskeyErrorCode.RelyingPartyMismatch]: {\n        message: 'Relying party does not match current domain.',\n        recoverySuggestion: 'Ensure relying party identifier matches current domain.',\n    },\n};\nexport const assertPasskeyError = createAssertionFunction(passkeyErrorMap, PasskeyError);\n/**\n * Handle Passkey Authentication Errors\n * https://w3c.github.io/webauthn/#sctn-get-request-exceptions\n *\n * @param err unknown\n * @returns PasskeyError\n */\nexport const handlePasskeyAuthenticationError = (err) => {\n    if (err instanceof PasskeyError) {\n        return err;\n    }\n    if (err instanceof Error) {\n        if (err.name === 'NotAllowedError') {\n            const { message, recoverySuggestion } = passkeyErrorMap[PasskeyErrorCode.PasskeyAuthenticationCanceled];\n            return new PasskeyError({\n                name: PasskeyErrorCode.PasskeyAuthenticationCanceled,\n                message,\n                recoverySuggestion,\n                underlyingError: err,\n            });\n        }\n    }\n    return handlePasskeyError(err);\n};\n/**\n * Handle Passkey Registration Errors\n * https://w3c.github.io/webauthn/#sctn-create-request-exceptions\n *\n * @param err unknown\n * @returns PasskeyError\n */\nexport const handlePasskeyRegistrationError = (err) => {\n    if (err instanceof PasskeyError) {\n        return err;\n    }\n    if (err instanceof Error) {\n        // Duplicate Passkey\n        if (err.name === 'InvalidStateError') {\n            const { message, recoverySuggestion } = passkeyErrorMap[PasskeyErrorCode.PasskeyAlreadyExists];\n            return new PasskeyError({\n                name: PasskeyErrorCode.PasskeyAlreadyExists,\n                message,\n                recoverySuggestion,\n                underlyingError: err,\n            });\n        }\n        // User Cancels Ceremony / Generic Catch All\n        if (err.name === 'NotAllowedError') {\n            const { message, recoverySuggestion } = passkeyErrorMap[PasskeyErrorCode.PasskeyRegistrationCanceled];\n            return new PasskeyError({\n                name: PasskeyErrorCode.PasskeyRegistrationCanceled,\n                message,\n                recoverySuggestion,\n                underlyingError: err,\n            });\n        }\n    }\n    return handlePasskeyError(err);\n};\n/**\n * Handles Overlapping Passkey Errors Between Registration & Authentication\n * https://w3c.github.io/webauthn/#sctn-create-request-exceptions\n * https://w3c.github.io/webauthn/#sctn-get-request-exceptions\n *\n * @param err unknown\n * @returns PasskeyError\n */\nconst handlePasskeyError = (err) => {\n    if (err instanceof Error) {\n        // Passkey Operation Aborted\n        if (err.name === 'AbortError') {\n            const { message, recoverySuggestion } = passkeyErrorMap[PasskeyErrorCode.PasskeyOperationAborted];\n            return new PasskeyError({\n                name: PasskeyErrorCode.PasskeyOperationAborted,\n                message,\n                recoverySuggestion,\n                underlyingError: err,\n            });\n        }\n        // Relying Party / Domain Mismatch\n        if (err.name === 'SecurityError') {\n            const { message, recoverySuggestion } = passkeyErrorMap[PasskeyErrorCode.RelyingPartyMismatch];\n            return new PasskeyError({\n                name: PasskeyErrorCode.RelyingPartyMismatch,\n                message,\n                recoverySuggestion,\n                underlyingError: err,\n            });\n        }\n    }\n    return new PasskeyError({\n        name: AmplifyErrorCode.Unknown,\n        message: 'An unknown error has occurred.',\n        underlyingError: err,\n    });\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}