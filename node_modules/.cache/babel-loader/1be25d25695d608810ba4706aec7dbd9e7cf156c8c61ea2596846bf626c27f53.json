{"ast":null,"code":"import { AmplifyError } from '../../errors/AmplifyError.mjs';\nimport { AmplifyErrorCode } from '../../types/errors.mjs';\nimport '../../errors/errorHelpers.mjs';\nimport { withMemoization } from '../utils/memoization.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst shouldSendBody = method => !['HEAD', 'GET', 'DELETE'].includes(method.toUpperCase());\n// TODO[AllanZhengYP]: we need to provide isCanceledError utility\nconst fetchTransferHandler = async ({\n  url,\n  method,\n  headers,\n  body\n}, {\n  abortSignal,\n  cache,\n  withCrossDomainCredentials\n}) => {\n  let resp;\n  try {\n    resp = await fetch(url, {\n      method,\n      headers,\n      body: shouldSendBody(method) ? body : undefined,\n      signal: abortSignal,\n      cache,\n      credentials: withCrossDomainCredentials ? 'include' : 'same-origin'\n    });\n  } catch (e) {\n    if (e instanceof TypeError) {\n      throw new AmplifyError({\n        name: AmplifyErrorCode.NetworkError,\n        message: 'A network error has occurred.',\n        underlyingError: e\n      });\n    }\n    throw e;\n  }\n  const responseHeaders = {};\n  resp.headers?.forEach((value, key) => {\n    responseHeaders[key.toLowerCase()] = value;\n  });\n  const httpResponse = {\n    statusCode: resp.status,\n    headers: responseHeaders,\n    body: null\n  };\n  // resp.body is a ReadableStream according to Fetch API spec, but React Native\n  // does not implement it.\n  const bodyWithMixin = Object.assign(resp.body ?? {}, {\n    text: withMemoization(() => resp.text()),\n    blob: withMemoization(() => resp.blob()),\n    json: withMemoization(() => resp.json())\n  });\n  return {\n    ...httpResponse,\n    body: bodyWithMixin\n  };\n};\nexport { fetchTransferHandler };","map":{"version":3,"names":["shouldSendBody","method","includes","toUpperCase","fetchTransferHandler","url","headers","body","abortSignal","cache","withCrossDomainCredentials","resp","fetch","undefined","signal","credentials","e","TypeError","AmplifyError","name","AmplifyErrorCode","NetworkError","message","underlyingError","responseHeaders","forEach","value","key","toLowerCase","httpResponse","statusCode","status","bodyWithMixin","Object","assign","text","withMemoization","blob","json"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/core/src/clients/handlers/fetch.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AmplifyError } from '../../errors';\nimport { withMemoization } from '../utils/memoization';\nimport { AmplifyErrorCode } from '../../types';\nconst shouldSendBody = (method) => !['HEAD', 'GET', 'DELETE'].includes(method.toUpperCase());\n// TODO[AllanZhengYP]: we need to provide isCanceledError utility\nexport const fetchTransferHandler = async ({ url, method, headers, body }, { abortSignal, cache, withCrossDomainCredentials }) => {\n    let resp;\n    try {\n        resp = await fetch(url, {\n            method,\n            headers,\n            body: shouldSendBody(method) ? body : undefined,\n            signal: abortSignal,\n            cache,\n            credentials: withCrossDomainCredentials ? 'include' : 'same-origin',\n        });\n    }\n    catch (e) {\n        if (e instanceof TypeError) {\n            throw new AmplifyError({\n                name: AmplifyErrorCode.NetworkError,\n                message: 'A network error has occurred.',\n                underlyingError: e,\n            });\n        }\n        throw e;\n    }\n    const responseHeaders = {};\n    resp.headers?.forEach((value, key) => {\n        responseHeaders[key.toLowerCase()] = value;\n    });\n    const httpResponse = {\n        statusCode: resp.status,\n        headers: responseHeaders,\n        body: null,\n    };\n    // resp.body is a ReadableStream according to Fetch API spec, but React Native\n    // does not implement it.\n    const bodyWithMixin = Object.assign(resp.body ?? {}, {\n        text: withMemoization(() => resp.text()),\n        blob: withMemoization(() => resp.blob()),\n        json: withMemoization(() => resp.json()),\n    });\n    return {\n        ...httpResponse,\n        body: bodyWithMixin,\n    };\n};\n"],"mappings":";;;;;AAAA;AACA;AAIA,MAAMA,cAAc,GAAIC,MAAM,IAAK,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,CAACC,QAAQ,CAACD,MAAM,CAACE,WAAW,EAAE,CAAC;AAC5F;AACY,MAACC,oBAAoB,GAAG,MAAAA,CAAO;EAAEC,GAAG;EAAEJ,MAAM;EAAEK,OAAO;EAAEC;AAAI,CAAE,EAAE;EAAEC,WAAW;EAAEC,KAAK;EAAEC;AAA0B,CAAE,KAAK;EAC9H,IAAIC,IAAI;EACR,IAAI;IACAA,IAAI,GAAG,MAAMC,KAAK,CAACP,GAAG,EAAE;MACpBJ,MAAM;MACNK,OAAO;MACPC,IAAI,EAAEP,cAAc,CAACC,MAAM,CAAC,GAAGM,IAAI,GAAGM,SAAS;MAC/CC,MAAM,EAAEN,WAAW;MACnBC,KAAK;MACLM,WAAW,EAAEL,0BAA0B,GAAG,SAAS,GAAG;IAClE,CAAS,CAAC;EACV,CAAK,CACD,OAAOM,CAAC,EAAE;IACN,IAAIA,CAAC,YAAYC,SAAS,EAAE;MACxB,MAAM,IAAIC,YAAY,CAAC;QACnBC,IAAI,EAAEC,gBAAgB,CAACC,YAAY;QACnCC,OAAO,EAAE,+BAA+B;QACxCC,eAAe,EAAEP;MACjC,CAAa,CAAC;IACd;IACQ,MAAMA,CAAC;EACf;EACI,MAAMQ,eAAe,GAAG,EAAE;EAC1Bb,IAAI,CAACL,OAAO,EAAEmB,OAAO,CAAC,CAACC,KAAK,EAAEC,GAAG,KAAK;IAClCH,eAAe,CAACG,GAAG,CAACC,WAAW,EAAE,CAAC,GAAGF,KAAK;EAClD,CAAK,CAAC;EACF,MAAMG,YAAY,GAAG;IACjBC,UAAU,EAAEnB,IAAI,CAACoB,MAAM;IACvBzB,OAAO,EAAEkB,eAAe;IACxBjB,IAAI,EAAE;EACd,CAAK;EACL;EACA;EACI,MAAMyB,aAAa,GAAGC,MAAM,CAACC,MAAM,CAACvB,IAAI,CAACJ,IAAI,IAAI,EAAE,EAAE;IACjD4B,IAAI,EAAEC,eAAe,CAAC,MAAMzB,IAAI,CAACwB,IAAI,EAAE,CAAC;IACxCE,IAAI,EAAED,eAAe,CAAC,MAAMzB,IAAI,CAAC0B,IAAI,EAAE,CAAC;IACxCC,IAAI,EAAEF,eAAe,CAAC,MAAMzB,IAAI,CAAC2B,IAAI,EAAE;EAC/C,CAAK,CAAC;EACF,OAAO;IACH,GAAGT,YAAY;IACftB,IAAI,EAAEyB;EACd,CAAK;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}