{"ast":null,"code":"import { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { assertAuthTokens } from '../utils/types.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../types/errors.mjs';\nimport { createSetUserMFAPreferenceClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createSetUserMFAPreferenceClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Updates the MFA preference of the user.\n *\n * @param input - The UpdateMFAPreferenceInput object.\n * @throws -{@link SetUserMFAPreferenceException } - Service error thrown when the MFA preference cannot be updated.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function updateMFAPreference(input) {\n  const {\n    sms,\n    totp,\n    email\n  } = input;\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolEndpoint,\n    userPoolId\n  } = authConfig;\n  const {\n    tokens\n  } = await fetchAuthSession({\n    forceRefresh: false\n  });\n  assertAuthTokens(tokens);\n  const setUserMFAPreference = createSetUserMFAPreferenceClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  await setUserMFAPreference({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.UpdateMFAPreference)\n  }, {\n    AccessToken: tokens.accessToken.toString(),\n    SMSMfaSettings: getMFASettings(sms),\n    SoftwareTokenMfaSettings: getMFASettings(totp),\n    EmailMfaSettings: getMFASettings(email)\n  });\n}\nfunction getMFASettings(mfaPreference) {\n  if (mfaPreference === 'DISABLED') {\n    return {\n      Enabled: false\n    };\n  } else if (mfaPreference === 'PREFERRED') {\n    return {\n      Enabled: true,\n      PreferredMfa: true\n    };\n  } else if (mfaPreference === 'ENABLED') {\n    return {\n      Enabled: true\n    };\n  } else if (mfaPreference === 'NOT_PREFERRED') {\n    return {\n      Enabled: true,\n      PreferredMfa: false\n    };\n  }\n}\nexport { getMFASettings, updateMFAPreference };","map":{"version":3,"names":["updateMFAPreference","input","sms","totp","email","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","userPoolEndpoint","userPoolId","tokens","fetchAuthSession","forceRefresh","assertAuthTokens","setUserMFAPreference","createSetUserMFAPreferenceClient","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","region","getRegionFromUserPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","UpdateMFAPreference","AccessToken","accessToken","toString","SMSMfaSettings","getMFASettings","SoftwareTokenMfaSettings","EmailMfaSettings","mfaPreference","Enabled","PreferredMfa"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/auth/src/providers/cognito/apis/updateMFAPreference.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { assertAuthTokens } from '../utils/types';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { createSetUserMFAPreferenceClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\n/**\n * Updates the MFA preference of the user.\n *\n * @param input - The UpdateMFAPreferenceInput object.\n * @throws -{@link SetUserMFAPreferenceException } - Service error thrown when the MFA preference cannot be updated.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function updateMFAPreference(input) {\n    const { sms, totp, email } = input;\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolEndpoint, userPoolId } = authConfig;\n    const { tokens } = await fetchAuthSession({ forceRefresh: false });\n    assertAuthTokens(tokens);\n    const setUserMFAPreference = createSetUserMFAPreferenceClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    await setUserMFAPreference({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.UpdateMFAPreference),\n    }, {\n        AccessToken: tokens.accessToken.toString(),\n        SMSMfaSettings: getMFASettings(sms),\n        SoftwareTokenMfaSettings: getMFASettings(totp),\n        EmailMfaSettings: getMFASettings(email),\n    });\n}\nexport function getMFASettings(mfaPreference) {\n    if (mfaPreference === 'DISABLED') {\n        return {\n            Enabled: false,\n        };\n    }\n    else if (mfaPreference === 'PREFERRED') {\n        return {\n            Enabled: true,\n            PreferredMfa: true,\n        };\n    }\n    else if (mfaPreference === 'ENABLED') {\n        return {\n            Enabled: true,\n        };\n    }\n    else if (mfaPreference === 'NOT_PREFERRED') {\n        return {\n            Enabled: true,\n            PreferredMfa: false,\n        };\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,mBAAmBA,CAACC,KAAK,EAAE;EAC7C,MAAM;IAAEC,GAAG;IAAEC,IAAI;IAAEC;EAAK,CAAE,GAAGH,KAAK;EAClC,MAAMI,UAAU,GAAGC,OAAO,CAACC,SAAS,EAAE,CAACC,IAAI,EAAEC,OAAO;EACpDC,yBAAyB,CAACL,UAAU,CAAC;EACrC,MAAM;IAAEM,gBAAgB;IAAEC;EAAU,CAAE,GAAGP,UAAU;EACnD,MAAM;IAAEQ;EAAM,CAAE,GAAG,MAAMC,gBAAgB,CAAC;IAAEC,YAAY,EAAE;EAAK,CAAE,CAAC;EAClEC,gBAAgB,CAACH,MAAM,CAAC;EACxB,MAAMI,oBAAoB,GAAGC,gCAAgC,CAAC;IAC1DC,gBAAgB,EAAEC,qCAAqC,CAAC;MACpDC,gBAAgB,EAAEV;IAC9B,CAAS;EACT,CAAK,CAAC;EACF,MAAMM,oBAAoB,CAAC;IACvBK,MAAM,EAAEC,uBAAuB,CAACX,UAAU,CAAC;IAC3CY,cAAc,EAAEC,qBAAqB,CAACC,UAAU,CAACC,mBAAmB;EAC5E,CAAK,EAAE;IACCC,WAAW,EAAEf,MAAM,CAACgB,WAAW,CAACC,QAAQ,EAAE;IAC1CC,cAAc,EAAEC,cAAc,CAAC9B,GAAG,CAAC;IACnC+B,wBAAwB,EAAED,cAAc,CAAC7B,IAAI,CAAC;IAC9C+B,gBAAgB,EAAEF,cAAc,CAAC5B,KAAK;EAC9C,CAAK,CAAC;AACN;AACO,SAAS4B,cAAcA,CAACG,aAAa,EAAE;EAC1C,IAAIA,aAAa,KAAK,UAAU,EAAE;IAC9B,OAAO;MACHC,OAAO,EAAE;IACrB,CAAS;EACT,CAAK,MACI,IAAID,aAAa,KAAK,WAAW,EAAE;IACpC,OAAO;MACHC,OAAO,EAAE,IAAI;MACbC,YAAY,EAAE;IAC1B,CAAS;EACT,CAAK,MACI,IAAIF,aAAa,KAAK,SAAS,EAAE;IAClC,OAAO;MACHC,OAAO,EAAE;IACrB,CAAS;EACT,CAAK,MACI,IAAID,aAAa,KAAK,eAAe,EAAE;IACxC,OAAO;MACHC,OAAO,EAAE,IAAI;MACbC,YAAY,EAAE;IAC1B,CAAS;EACT;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}