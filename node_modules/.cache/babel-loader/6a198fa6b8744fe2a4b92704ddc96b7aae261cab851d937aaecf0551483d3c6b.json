{"ast":null,"code":"import { signRequest } from './signer/signatureV4/signRequest.mjs';\nimport '@aws-crypto/sha256-js';\nimport '@smithy/util-hex-encoding';\nimport { getSkewCorrectedDate } from './utils/getSkewCorrectedDate.mjs';\nimport { getUpdatedSystemClockOffset } from './utils/getUpdatedSystemClockOffset.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Middleware that SigV4 signs request with AWS credentials, and correct system clock offset.\n * This middleware is expected to be placed after retry middleware.\n */\nconst signingMiddlewareFactory = ({\n  credentials,\n  region,\n  service,\n  uriEscapePath = true\n}) => {\n  let currentSystemClockOffset;\n  return (next, context) => async function signingMiddleware(request) {\n    currentSystemClockOffset = currentSystemClockOffset ?? 0;\n    const signRequestOptions = {\n      credentials: typeof credentials === 'function' ? await credentials({\n        forceRefresh: !!context?.isCredentialsExpired\n      }) : credentials,\n      signingDate: getSkewCorrectedDate(currentSystemClockOffset),\n      signingRegion: region,\n      signingService: service,\n      uriEscapePath\n    };\n    const signedRequest = await signRequest(request, signRequestOptions);\n    const response = await next(signedRequest);\n    // Update system clock offset if response contains date header, regardless of the status code.\n    // non-2xx response will still be returned from next handler instead of thrown, because it's\n    // only thrown by the retry middleware.\n    const dateString = getDateHeader(response);\n    if (dateString) {\n      currentSystemClockOffset = getUpdatedSystemClockOffset(Date.parse(dateString), currentSystemClockOffset);\n    }\n    return response;\n  };\n};\nconst getDateHeader = ({\n  headers\n} = {}) => headers?.date ?? headers?.Date ?? headers?.['x-amz-date'];\nexport { signingMiddlewareFactory };","map":{"version":3,"names":["signingMiddlewareFactory","credentials","region","service","uriEscapePath","currentSystemClockOffset","next","context","signingMiddleware","request","signRequestOptions","forceRefresh","isCredentialsExpired","signingDate","getSkewCorrectedDate","signingRegion","signingService","signedRequest","signRequest","response","dateString","getDateHeader","getUpdatedSystemClockOffset","Date","parse","headers","date"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/core/src/clients/middleware/signing/middleware.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { signRequest } from './signer/signatureV4';\nimport { getSkewCorrectedDate } from './utils/getSkewCorrectedDate';\nimport { getUpdatedSystemClockOffset } from './utils/getUpdatedSystemClockOffset';\n/**\n * Middleware that SigV4 signs request with AWS credentials, and correct system clock offset.\n * This middleware is expected to be placed after retry middleware.\n */\nexport const signingMiddlewareFactory = ({ credentials, region, service, uriEscapePath = true, }) => {\n    let currentSystemClockOffset;\n    return (next, context) => async function signingMiddleware(request) {\n        currentSystemClockOffset = currentSystemClockOffset ?? 0;\n        const signRequestOptions = {\n            credentials: typeof credentials === 'function'\n                ? await credentials({\n                    forceRefresh: !!context?.isCredentialsExpired,\n                })\n                : credentials,\n            signingDate: getSkewCorrectedDate(currentSystemClockOffset),\n            signingRegion: region,\n            signingService: service,\n            uriEscapePath,\n        };\n        const signedRequest = await signRequest(request, signRequestOptions);\n        const response = await next(signedRequest);\n        // Update system clock offset if response contains date header, regardless of the status code.\n        // non-2xx response will still be returned from next handler instead of thrown, because it's\n        // only thrown by the retry middleware.\n        const dateString = getDateHeader(response);\n        if (dateString) {\n            currentSystemClockOffset = getUpdatedSystemClockOffset(Date.parse(dateString), currentSystemClockOffset);\n        }\n        return response;\n    };\n};\nconst getDateHeader = ({ headers } = {}) => headers?.date ?? headers?.Date ?? headers?.['x-amz-date'];\n"],"mappings":";;;;;;AAAA;AACA;AAIA;AACA;AACA;AACA;AACY,MAACA,wBAAwB,GAAGA,CAAC;EAAEC,WAAW;EAAEC,MAAM;EAAEC,OAAO;EAAEC,aAAa,GAAG;AAAI,CAAG,KAAK;EACjG,IAAIC,wBAAwB;EAC5B,OAAO,CAACC,IAAI,EAAEC,OAAO,KAAK,eAAeC,iBAAiBA,CAACC,OAAO,EAAE;IAChEJ,wBAAwB,GAAGA,wBAAwB,IAAI,CAAC;IACxD,MAAMK,kBAAkB,GAAG;MACvBT,WAAW,EAAE,OAAOA,WAAW,KAAK,UAAU,GACxC,MAAMA,WAAW,CAAC;QAChBU,YAAY,EAAE,CAAC,CAACJ,OAAO,EAAEK;MAC7C,CAAiB,CAAC,GACAX,WAAW;MACjBY,WAAW,EAAEC,oBAAoB,CAACT,wBAAwB,CAAC;MAC3DU,aAAa,EAAEb,MAAM;MACrBc,cAAc,EAAEb,OAAO;MACvBC;IACZ,CAAS;IACD,MAAMa,aAAa,GAAG,MAAMC,WAAW,CAACT,OAAO,EAAEC,kBAAkB,CAAC;IACpE,MAAMS,QAAQ,GAAG,MAAMb,IAAI,CAACW,aAAa,CAAC;IAClD;IACA;IACA;IACQ,MAAMG,UAAU,GAAGC,aAAa,CAACF,QAAQ,CAAC;IAC1C,IAAIC,UAAU,EAAE;MACZf,wBAAwB,GAAGiB,2BAA2B,CAACC,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,EAAEf,wBAAwB,CAAC;IACpH;IACQ,OAAOc,QAAQ;EACvB,CAAK;AACL;AACA,MAAME,aAAa,GAAGA,CAAC;EAAEI;AAAO,CAAE,GAAG,EAAE,KAAKA,OAAO,EAAEC,IAAI,IAAID,OAAO,EAAEF,IAAI,IAAIE,OAAO,GAAG,YAAY,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}