{"ast":null,"code":"import { AmplifyErrorCode } from '../../../types/errors.mjs';\nimport { assert } from '../../../errors/errorHelpers.mjs';\nimport { updateEndpoint } from '../apis/updateEndpoint.mjs';\nimport { getEndpointId } from './getEndpointId.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Resolves an endpoint id from cache or prepare via updateEndpoint if one does not already exist,\n * which will generate and cache an endpoint id between calls.\n *\n * @internal\n */\nconst resolveEndpointId = async _ref => {\n  let {\n    address,\n    appId,\n    category,\n    channelType,\n    credentials,\n    identityId,\n    region,\n    userAgentValue\n  } = _ref;\n  let endpointId = await getEndpointId(appId, category);\n  if (!endpointId) {\n    await updateEndpoint({\n      address,\n      appId,\n      category,\n      channelType,\n      credentials,\n      identityId,\n      region,\n      userAgentValue\n    });\n    endpointId = await getEndpointId(appId, category);\n  }\n  assert(!!endpointId, AmplifyErrorCode.NoEndpointId);\n  return endpointId;\n};\nexport { resolveEndpointId };","map":{"version":3,"names":["resolveEndpointId","_ref","address","appId","category","channelType","credentials","identityId","region","userAgentValue","endpointId","getEndpointId","updateEndpoint","assert","AmplifyErrorCode","NoEndpointId"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/core/src/providers/pinpoint/utils/resolveEndpointId.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { assert } from '../../../errors';\nimport { AmplifyErrorCode } from '../../../types';\nimport { updateEndpoint } from '../apis/updateEndpoint';\nimport { getEndpointId } from './getEndpointId';\n/**\n * Resolves an endpoint id from cache or prepare via updateEndpoint if one does not already exist,\n * which will generate and cache an endpoint id between calls.\n *\n * @internal\n */\nexport const resolveEndpointId = async ({ address, appId, category, channelType, credentials, identityId, region, userAgentValue, }) => {\n    let endpointId = await getEndpointId(appId, category);\n    if (!endpointId) {\n        await updateEndpoint({\n            address,\n            appId,\n            category,\n            channelType,\n            credentials,\n            identityId,\n            region,\n            userAgentValue,\n        });\n        endpointId = await getEndpointId(appId, category);\n    }\n    assert(!!endpointId, AmplifyErrorCode.NoEndpointId);\n    return endpointId;\n};\n"],"mappings":";;;;;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,iBAAiB,GAAG,MAAAC,IAAA,IAAuG;EAAA,IAAhG;IAAEC,OAAO;IAAEC,KAAK;IAAEC,QAAQ;IAAEC,WAAW;IAAEC,WAAW;IAAEC,UAAU;IAAEC,MAAM;IAAEC;EAAc,CAAG,GAAAR,IAAA;EAC/H,IAAIS,UAAU,GAAG,MAAMC,aAAa,CAACR,KAAK,EAAEC,QAAQ,CAAC;EACrD,IAAI,CAACM,UAAU,EAAE;IACb,MAAME,cAAc,CAAC;MACjBV,OAAO;MACPC,KAAK;MACLC,QAAQ;MACRC,WAAW;MACXC,WAAW;MACXC,UAAU;MACVC,MAAM;MACNC;IACZ,CAAS,CAAC;IACFC,UAAU,GAAG,MAAMC,aAAa,CAACR,KAAK,EAAEC,QAAQ,CAAC;EACzD;EACIS,MAAM,CAAC,CAAC,CAACH,UAAU,EAAEI,gBAAgB,CAACC,YAAY,CAAC;EACnD,OAAOL,UAAU;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}