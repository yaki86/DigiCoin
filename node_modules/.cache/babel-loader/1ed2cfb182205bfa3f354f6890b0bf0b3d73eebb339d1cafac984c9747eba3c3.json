{"ast":null,"code":"import { parseJsonError } from '@aws-amplify/core/internals/aws-client-utils';\nimport { RestApiError } from '../errors/RestApiError.mjs';\nimport '../errors/validation.mjs';\n\n/**\n * Parses both AWS and non-AWS error responses coming from the users' backend code.\n * * AWS errors generated by the AWS services(e.g. API Gateway, Bedrock). They can be Signature errors,\n *   ClockSkew errors, etc. These responses will be parsed to errors with proper name and message from the AWS\n *   services.\n * * non-AWS errors thrown by the user code. They can contain any headers or body. Users need to access the\n *   error.response to get the headers and body and parse them accordingly. The JS error name and message will\n *   be `UnknownError` and `Unknown error` respectively.\n */\nconst parseRestApiServiceError = async response => {\n  if (!response) {\n    // Response is not considered an error.\n    return;\n  }\n  const parsedAwsError = await parseJsonError(stubErrorResponse(response));\n  if (!parsedAwsError) ;else {\n    const bodyText = await response.body?.text();\n    return buildRestApiError(parsedAwsError, {\n      statusCode: response.statusCode,\n      headers: response.headers,\n      body: bodyText\n    });\n  }\n};\n/**\n * The response object needs to be stub here because the parseAwsJsonError assumes the response body to be valid JSON.\n * Although this is true for AWS services, it is not true for responses from user's code. Once the response body is\n * unwrapped as JSON(and fail), it cannot be read as text again. Therefore, we need to stub the response body here to\n * make sure we can read the error response body as a JSON, and may fall back to read as text if it is not a valid JSON.\n */\nconst stubErrorResponse = response => {\n  let bodyTextPromise;\n  const bodyProxy = new Proxy(response.body, {\n    get(target, prop, receiver) {\n      if (prop === 'json') {\n        // For potential AWS errors, error parser will try to parse the body as JSON first.\n        return async () => {\n          if (!bodyTextPromise) {\n            bodyTextPromise = target.text();\n          }\n          try {\n            return JSON.parse(await bodyTextPromise);\n          } catch (error) {\n            // If response body is not a valid JSON, we stub it to be an empty object and eventually parsed\n            // as an unknown error\n            return {};\n          }\n        };\n      } else if (prop === 'text') {\n        // For non-AWS errors, users can access the body as a string as a fallback.\n        return async () => {\n          if (!bodyTextPromise) {\n            bodyTextPromise = target.text();\n          }\n          return bodyTextPromise;\n        };\n      } else {\n        return Reflect.get(target, prop, receiver);\n      }\n    }\n  });\n  const responseProxy = new Proxy(response, {\n    get(target, prop, receiver) {\n      if (prop === 'body') {\n        return bodyProxy;\n      } else {\n        return Reflect.get(target, prop, receiver);\n      }\n    }\n  });\n  return responseProxy;\n};\n/**\n * Utility to create a new RestApiError from a service error.\n */\nconst buildRestApiError = (error, response) => {\n  const restApiError = new RestApiError({\n    name: error?.name,\n    message: error.message,\n    underlyingError: error,\n    response\n  });\n  // $metadata is only required for backwards compatibility.\n  return Object.assign(restApiError, {\n    $metadata: error.$metadata\n  });\n};\nexport { parseRestApiServiceError };","map":{"version":3,"names":["parseRestApiServiceError","response","parsedAwsError","parseJsonError","stubErrorResponse","bodyText","body","text","buildRestApiError","statusCode","headers","bodyTextPromise","bodyProxy","Proxy","get","target","prop","receiver","JSON","parse","error","Reflect","responseProxy","restApiError","RestApiError","name","message","underlyingError","Object","assign","$metadata"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/api-rest/src/utils/serviceError.ts"],"sourcesContent":["import { parseJsonError as parseAwsJsonError, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { RestApiError } from '../errors';\n/**\n * Parses both AWS and non-AWS error responses coming from the users' backend code.\n * * AWS errors generated by the AWS services(e.g. API Gateway, Bedrock). They can be Signature errors,\n *   ClockSkew errors, etc. These responses will be parsed to errors with proper name and message from the AWS\n *   services.\n * * non-AWS errors thrown by the user code. They can contain any headers or body. Users need to access the\n *   error.response to get the headers and body and parse them accordingly. The JS error name and message will\n *   be `UnknownError` and `Unknown error` respectively.\n */\nexport const parseRestApiServiceError = async (response) => {\n    if (!response) {\n        // Response is not considered an error.\n        return;\n    }\n    const parsedAwsError = await parseAwsJsonError(stubErrorResponse(response));\n    if (!parsedAwsError) {\n        // Response is not considered an error.\n    }\n    else {\n        const bodyText = await response.body?.text();\n        return buildRestApiError(parsedAwsError, {\n            statusCode: response.statusCode,\n            headers: response.headers,\n            body: bodyText,\n        });\n    }\n};\n/**\n * The response object needs to be stub here because the parseAwsJsonError assumes the response body to be valid JSON.\n * Although this is true for AWS services, it is not true for responses from user's code. Once the response body is\n * unwrapped as JSON(and fail), it cannot be read as text again. Therefore, we need to stub the response body here to\n * make sure we can read the error response body as a JSON, and may fall back to read as text if it is not a valid JSON.\n */\nconst stubErrorResponse = (response) => {\n    let bodyTextPromise;\n    const bodyProxy = new Proxy(response.body, {\n        get(target, prop, receiver) {\n            if (prop === 'json') {\n                // For potential AWS errors, error parser will try to parse the body as JSON first.\n                return async () => {\n                    if (!bodyTextPromise) {\n                        bodyTextPromise = target.text();\n                    }\n                    try {\n                        return JSON.parse(await bodyTextPromise);\n                    }\n                    catch (error) {\n                        // If response body is not a valid JSON, we stub it to be an empty object and eventually parsed\n                        // as an unknown error\n                        return {};\n                    }\n                };\n            }\n            else if (prop === 'text') {\n                // For non-AWS errors, users can access the body as a string as a fallback.\n                return async () => {\n                    if (!bodyTextPromise) {\n                        bodyTextPromise = target.text();\n                    }\n                    return bodyTextPromise;\n                };\n            }\n            else {\n                return Reflect.get(target, prop, receiver);\n            }\n        },\n    });\n    const responseProxy = new Proxy(response, {\n        get(target, prop, receiver) {\n            if (prop === 'body') {\n                return bodyProxy;\n            }\n            else {\n                return Reflect.get(target, prop, receiver);\n            }\n        },\n    });\n    return responseProxy;\n};\n/**\n * Utility to create a new RestApiError from a service error.\n */\nconst buildRestApiError = (error, response) => {\n    const restApiError = new RestApiError({\n        name: error?.name,\n        message: error.message,\n        underlyingError: error,\n        response,\n    });\n    // $metadata is only required for backwards compatibility.\n    return Object.assign(restApiError, { $metadata: error.$metadata });\n};\n"],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,wBAAwB,GAAG,MAAOC,QAAQ,IAAK;EACxD,IAAI,CAACA,QAAQ,EAAE;IACnB;IACQ;EACR;EACI,MAAMC,cAAc,GAAG,MAAMC,cAAiB,CAACC,iBAAiB,CAACH,QAAQ,CAAC,CAAC;EAC3E,IAAI,CAACC,cAAc,EAAE,CAEpB,KACI;IACD,MAAMG,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,IAAI,EAAEC,IAAI,EAAE;IAC5C,OAAOC,iBAAiB,CAACN,cAAc,EAAE;MACrCO,UAAU,EAAER,QAAQ,CAACQ,UAAU;MAC/BC,OAAO,EAAET,QAAQ,CAACS,OAAO;MACzBJ,IAAI,EAAED;IAClB,CAAS,CAAC;EACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMD,iBAAiB,GAAIH,QAAQ,IAAK;EACpC,IAAIU,eAAe;EACnB,MAAMC,SAAS,GAAG,IAAIC,KAAK,CAACZ,QAAQ,CAACK,IAAI,EAAE;IACvCQ,GAAGA,CAACC,MAAM,EAAEC,IAAI,EAAEC,QAAQ,EAAE;MACxB,IAAID,IAAI,KAAK,MAAM,EAAE;QACjC;QACgB,OAAO,YAAY;UACf,IAAI,CAACL,eAAe,EAAE;YAClBA,eAAe,GAAGI,MAAM,CAACR,IAAI,EAAE;UACvD;UACoB,IAAI;YACA,OAAOW,IAAI,CAACC,KAAK,CAAC,MAAMR,eAAe,CAAC;UAChE,CAAqB,CACD,OAAOS,KAAK,EAAE;YAClC;YACA;YACwB,OAAO,EAAE;UACjC;QACA,CAAiB;MACjB,CAAa,MACI,IAAIJ,IAAI,KAAK,MAAM,EAAE;QACtC;QACgB,OAAO,YAAY;UACf,IAAI,CAACL,eAAe,EAAE;YAClBA,eAAe,GAAGI,MAAM,CAACR,IAAI,EAAE;UACvD;UACoB,OAAOI,eAAe;QAC1C,CAAiB;MACjB,CAAa,MACI;QACD,OAAOU,OAAO,CAACP,GAAG,CAACC,MAAM,EAAEC,IAAI,EAAEC,QAAQ,CAAC;MAC1D;IACA;EACA,CAAK,CAAC;EACF,MAAMK,aAAa,GAAG,IAAIT,KAAK,CAACZ,QAAQ,EAAE;IACtCa,GAAGA,CAACC,MAAM,EAAEC,IAAI,EAAEC,QAAQ,EAAE;MACxB,IAAID,IAAI,KAAK,MAAM,EAAE;QACjB,OAAOJ,SAAS;MAChC,CAAa,MACI;QACD,OAAOS,OAAO,CAACP,GAAG,CAACC,MAAM,EAAEC,IAAI,EAAEC,QAAQ,CAAC;MAC1D;IACA;EACA,CAAK,CAAC;EACF,OAAOK,aAAa;AACxB,CAAC;AACD;AACA;AACA;AACA,MAAMd,iBAAiB,GAAGA,CAACY,KAAK,EAAEnB,QAAQ,KAAK;EAC3C,MAAMsB,YAAY,GAAG,IAAIC,YAAY,CAAC;IAClCC,IAAI,EAAEL,KAAK,EAAEK,IAAI;IACjBC,OAAO,EAAEN,KAAK,CAACM,OAAO;IACtBC,eAAe,EAAEP,KAAK;IACtBnB;EACR,CAAK,CAAC;EACN;EACI,OAAO2B,MAAM,CAACC,MAAM,CAACN,YAAY,EAAE;IAAEO,SAAS,EAAEV,KAAK,CAACU;EAAS,CAAE,CAAC;AACtE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}