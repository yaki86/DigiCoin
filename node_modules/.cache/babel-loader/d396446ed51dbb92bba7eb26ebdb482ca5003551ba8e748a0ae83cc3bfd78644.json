{"ast":null,"code":"import { AuthAction } from '@aws-amplify/core/internals/utils';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../../../providers/cognito/types/errors.mjs';\nimport { createRespondToAuthChallengeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { getUserContextData } from '../../../providers/cognito/utils/userContextData.mjs';\nimport { setActiveSignInUsername } from '../../../providers/cognito/utils/signInHelpers.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Handles the SELECT_CHALLENGE response specifically for Password authentication.\n * This function combines the SELECT_CHALLENGE flow with standard password authentication.\n *\n * @param {string} username - The username for authentication\n * @param {string} password - The user's password\n * @param {ClientMetadata} [clientMetadata] - Optional metadata to be sent with auth requests\n * @param {CognitoUserPoolConfig} config - Cognito User Pool configuration\n * @param {string} session - The current authentication session token\n *\n * @returns {Promise<RespondToAuthChallengeCommandOutput>} The challenge response\n */\nasync function handleSelectChallengeWithPassword(username, password, clientMetadata, config, session) {\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = config;\n  const authParameters = {\n    ANSWER: 'PASSWORD',\n    USERNAME: username,\n    PASSWORD: password\n  };\n  const userContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const respondToAuthChallenge = createRespondToAuthChallengeClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const response = await respondToAuthChallenge({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)\n  }, {\n    ChallengeName: 'SELECT_CHALLENGE',\n    ChallengeResponses: authParameters,\n    ClientId: userPoolClientId,\n    ClientMetadata: clientMetadata,\n    Session: session,\n    UserContextData: userContextData\n  });\n  const activeUsername = response.ChallengeParameters?.USERNAME ?? username;\n  setActiveSignInUsername(activeUsername);\n  return response;\n}\nexport { handleSelectChallengeWithPassword };","map":{"version":3,"names":["handleSelectChallengeWithPassword","username","password","clientMetadata","config","session","userPoolId","userPoolClientId","userPoolEndpoint","authParameters","ANSWER","USERNAME","PASSWORD","userContextData","getUserContextData","respondToAuthChallenge","createRespondToAuthChallengeClient","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","response","region","getRegionFromUserPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","ConfirmSignIn","ChallengeName","ChallengeResponses","ClientId","ClientMetadata","Session","UserContextData","activeUsername","ChallengeParameters","setActiveSignInUsername"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/auth/src/client/flows/userAuth/handleSelectChallengeWithPassword.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AuthAction } from '@aws-amplify/core/internals/utils';\nimport { createRespondToAuthChallengeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../../../providers/cognito/factories';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { getUserContextData } from '../../../providers/cognito/utils/userContextData';\nimport { setActiveSignInUsername } from '../../../providers/cognito/utils/signInHelpers';\n/**\n * Handles the SELECT_CHALLENGE response specifically for Password authentication.\n * This function combines the SELECT_CHALLENGE flow with standard password authentication.\n *\n * @param {string} username - The username for authentication\n * @param {string} password - The user's password\n * @param {ClientMetadata} [clientMetadata] - Optional metadata to be sent with auth requests\n * @param {CognitoUserPoolConfig} config - Cognito User Pool configuration\n * @param {string} session - The current authentication session token\n *\n * @returns {Promise<RespondToAuthChallengeCommandOutput>} The challenge response\n */\nexport async function handleSelectChallengeWithPassword(username, password, clientMetadata, config, session) {\n    const { userPoolId, userPoolClientId, userPoolEndpoint } = config;\n    const authParameters = {\n        ANSWER: 'PASSWORD',\n        USERNAME: username,\n        PASSWORD: password,\n    };\n    const userContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const respondToAuthChallenge = createRespondToAuthChallengeClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const response = await respondToAuthChallenge({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn),\n    }, {\n        ChallengeName: 'SELECT_CHALLENGE',\n        ChallengeResponses: authParameters,\n        ClientId: userPoolClientId,\n        ClientMetadata: clientMetadata,\n        Session: session,\n        UserContextData: userContextData,\n    });\n    const activeUsername = response.ChallengeParameters?.USERNAME ?? username;\n    setActiveSignInUsername(activeUsername);\n    return response;\n}\n"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,iCAAiCA,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,cAAc,EAAEC,MAAM,EAAEC,OAAO,EAAE;EACzG,MAAM;IAAEC,UAAU;IAAEC,gBAAgB;IAAEC;EAAgB,CAAE,GAAGJ,MAAM;EACjE,MAAMK,cAAc,GAAG;IACnBC,MAAM,EAAE,UAAU;IAClBC,QAAQ,EAAEV,QAAQ;IAClBW,QAAQ,EAAEV;EAClB,CAAK;EACD,MAAMW,eAAe,GAAGC,kBAAkB,CAAC;IACvCb,QAAQ;IACRK,UAAU;IACVC;EACR,CAAK,CAAC;EACF,MAAMQ,sBAAsB,GAAGC,kCAAkC,CAAC;IAC9DC,gBAAgB,EAAEC,qCAAqC,CAAC;MACpDC,gBAAgB,EAAEX;IAC9B,CAAS;EACT,CAAK,CAAC;EACF,MAAMY,QAAQ,GAAG,MAAML,sBAAsB,CAAC;IAC1CM,MAAM,EAAEC,uBAAuB,CAAChB,UAAU,CAAC;IAC3CiB,cAAc,EAAEC,qBAAqB,CAACC,UAAU,CAACC,aAAa;EACtE,CAAK,EAAE;IACCC,aAAa,EAAE,kBAAkB;IACjCC,kBAAkB,EAAEnB,cAAc;IAClCoB,QAAQ,EAAEtB,gBAAgB;IAC1BuB,cAAc,EAAE3B,cAAc;IAC9B4B,OAAO,EAAE1B,OAAO;IAChB2B,eAAe,EAAEnB;EACzB,CAAK,CAAC;EACF,MAAMoB,cAAc,GAAGb,QAAQ,CAACc,mBAAmB,EAAEvB,QAAQ,IAAIV,QAAQ;EACzEkC,uBAAuB,CAACF,cAAc,CAAC;EACvC,OAAOb,QAAQ;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}