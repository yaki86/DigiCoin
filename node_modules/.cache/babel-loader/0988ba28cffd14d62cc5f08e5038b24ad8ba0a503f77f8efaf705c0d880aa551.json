{"ast":null,"code":"export { AMPLIFY_SYMBOL } from '@aws-amplify/core/internals/utils';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst MAX_DELAY_MS = 5000;\nconst NON_RETRYABLE_CODES = [400, 401, 403];\nconst NON_RETRYABLE_ERROR_TYPES = ['BadRequestException', 'UnauthorizedException'];\nconst CONNECTION_STATE_CHANGE = 'ConnectionStateChange';\nvar MESSAGE_TYPES;\n(function (MESSAGE_TYPES) {\n  /**\n   * Client -> Server message.\n   * This message type is the first message after handshake and this will initialize AWS AppSync RealTime communication\n   */\n  MESSAGE_TYPES[\"GQL_CONNECTION_INIT\"] = \"connection_init\";\n  /**\n   * Server -> Client message\n   * This message type is in case there is an issue with AWS AppSync RealTime when establishing connection\n   */\n  MESSAGE_TYPES[\"GQL_CONNECTION_ERROR\"] = \"connection_error\";\n  /**\n   * Server -> Client message.\n   * This message type is for the ack response from AWS AppSync RealTime for GQL_CONNECTION_INIT message\n   */\n  MESSAGE_TYPES[\"GQL_CONNECTION_ACK\"] = \"connection_ack\";\n  /**\n   * Client -> Server message.\n   * This message type is for register subscriptions with AWS AppSync RealTime\n   */\n  MESSAGE_TYPES[\"GQL_START\"] = \"start\";\n  /**\n   * Server -> Client message.\n   * This message type is for the ack response from AWS AppSync RealTime for GQL_START message\n   */\n  MESSAGE_TYPES[\"GQL_START_ACK\"] = \"start_ack\";\n  /**\n   * Server -> Client message.\n   * This message type is for subscription message from AWS AppSync RealTime or Events\n   */\n  MESSAGE_TYPES[\"DATA\"] = \"data\";\n  /**\n   * Server -> Client message.\n   * This message type helps the client to know is still receiving messages from AWS AppSync RealTime\n   */\n  MESSAGE_TYPES[\"GQL_CONNECTION_KEEP_ALIVE\"] = \"ka\";\n  /**\n   * Client -> Server message.\n   * This message type is for unregister subscriptions with AWS AppSync RealTime\n   */\n  MESSAGE_TYPES[\"GQL_STOP\"] = \"stop\";\n  /**\n   * Server -> Client message.\n   * This message type is for the ack response from AWS AppSync RealTime for GQL_STOP message\n   */\n  MESSAGE_TYPES[\"GQL_COMPLETE\"] = \"complete\";\n  /**\n   * Server -> Client message.\n   * This message type is for sending error messages from AWS AppSync RealTime to the client\n   */\n  MESSAGE_TYPES[\"GQL_ERROR\"] = \"error\";\n  /**\n   * Client -> Server message.\n   * This message type is for registering subscriptions with Events\n   */\n  MESSAGE_TYPES[\"EVENT_SUBSCRIBE\"] = \"subscribe\";\n  /**\n   * Client -> Server message.\n   * This message type is for publishing a message with Events\n   */\n  MESSAGE_TYPES[\"EVENT_PUBLISH\"] = \"publish\";\n  /**\n   * Server -> Client message.\n   * Server acknowledges successful subscription\n   */\n  MESSAGE_TYPES[\"EVENT_SUBSCRIBE_ACK\"] = \"subscribe_success\";\n  /**\n   * Server -> Client message.\n   * Server acknowledges successful publish\n   */\n  MESSAGE_TYPES[\"EVENT_PUBLISH_ACK\"] = \"publish_success\";\n  /**\n   * Client -> Server message.\n   * This message type is for unregister subscriptions with AWS AppSync RealTime\n   */\n  MESSAGE_TYPES[\"EVENT_STOP\"] = \"unsubscribe\";\n  /**\n   * Server -> Client message.\n   * This is the ack response from AWS AppSync Events to EVENT_STOP message\n   */\n  MESSAGE_TYPES[\"EVENT_COMPLETE\"] = \"unsubscribe_success\";\n})(MESSAGE_TYPES || (MESSAGE_TYPES = {}));\nvar SUBSCRIPTION_STATUS;\n(function (SUBSCRIPTION_STATUS) {\n  SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"PENDING\"] = 0] = \"PENDING\";\n  SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"CONNECTED\"] = 1] = \"CONNECTED\";\n  SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"FAILED\"] = 2] = \"FAILED\";\n})(SUBSCRIPTION_STATUS || (SUBSCRIPTION_STATUS = {}));\nvar SOCKET_STATUS;\n(function (SOCKET_STATUS) {\n  SOCKET_STATUS[SOCKET_STATUS[\"CLOSED\"] = 0] = \"CLOSED\";\n  SOCKET_STATUS[SOCKET_STATUS[\"READY\"] = 1] = \"READY\";\n  SOCKET_STATUS[SOCKET_STATUS[\"CONNECTING\"] = 2] = \"CONNECTING\";\n})(SOCKET_STATUS || (SOCKET_STATUS = {}));\nconst AWS_APPSYNC_REALTIME_HEADERS = {\n  accept: 'application/json, text/javascript',\n  'content-encoding': 'amz-1.0',\n  'content-type': 'application/json; charset=UTF-8'\n};\n/**\n * Time in milleseconds to wait for GQL_CONNECTION_INIT message\n */\nconst CONNECTION_INIT_TIMEOUT = 15000;\n/**\n * Time in milleseconds to wait for GQL_START_ACK message\n */\nconst START_ACK_TIMEOUT = 15000;\n/**\n * Default Time in milleseconds to wait for GQL_CONNECTION_KEEP_ALIVE message\n */\nconst DEFAULT_KEEP_ALIVE_TIMEOUT = 5 * 60 * 1000;\n/**\n * Default Time in milleseconds to alert for missed GQL_CONNECTION_KEEP_ALIVE message\n */\nconst DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT = 65 * 1000;\n/**\n * Default delay time in milleseconds between when reconnect is triggered vs when it is attempted\n */\nconst RECONNECT_DELAY = 5 * 1000;\n/**\n * Default interval time in milleseconds between when reconnect is re-attempted\n */\nconst RECONNECT_INTERVAL = 60 * 1000;\nexport { AWS_APPSYNC_REALTIME_HEADERS, CONNECTION_INIT_TIMEOUT, CONNECTION_STATE_CHANGE, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT, DEFAULT_KEEP_ALIVE_TIMEOUT, MAX_DELAY_MS, MESSAGE_TYPES, NON_RETRYABLE_CODES, NON_RETRYABLE_ERROR_TYPES, RECONNECT_DELAY, RECONNECT_INTERVAL, SOCKET_STATUS, START_ACK_TIMEOUT, SUBSCRIPTION_STATUS };","map":{"version":3,"names":["MAX_DELAY_MS","NON_RETRYABLE_CODES","NON_RETRYABLE_ERROR_TYPES","CONNECTION_STATE_CHANGE","MESSAGE_TYPES","SUBSCRIPTION_STATUS","SOCKET_STATUS","AWS_APPSYNC_REALTIME_HEADERS","accept","CONNECTION_INIT_TIMEOUT","START_ACK_TIMEOUT","DEFAULT_KEEP_ALIVE_TIMEOUT","DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT","RECONNECT_DELAY","RECONNECT_INTERVAL"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/api-graphql/src/Providers/constants.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport { AMPLIFY_SYMBOL } from '@aws-amplify/core/internals/utils';\nexport const MAX_DELAY_MS = 5000;\nexport const NON_RETRYABLE_CODES = [400, 401, 403];\nexport const NON_RETRYABLE_ERROR_TYPES = [\n    'BadRequestException',\n    'UnauthorizedException',\n];\nexport const CONNECTION_STATE_CHANGE = 'ConnectionStateChange';\nexport var MESSAGE_TYPES;\n(function (MESSAGE_TYPES) {\n    /**\n     * Client -> Server message.\n     * This message type is the first message after handshake and this will initialize AWS AppSync RealTime communication\n     */\n    MESSAGE_TYPES[\"GQL_CONNECTION_INIT\"] = \"connection_init\";\n    /**\n     * Server -> Client message\n     * This message type is in case there is an issue with AWS AppSync RealTime when establishing connection\n     */\n    MESSAGE_TYPES[\"GQL_CONNECTION_ERROR\"] = \"connection_error\";\n    /**\n     * Server -> Client message.\n     * This message type is for the ack response from AWS AppSync RealTime for GQL_CONNECTION_INIT message\n     */\n    MESSAGE_TYPES[\"GQL_CONNECTION_ACK\"] = \"connection_ack\";\n    /**\n     * Client -> Server message.\n     * This message type is for register subscriptions with AWS AppSync RealTime\n     */\n    MESSAGE_TYPES[\"GQL_START\"] = \"start\";\n    /**\n     * Server -> Client message.\n     * This message type is for the ack response from AWS AppSync RealTime for GQL_START message\n     */\n    MESSAGE_TYPES[\"GQL_START_ACK\"] = \"start_ack\";\n    /**\n     * Server -> Client message.\n     * This message type is for subscription message from AWS AppSync RealTime or Events\n     */\n    MESSAGE_TYPES[\"DATA\"] = \"data\";\n    /**\n     * Server -> Client message.\n     * This message type helps the client to know is still receiving messages from AWS AppSync RealTime\n     */\n    MESSAGE_TYPES[\"GQL_CONNECTION_KEEP_ALIVE\"] = \"ka\";\n    /**\n     * Client -> Server message.\n     * This message type is for unregister subscriptions with AWS AppSync RealTime\n     */\n    MESSAGE_TYPES[\"GQL_STOP\"] = \"stop\";\n    /**\n     * Server -> Client message.\n     * This message type is for the ack response from AWS AppSync RealTime for GQL_STOP message\n     */\n    MESSAGE_TYPES[\"GQL_COMPLETE\"] = \"complete\";\n    /**\n     * Server -> Client message.\n     * This message type is for sending error messages from AWS AppSync RealTime to the client\n     */\n    MESSAGE_TYPES[\"GQL_ERROR\"] = \"error\";\n    /**\n     * Client -> Server message.\n     * This message type is for registering subscriptions with Events\n     */\n    MESSAGE_TYPES[\"EVENT_SUBSCRIBE\"] = \"subscribe\";\n    /**\n     * Client -> Server message.\n     * This message type is for publishing a message with Events\n     */\n    MESSAGE_TYPES[\"EVENT_PUBLISH\"] = \"publish\";\n    /**\n     * Server -> Client message.\n     * Server acknowledges successful subscription\n     */\n    MESSAGE_TYPES[\"EVENT_SUBSCRIBE_ACK\"] = \"subscribe_success\";\n    /**\n     * Server -> Client message.\n     * Server acknowledges successful publish\n     */\n    MESSAGE_TYPES[\"EVENT_PUBLISH_ACK\"] = \"publish_success\";\n    /**\n     * Client -> Server message.\n     * This message type is for unregister subscriptions with AWS AppSync RealTime\n     */\n    MESSAGE_TYPES[\"EVENT_STOP\"] = \"unsubscribe\";\n    /**\n     * Server -> Client message.\n     * This is the ack response from AWS AppSync Events to EVENT_STOP message\n     */\n    MESSAGE_TYPES[\"EVENT_COMPLETE\"] = \"unsubscribe_success\";\n})(MESSAGE_TYPES || (MESSAGE_TYPES = {}));\nexport var SUBSCRIPTION_STATUS;\n(function (SUBSCRIPTION_STATUS) {\n    SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"PENDING\"] = 0] = \"PENDING\";\n    SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"CONNECTED\"] = 1] = \"CONNECTED\";\n    SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"FAILED\"] = 2] = \"FAILED\";\n})(SUBSCRIPTION_STATUS || (SUBSCRIPTION_STATUS = {}));\nexport var SOCKET_STATUS;\n(function (SOCKET_STATUS) {\n    SOCKET_STATUS[SOCKET_STATUS[\"CLOSED\"] = 0] = \"CLOSED\";\n    SOCKET_STATUS[SOCKET_STATUS[\"READY\"] = 1] = \"READY\";\n    SOCKET_STATUS[SOCKET_STATUS[\"CONNECTING\"] = 2] = \"CONNECTING\";\n})(SOCKET_STATUS || (SOCKET_STATUS = {}));\nexport const AWS_APPSYNC_REALTIME_HEADERS = {\n    accept: 'application/json, text/javascript',\n    'content-encoding': 'amz-1.0',\n    'content-type': 'application/json; charset=UTF-8',\n};\n/**\n * Time in milleseconds to wait for GQL_CONNECTION_INIT message\n */\nexport const CONNECTION_INIT_TIMEOUT = 15000;\n/**\n * Time in milleseconds to wait for GQL_START_ACK message\n */\nexport const START_ACK_TIMEOUT = 15000;\n/**\n * Default Time in milleseconds to wait for GQL_CONNECTION_KEEP_ALIVE message\n */\nexport const DEFAULT_KEEP_ALIVE_TIMEOUT = 5 * 60 * 1000;\n/**\n * Default Time in milleseconds to alert for missed GQL_CONNECTION_KEEP_ALIVE message\n */\nexport const DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT = 65 * 1000;\n/**\n * Default delay time in milleseconds between when reconnect is triggered vs when it is attempted\n */\nexport const RECONNECT_DELAY = 5 * 1000;\n/**\n * Default interval time in milleseconds between when reconnect is re-attempted\n */\nexport const RECONNECT_INTERVAL = 60 * 1000;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}