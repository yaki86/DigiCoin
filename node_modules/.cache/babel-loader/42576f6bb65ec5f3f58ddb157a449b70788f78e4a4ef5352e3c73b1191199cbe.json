{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Determines if IAM authentication should be applied for a GraphQL request.\n *\n * This function checks the `headers` of the HTTP request to determine if IAM authentication\n * is applicable. IAM authentication is considered applicable if there is no `authorization`\n * header, no `x-api-key` header, and `signingServiceInfo` is provided.\n *\n * @param request - The HTTP request object containing headers.\n * @param signingServiceInfo - Optional signing service information,\n * including service and region.\n * @returns A boolean `true` if IAM authentication should be applied.\n *\n * @internal\n */\nconst isIamAuthApplicableForGraphQL = (_ref, signingServiceInfo) => {\n  let {\n    headers\n  } = _ref;\n  return !headers.authorization && !headers['x-api-key'] && !!signingServiceInfo;\n};\n/**\n * Determines if IAM authentication should be applied for a REST request.\n *\n * This function checks the `headers` of the HTTP request to determine if IAM authentication\n * is applicable. IAM authentication is considered applicable if there is no `authorization`\n * header and `signingServiceInfo` is provided.\n *\n * @param request - The HTTP request object containing headers.\n * @param signingServiceInfo - Optional signing service information,\n * including service and region.\n * @returns A boolean `true` if IAM authentication should be applied.\n *\n * @internal\n */\nconst isIamAuthApplicableForRest = (_ref2, signingServiceInfo) => {\n  let {\n    headers\n  } = _ref2;\n  return !headers.authorization && !!signingServiceInfo;\n};\nexport { isIamAuthApplicableForGraphQL, isIamAuthApplicableForRest };","map":{"version":3,"names":["isIamAuthApplicableForGraphQL","_ref","signingServiceInfo","headers","authorization","isIamAuthApplicableForRest","_ref2"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/api-rest/src/utils/isIamAuthApplicable.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Determines if IAM authentication should be applied for a GraphQL request.\n *\n * This function checks the `headers` of the HTTP request to determine if IAM authentication\n * is applicable. IAM authentication is considered applicable if there is no `authorization`\n * header, no `x-api-key` header, and `signingServiceInfo` is provided.\n *\n * @param request - The HTTP request object containing headers.\n * @param signingServiceInfo - Optional signing service information,\n * including service and region.\n * @returns A boolean `true` if IAM authentication should be applied.\n *\n * @internal\n */\nexport const isIamAuthApplicableForGraphQL = ({ headers }, signingServiceInfo) => !headers.authorization && !headers['x-api-key'] && !!signingServiceInfo;\n/**\n * Determines if IAM authentication should be applied for a REST request.\n *\n * This function checks the `headers` of the HTTP request to determine if IAM authentication\n * is applicable. IAM authentication is considered applicable if there is no `authorization`\n * header and `signingServiceInfo` is provided.\n *\n * @param request - The HTTP request object containing headers.\n * @param signingServiceInfo - Optional signing service information,\n * including service and region.\n * @returns A boolean `true` if IAM authentication should be applied.\n *\n * @internal\n */\nexport const isIamAuthApplicableForRest = ({ headers }, signingServiceInfo) => !headers.authorization && !!signingServiceInfo;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,6BAA6B,GAAGA,CAAAC,IAAA,EAAcC,kBAAkB;EAAA,IAA/B;IAAEC;EAAO,CAAE,GAAAF,IAAA;EAAA,OAAyB,CAACE,OAAO,CAACC,aAAa,IAAI,CAACD,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAACD,kBAAA;AAAA;AACvI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACG,0BAA0B,GAAGA,CAAAC,KAAA,EAAcJ,kBAAkB;EAAA,IAA/B;IAAEC;EAAO,CAAE,GAAAG,KAAA;EAAA,OAAyB,CAACH,OAAO,CAACC,aAAa,IAAI,CAAC,CAACF,kBAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}