{"ast":null,"code":"import { DEFAULT_REST_IAM_SIGNING_SERVICE, DEFAULT_IAM_SIGNING_REGION, APIG_HOSTNAME_PATTERN } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Infer the signing service and region from the given URL, and for REST API only, from the Amplify configuration.\n * It supports raw API Gateway endpoint and AppSync endpoint.\n *\n * @internal\n */\nconst parseSigningInfo = (url, restApiOptions) => {\n  const {\n    service: signingService = DEFAULT_REST_IAM_SIGNING_SERVICE,\n    region: signingRegion = DEFAULT_IAM_SIGNING_REGION\n  } = restApiOptions?.amplify.getConfig()?.API?.REST?.[restApiOptions?.apiName] ?? {};\n  const {\n    hostname\n  } = url;\n  const [, service, region] = APIG_HOSTNAME_PATTERN.exec(hostname) ?? [];\n  if (service === DEFAULT_REST_IAM_SIGNING_SERVICE) {\n    // The configured endpoint is an API Gateway endpoint\n    // @see: https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-call-api.html\n    return {\n      service,\n      region: region ?? signingRegion\n    };\n  } else if (service === 'appsync-api') {\n    // AppSync endpoint is internally supported because GraphQL operation will send request using POST handler.\n    // example: https://xxxx.appsync-api.us-east-1.amazonaws.com/graphql\n    return {\n      service: 'appsync',\n      region: region ?? signingRegion\n    };\n  } else {\n    return {\n      service: signingService,\n      region: signingRegion\n    };\n  }\n};\nexport { parseSigningInfo };","map":{"version":3,"names":["parseSigningInfo","url","restApiOptions","service","signingService","DEFAULT_REST_IAM_SIGNING_SERVICE","region","signingRegion","DEFAULT_IAM_SIGNING_REGION","amplify","getConfig","API","REST","apiName","hostname","APIG_HOSTNAME_PATTERN","exec"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/api-rest/src/utils/parseSigningInfo.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { APIG_HOSTNAME_PATTERN, DEFAULT_IAM_SIGNING_REGION, DEFAULT_REST_IAM_SIGNING_SERVICE, } from './constants';\n/**\n * Infer the signing service and region from the given URL, and for REST API only, from the Amplify configuration.\n * It supports raw API Gateway endpoint and AppSync endpoint.\n *\n * @internal\n */\nexport const parseSigningInfo = (url, restApiOptions) => {\n    const { service: signingService = DEFAULT_REST_IAM_SIGNING_SERVICE, region: signingRegion = DEFAULT_IAM_SIGNING_REGION, } = restApiOptions?.amplify.getConfig()?.API?.REST?.[restApiOptions?.apiName] ??\n        {};\n    const { hostname } = url;\n    const [, service, region] = APIG_HOSTNAME_PATTERN.exec(hostname) ?? [];\n    if (service === DEFAULT_REST_IAM_SIGNING_SERVICE) {\n        // The configured endpoint is an API Gateway endpoint\n        // @see: https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-call-api.html\n        return {\n            service,\n            region: region ?? signingRegion,\n        };\n    }\n    else if (service === 'appsync-api') {\n        // AppSync endpoint is internally supported because GraphQL operation will send request using POST handler.\n        // example: https://xxxx.appsync-api.us-east-1.amazonaws.com/graphql\n        return {\n            service: 'appsync',\n            region: region ?? signingRegion,\n        };\n    }\n    else {\n        return {\n            service: signingService,\n            region: signingRegion,\n        };\n    }\n};\n"],"mappings":";;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,gBAAgB,GAAGA,CAACC,GAAG,EAAEC,cAAc,KAAK;EACrD,MAAM;IAAEC,OAAO,EAAEC,cAAc,GAAGC,gCAAgC;IAAEC,MAAM,EAAEC,aAAa,GAAGC;EAA0B,CAAG,GAAGN,cAAc,EAAEO,OAAO,CAACC,SAAS,EAAE,EAAEC,GAAG,EAAEC,IAAI,GAAGV,cAAc,EAAEW,OAAO,CAAC,IACjM,EAAE;EACN,MAAM;IAAEC;EAAQ,CAAE,GAAGb,GAAG;EACxB,MAAM,GAAGE,OAAO,EAAEG,MAAM,CAAC,GAAGS,qBAAqB,CAACC,IAAI,CAACF,QAAQ,CAAC,IAAI,EAAE;EACtE,IAAIX,OAAO,KAAKE,gCAAgC,EAAE;IACtD;IACA;IACQ,OAAO;MACHF,OAAO;MACPG,MAAM,EAAEA,MAAM,IAAIC;IAC9B,CAAS;EACT,CAAK,MACI,IAAIJ,OAAO,KAAK,aAAa,EAAE;IACxC;IACA;IACQ,OAAO;MACHA,OAAO,EAAE,SAAS;MAClBG,MAAM,EAAEA,MAAM,IAAIC;IAC9B,CAAS;EACT,CAAK,MACI;IACD,OAAO;MACHJ,OAAO,EAAEC,cAAc;MACvBE,MAAM,EAAEC;IACpB,CAAS;EACT;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}