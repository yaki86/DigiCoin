{"ast":null,"code":"import { parse, print } from 'graphql';\nimport { catchError } from 'rxjs';\nimport { AmplifyUrl, getAmplifyUserAgent } from '@aws-amplify/core/internals/utils';\nimport { isCancelError } from '@aws-amplify/api-rest';\nimport { post, cancel, updateRequestToBeCancellable } from '@aws-amplify/api-rest/internals';\nimport { AWSAppSyncRealTimeProvider } from '../Providers/AWSAppSyncRealTimeProvider/index.mjs';\nimport { resolveConfig } from '../utils/resolveConfig.mjs';\nimport { resolveLibraryOptions } from '../utils/resolveLibraryOptions.mjs';\nimport { repackageUnauthorizedError } from '../utils/errors/repackageAuthError.mjs';\nimport { NO_ENDPOINT } from '../utils/errors/constants.mjs';\nimport { GraphQLApiError } from '../utils/errors/GraphQLApiError.mjs';\nimport '../utils/errors/validation.mjs';\nimport { createGraphQLResultWithError } from '../utils/errors/createGraphQLResultWithError.mjs';\nimport { isGraphQLResponseWithErrors } from './utils/runtimeTypeGuards/isGraphQLResponseWithErrors.mjs';\nimport { headerBasedAuth } from './graphqlAuth.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst USER_AGENT_HEADER = 'x-amz-user-agent';\nconst isAmplifyInstance = amplify => {\n  return typeof amplify !== 'function';\n};\n/**\n * Export Cloud Logic APIs\n */\nclass InternalGraphQLAPIClass {\n  constructor() {\n    /**\n     * @private\n     */\n    this.appSyncRealTime = new Map();\n    this._api = {\n      post,\n      cancelREST: cancel,\n      isCancelErrorREST: isCancelError,\n      updateRequestToBeCancellable\n    };\n  }\n  getModuleName() {\n    return 'InternalGraphQLAPI';\n  }\n  /**\n   * to get the operation type\n   * @param operation\n   */\n  getGraphqlOperationType(operation) {\n    const doc = parse(operation);\n    const definitions = doc.definitions;\n    const [{\n      operation: operationType\n    }] = definitions;\n    return operationType;\n  }\n  /**\n   * Executes a GraphQL operation\n   *\n   * @param options - GraphQL Options\n   * @param [additionalHeaders] - headers to merge in after any `libraryConfigHeaders` set in the config\n   * @returns An Observable if the query is a subscription query, else a promise of the graphql result.\n   */\n  graphql(amplify, _ref, additionalHeaders, customUserAgentDetails) {\n    let {\n      query: paramQuery,\n      variables = {},\n      authMode,\n      authToken,\n      endpoint,\n      apiKey\n    } = _ref;\n    const query = typeof paramQuery === 'string' ? parse(paramQuery) : parse(print(paramQuery));\n    const [operationDef = {}] = query.definitions.filter(def => def.kind === 'OperationDefinition');\n    const {\n      operation: operationType\n    } = operationDef;\n    const headers = additionalHeaders || {};\n    switch (operationType) {\n      case 'query':\n      case 'mutation':\n        {\n          const abortController = new AbortController();\n          let responsePromise;\n          if (isAmplifyInstance(amplify)) {\n            responsePromise = this._graphql(amplify, {\n              query,\n              variables,\n              authMode,\n              apiKey,\n              endpoint\n            }, headers, abortController, customUserAgentDetails, authToken);\n          } else {\n            // NOTE: this wrapper function must be await-able so the Amplify server context manager can\n            // destroy the context only after it completes\n            const wrapper = async amplifyInstance => {\n              const result = await this._graphql(amplifyInstance, {\n                query,\n                variables,\n                authMode,\n                apiKey,\n                endpoint\n              }, headers, abortController, customUserAgentDetails, authToken);\n              return result;\n            };\n            responsePromise = amplify(wrapper);\n          }\n          this._api.updateRequestToBeCancellable(responsePromise, abortController);\n          return responsePromise;\n        }\n      case 'subscription':\n        return this._graphqlSubscribe(amplify, {\n          query,\n          variables,\n          authMode,\n          apiKey,\n          endpoint\n        }, headers, customUserAgentDetails, authToken);\n      default:\n        throw new Error(`invalid operation type: ${operationType}`);\n    }\n  }\n  async _graphql(amplify, _ref2) {\n    let {\n      query,\n      variables,\n      authMode: authModeOverride,\n      endpoint: endpointOverride,\n      apiKey: apiKeyOverride\n    } = _ref2;\n    let additionalHeaders = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let abortController = arguments.length > 3 ? arguments[3] : undefined;\n    let customUserAgentDetails = arguments.length > 4 ? arguments[4] : undefined;\n    let authToken = arguments.length > 5 ? arguments[5] : undefined;\n    const {\n      apiKey,\n      region,\n      endpoint: appSyncGraphqlEndpoint,\n      customEndpoint,\n      customEndpointRegion,\n      defaultAuthMode\n    } = resolveConfig(amplify);\n    const initialAuthMode = authModeOverride || defaultAuthMode || 'iam';\n    // identityPool is an alias for iam. TODO: remove 'iam' in v7\n    const authMode = initialAuthMode === 'identityPool' ? 'iam' : initialAuthMode;\n    /**\n     * Retrieve library options from Amplify configuration.\n     * `customHeaders` here are from the Amplify configuration options,\n     * and are for non-AppSync endpoints only. These are *not* the same as\n     * `additionalHeaders`, which are custom headers that are either 1)\n     * included when configuring the API client or 2) passed along with\n     * individual requests.\n     */\n    const {\n      headers: customHeaders,\n      withCredentials\n    } = resolveLibraryOptions(amplify);\n    /**\n     * Client or request-specific custom headers that may or may not be\n     * returned by a function:\n     */\n    let additionalCustomHeaders;\n    if (typeof additionalHeaders === 'function') {\n      const requestOptions = {\n        method: 'POST',\n        url: new AmplifyUrl(endpointOverride || customEndpoint || appSyncGraphqlEndpoint || '').toString(),\n        queryString: print(query)\n      };\n      additionalCustomHeaders = await additionalHeaders(requestOptions);\n    } else {\n      additionalCustomHeaders = additionalHeaders;\n    }\n    // if an authorization header is set, have the explicit authToken take precedence\n    if (authToken) {\n      additionalCustomHeaders = {\n        ...additionalCustomHeaders,\n        Authorization: authToken\n      };\n    }\n    const authHeaders = await headerBasedAuth(amplify, authMode, apiKeyOverride ?? apiKey, additionalCustomHeaders);\n    const headers = {\n      ...(!customEndpoint && authHeaders),\n      /**\n       * Custom endpoint headers.\n       * If there is both a custom endpoint and custom region present, we get the headers.\n       * If there is a custom endpoint but no region, we return an empty object.\n       * If neither are present, we return an empty object.\n       */\n      ...(customEndpoint && (customEndpointRegion ? authHeaders : {}) || {}),\n      // Custom headers included in Amplify configuration options:\n      ...(customHeaders && (await customHeaders({\n        query: print(query),\n        variables\n      }))),\n      // Custom headers from individual requests or API client configuration:\n      ...additionalCustomHeaders,\n      // User agent headers:\n      ...(!customEndpoint && {\n        [USER_AGENT_HEADER]: getAmplifyUserAgent(customUserAgentDetails)\n      })\n    };\n    const body = {\n      query: print(query),\n      variables: variables || null\n    };\n    let signingServiceInfo;\n    /**\n     * We do not send the signing service info to the REST API under the\n     * following conditions (i.e. it will not sign the request):\n     *   - there is a custom endpoint but no region\n     *   - the auth mode is `none`, or `apiKey`\n     *   - the auth mode is a type other than the types listed below\n     */\n    if (customEndpoint && !customEndpointRegion || authMode !== 'oidc' && authMode !== 'userPool' && authMode !== 'iam' && authMode !== 'lambda') {\n      signingServiceInfo = undefined;\n    } else {\n      signingServiceInfo = {\n        service: !customEndpointRegion ? 'appsync' : 'execute-api',\n        region: !customEndpointRegion ? region : customEndpointRegion\n      };\n    }\n    const endpoint = endpointOverride || customEndpoint || appSyncGraphqlEndpoint;\n    if (!endpoint) {\n      throw createGraphQLResultWithError(new GraphQLApiError(NO_ENDPOINT));\n    }\n    let response;\n    try {\n      // \t// // See the inline doc of the REST `post()` API for possible errors to be thrown.\n      // \t// // As these errors are catastrophic they should be caught and handled by GraphQL\n      // \t// // API consumers.\n      const {\n        body: responseBody\n      } = await this._api.post(amplify, {\n        url: new AmplifyUrl(endpoint),\n        options: {\n          headers,\n          body,\n          signingServiceInfo,\n          withCredentials\n        },\n        abortController\n      });\n      response = await responseBody.json();\n    } catch (error) {\n      if (this.isCancelError(error)) {\n        throw error;\n      }\n      response = createGraphQLResultWithError(error);\n    }\n    if (isGraphQLResponseWithErrors(response)) {\n      throw repackageUnauthorizedError(response);\n    }\n    return response;\n  }\n  /**\n   * Checks to see if an error thrown is from an api request cancellation\n   * @param {any} error - Any error\n   * @return {boolean} - A boolean indicating if the error was from an api request cancellation\n   */\n  isCancelError(error) {\n    return this._api.isCancelErrorREST(error);\n  }\n  /**\n   * Cancels an inflight request. Only applicable for graphql queries and mutations\n   * @param {any} request - request to cancel\n   * @returns - A boolean indicating if the request was cancelled\n   */\n  cancel(request, message) {\n    return this._api.cancelREST(request, message);\n  }\n  _graphqlSubscribe(amplify, _ref3) {\n    let {\n      query,\n      variables,\n      authMode: authModeOverride,\n      apiKey: apiKeyOverride,\n      endpoint\n    } = _ref3;\n    let additionalHeaders = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let customUserAgentDetails = arguments.length > 3 ? arguments[3] : undefined;\n    let authToken = arguments.length > 4 ? arguments[4] : undefined;\n    const config = resolveConfig(amplify);\n    const initialAuthMode = authModeOverride || config?.defaultAuthMode || 'iam';\n    // identityPool is an alias for iam. TODO: remove 'iam' in v7\n    const authMode = initialAuthMode === 'identityPool' ? 'iam' : initialAuthMode;\n    /**\n     * Retrieve library options from Amplify configuration.\n     * `libraryConfigHeaders` are from the Amplify configuration options,\n     * and will not be overwritten by other custom headers. These are *not*\n     * the same as `additionalHeaders`, which are custom headers that are\n     * either 1)included when configuring the API client or 2) passed along\n     * with individual requests.\n     */\n    const {\n      headers: libraryConfigHeaders\n    } = resolveLibraryOptions(amplify);\n    const appSyncGraphqlEndpoint = endpoint ?? config?.endpoint;\n    // TODO: This could probably be an exception. But, lots of tests rely on\n    // attempting to connect to nowhere. So, I'm treating as the opposite of\n    // a Chesterton's fence for now. (A fence I shouldn't build, because I don't\n    // know why somethings depends on its absence!)\n    const memoKey = appSyncGraphqlEndpoint ?? 'none';\n    const realtimeProvider = this.appSyncRealTime.get(memoKey) ?? new AWSAppSyncRealTimeProvider();\n    this.appSyncRealTime.set(memoKey, realtimeProvider);\n    return realtimeProvider.subscribe({\n      query: print(query),\n      variables,\n      appSyncGraphqlEndpoint,\n      region: config?.region,\n      authenticationType: authMode,\n      apiKey: apiKeyOverride ?? config?.apiKey,\n      additionalHeaders,\n      authToken,\n      libraryConfigHeaders\n    }, customUserAgentDetails).pipe(catchError(e => {\n      if (e.errors) {\n        throw repackageUnauthorizedError(e);\n      }\n      throw e;\n    }));\n  }\n}\nconst InternalGraphQLAPI = new InternalGraphQLAPIClass();\nexport { InternalGraphQLAPI, InternalGraphQLAPIClass };","map":{"version":3,"names":["USER_AGENT_HEADER","isAmplifyInstance","amplify","InternalGraphQLAPIClass","constructor","appSyncRealTime","Map","_api","post","cancelREST","cancel","isCancelErrorREST","isCancelError","updateRequestToBeCancellable","getModuleName","getGraphqlOperationType","operation","doc","parse","definitions","operationType","graphql","_ref","additionalHeaders","customUserAgentDetails","query","paramQuery","variables","authMode","authToken","endpoint","apiKey","print","operationDef","filter","def","kind","headers","abortController","AbortController","responsePromise","_graphql","wrapper","amplifyInstance","result","_graphqlSubscribe","Error","_ref2","authModeOverride","endpointOverride","apiKeyOverride","arguments","length","undefined","region","appSyncGraphqlEndpoint","customEndpoint","customEndpointRegion","defaultAuthMode","resolveConfig","initialAuthMode","customHeaders","withCredentials","resolveLibraryOptions","additionalCustomHeaders","requestOptions","method","url","AmplifyUrl","toString","queryString","Authorization","authHeaders","headerBasedAuth","getAmplifyUserAgent","body","signingServiceInfo","service","createGraphQLResultWithError","GraphQLApiError","NO_ENDPOINT","response","responseBody","options","json","error","isGraphQLResponseWithErrors","repackageUnauthorizedError","request","message","_ref3","config","libraryConfigHeaders","memoKey","realtimeProvider","get","AWSAppSyncRealTimeProvider","set","subscribe","authenticationType","pipe","catchError","e","errors","InternalGraphQLAPI"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/api-graphql/src/internals/InternalGraphQLAPI.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parse, print, } from 'graphql';\nimport { catchError } from 'rxjs';\nimport { AmplifyUrl, getAmplifyUserAgent, } from '@aws-amplify/core/internals/utils';\nimport { isCancelError as isCancelErrorREST } from '@aws-amplify/api-rest';\nimport { cancel as cancelREST, post, updateRequestToBeCancellable, } from '@aws-amplify/api-rest/internals';\nimport { AWSAppSyncRealTimeProvider } from '../Providers/AWSAppSyncRealTimeProvider';\nimport { resolveConfig, resolveLibraryOptions } from '../utils';\nimport { repackageUnauthorizedError } from '../utils/errors/repackageAuthError';\nimport { NO_ENDPOINT } from '../utils/errors/constants';\nimport { GraphQLApiError, createGraphQLResultWithError } from '../utils/errors';\nimport { isGraphQLResponseWithErrors } from './utils/runtimeTypeGuards/isGraphQLResponseWithErrors';\nimport { headerBasedAuth } from './graphqlAuth';\nconst USER_AGENT_HEADER = 'x-amz-user-agent';\nconst isAmplifyInstance = (amplify) => {\n    return typeof amplify !== 'function';\n};\n/**\n * Export Cloud Logic APIs\n */\nexport class InternalGraphQLAPIClass {\n    constructor() {\n        /**\n         * @private\n         */\n        this.appSyncRealTime = new Map();\n        this._api = {\n            post,\n            cancelREST,\n            isCancelErrorREST,\n            updateRequestToBeCancellable,\n        };\n    }\n    getModuleName() {\n        return 'InternalGraphQLAPI';\n    }\n    /**\n     * to get the operation type\n     * @param operation\n     */\n    getGraphqlOperationType(operation) {\n        const doc = parse(operation);\n        const definitions = doc.definitions;\n        const [{ operation: operationType }] = definitions;\n        return operationType;\n    }\n    /**\n     * Executes a GraphQL operation\n     *\n     * @param options - GraphQL Options\n     * @param [additionalHeaders] - headers to merge in after any `libraryConfigHeaders` set in the config\n     * @returns An Observable if the query is a subscription query, else a promise of the graphql result.\n     */\n    graphql(amplify, { query: paramQuery, variables = {}, authMode, authToken, endpoint, apiKey, }, additionalHeaders, customUserAgentDetails) {\n        const query = typeof paramQuery === 'string'\n            ? parse(paramQuery)\n            : parse(print(paramQuery));\n        const [operationDef = {}] = query.definitions.filter(def => def.kind === 'OperationDefinition');\n        const { operation: operationType } = operationDef;\n        const headers = additionalHeaders || {};\n        switch (operationType) {\n            case 'query':\n            case 'mutation': {\n                const abortController = new AbortController();\n                let responsePromise;\n                if (isAmplifyInstance(amplify)) {\n                    responsePromise = this._graphql(amplify, { query, variables, authMode, apiKey, endpoint }, headers, abortController, customUserAgentDetails, authToken);\n                }\n                else {\n                    // NOTE: this wrapper function must be await-able so the Amplify server context manager can\n                    // destroy the context only after it completes\n                    const wrapper = async (amplifyInstance) => {\n                        const result = await this._graphql(amplifyInstance, { query, variables, authMode, apiKey, endpoint }, headers, abortController, customUserAgentDetails, authToken);\n                        return result;\n                    };\n                    responsePromise = amplify(wrapper);\n                }\n                this._api.updateRequestToBeCancellable(responsePromise, abortController);\n                return responsePromise;\n            }\n            case 'subscription':\n                return this._graphqlSubscribe(amplify, { query, variables, authMode, apiKey, endpoint }, headers, customUserAgentDetails, authToken);\n            default:\n                throw new Error(`invalid operation type: ${operationType}`);\n        }\n    }\n    async _graphql(amplify, { query, variables, authMode: authModeOverride, endpoint: endpointOverride, apiKey: apiKeyOverride, }, additionalHeaders = {}, abortController, customUserAgentDetails, authToken) {\n        const { apiKey, region, endpoint: appSyncGraphqlEndpoint, customEndpoint, customEndpointRegion, defaultAuthMode, } = resolveConfig(amplify);\n        const initialAuthMode = authModeOverride || defaultAuthMode || 'iam';\n        // identityPool is an alias for iam. TODO: remove 'iam' in v7\n        const authMode = initialAuthMode === 'identityPool' ? 'iam' : initialAuthMode;\n        /**\n         * Retrieve library options from Amplify configuration.\n         * `customHeaders` here are from the Amplify configuration options,\n         * and are for non-AppSync endpoints only. These are *not* the same as\n         * `additionalHeaders`, which are custom headers that are either 1)\n         * included when configuring the API client or 2) passed along with\n         * individual requests.\n         */\n        const { headers: customHeaders, withCredentials } = resolveLibraryOptions(amplify);\n        /**\n         * Client or request-specific custom headers that may or may not be\n         * returned by a function:\n         */\n        let additionalCustomHeaders;\n        if (typeof additionalHeaders === 'function') {\n            const requestOptions = {\n                method: 'POST',\n                url: new AmplifyUrl(endpointOverride || customEndpoint || appSyncGraphqlEndpoint || '').toString(),\n                queryString: print(query),\n            };\n            additionalCustomHeaders = await additionalHeaders(requestOptions);\n        }\n        else {\n            additionalCustomHeaders = additionalHeaders;\n        }\n        // if an authorization header is set, have the explicit authToken take precedence\n        if (authToken) {\n            additionalCustomHeaders = {\n                ...additionalCustomHeaders,\n                Authorization: authToken,\n            };\n        }\n        const authHeaders = await headerBasedAuth(amplify, authMode, apiKeyOverride ?? apiKey, additionalCustomHeaders);\n        const headers = {\n            ...(!customEndpoint && authHeaders),\n            /**\n             * Custom endpoint headers.\n             * If there is both a custom endpoint and custom region present, we get the headers.\n             * If there is a custom endpoint but no region, we return an empty object.\n             * If neither are present, we return an empty object.\n             */\n            ...((customEndpoint && (customEndpointRegion ? authHeaders : {})) || {}),\n            // Custom headers included in Amplify configuration options:\n            ...(customHeaders &&\n                (await customHeaders({\n                    query: print(query),\n                    variables,\n                }))),\n            // Custom headers from individual requests or API client configuration:\n            ...additionalCustomHeaders,\n            // User agent headers:\n            ...(!customEndpoint && {\n                [USER_AGENT_HEADER]: getAmplifyUserAgent(customUserAgentDetails),\n            }),\n        };\n        const body = {\n            query: print(query),\n            variables: variables || null,\n        };\n        let signingServiceInfo;\n        /**\n         * We do not send the signing service info to the REST API under the\n         * following conditions (i.e. it will not sign the request):\n         *   - there is a custom endpoint but no region\n         *   - the auth mode is `none`, or `apiKey`\n         *   - the auth mode is a type other than the types listed below\n         */\n        if ((customEndpoint && !customEndpointRegion) ||\n            (authMode !== 'oidc' &&\n                authMode !== 'userPool' &&\n                authMode !== 'iam' &&\n                authMode !== 'lambda')) {\n            signingServiceInfo = undefined;\n        }\n        else {\n            signingServiceInfo = {\n                service: !customEndpointRegion ? 'appsync' : 'execute-api',\n                region: !customEndpointRegion ? region : customEndpointRegion,\n            };\n        }\n        const endpoint = endpointOverride || customEndpoint || appSyncGraphqlEndpoint;\n        if (!endpoint) {\n            throw createGraphQLResultWithError(new GraphQLApiError(NO_ENDPOINT));\n        }\n        let response;\n        try {\n            // \t// // See the inline doc of the REST `post()` API for possible errors to be thrown.\n            // \t// // As these errors are catastrophic they should be caught and handled by GraphQL\n            // \t// // API consumers.\n            const { body: responseBody } = await this._api.post(amplify, {\n                url: new AmplifyUrl(endpoint),\n                options: {\n                    headers,\n                    body,\n                    signingServiceInfo,\n                    withCredentials,\n                },\n                abortController,\n            });\n            response = await responseBody.json();\n        }\n        catch (error) {\n            if (this.isCancelError(error)) {\n                throw error;\n            }\n            response = createGraphQLResultWithError(error);\n        }\n        if (isGraphQLResponseWithErrors(response)) {\n            throw repackageUnauthorizedError(response);\n        }\n        return response;\n    }\n    /**\n     * Checks to see if an error thrown is from an api request cancellation\n     * @param {any} error - Any error\n     * @return {boolean} - A boolean indicating if the error was from an api request cancellation\n     */\n    isCancelError(error) {\n        return this._api.isCancelErrorREST(error);\n    }\n    /**\n     * Cancels an inflight request. Only applicable for graphql queries and mutations\n     * @param {any} request - request to cancel\n     * @returns - A boolean indicating if the request was cancelled\n     */\n    cancel(request, message) {\n        return this._api.cancelREST(request, message);\n    }\n    _graphqlSubscribe(amplify, { query, variables, authMode: authModeOverride, apiKey: apiKeyOverride, endpoint, }, additionalHeaders = {}, customUserAgentDetails, authToken) {\n        const config = resolveConfig(amplify);\n        const initialAuthMode = authModeOverride || config?.defaultAuthMode || 'iam';\n        // identityPool is an alias for iam. TODO: remove 'iam' in v7\n        const authMode = initialAuthMode === 'identityPool' ? 'iam' : initialAuthMode;\n        /**\n         * Retrieve library options from Amplify configuration.\n         * `libraryConfigHeaders` are from the Amplify configuration options,\n         * and will not be overwritten by other custom headers. These are *not*\n         * the same as `additionalHeaders`, which are custom headers that are\n         * either 1)included when configuring the API client or 2) passed along\n         * with individual requests.\n         */\n        const { headers: libraryConfigHeaders } = resolveLibraryOptions(amplify);\n        const appSyncGraphqlEndpoint = endpoint ?? config?.endpoint;\n        // TODO: This could probably be an exception. But, lots of tests rely on\n        // attempting to connect to nowhere. So, I'm treating as the opposite of\n        // a Chesterton's fence for now. (A fence I shouldn't build, because I don't\n        // know why somethings depends on its absence!)\n        const memoKey = appSyncGraphqlEndpoint ?? 'none';\n        const realtimeProvider = this.appSyncRealTime.get(memoKey) ?? new AWSAppSyncRealTimeProvider();\n        this.appSyncRealTime.set(memoKey, realtimeProvider);\n        return realtimeProvider\n            .subscribe({\n            query: print(query),\n            variables,\n            appSyncGraphqlEndpoint,\n            region: config?.region,\n            authenticationType: authMode,\n            apiKey: apiKeyOverride ?? config?.apiKey,\n            additionalHeaders,\n            authToken,\n            libraryConfigHeaders,\n        }, customUserAgentDetails)\n            .pipe(catchError(e => {\n            if (e.errors) {\n                throw repackageUnauthorizedError(e);\n            }\n            throw e;\n        }));\n    }\n}\nexport const InternalGraphQLAPI = new InternalGraphQLAPIClass();\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AAaA,MAAMA,iBAAiB,GAAG,kBAAkB;AAC5C,MAAMC,iBAAiB,GAAIC,OAAO,IAAK;EACnC,OAAO,OAAOA,OAAO,KAAK,UAAU;AACxC,CAAC;AACD;AACA;AACA;AACO,MAAMC,uBAAuB,CAAC;EACjCC,WAAWA,CAAA,EAAG;IAClB;AACA;AACA;IACQ,IAAI,CAACC,eAAe,GAAG,IAAIC,GAAG,EAAE;IAChC,IAAI,CAACC,IAAI,GAAG;MACRC,IAAI;MAChBC,UAAA,EAAYC,MAAU;MACtBC,iBAAA,EAAYC,aAAiB;MACjBC;IACZ,CAAS;EACT;EACIC,aAAaA,CAAA,EAAG;IACZ,OAAO,oBAAoB;EACnC;EACA;AACA;AACA;AACA;EACIC,uBAAuBA,CAACC,SAAS,EAAE;IAC/B,MAAMC,GAAG,GAAGC,KAAK,CAACF,SAAS,CAAC;IAC5B,MAAMG,WAAW,GAAGF,GAAG,CAACE,WAAW;IACnC,MAAM,CAAC;MAAEH,SAAS,EAAEI;IAAa,CAAE,CAAC,GAAGD,WAAW;IAClD,OAAOC,aAAa;EAC5B;EACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,OAAOA,CAACnB,OAAO,EAAAoB,IAAA,EAAiFC,iBAAiB,EAAEC,sBAAsB,EAAE;IAAA,IAA1H;MAAEC,KAAK,EAAEC,UAAU;MAAEC,SAAS,GAAG,EAAE;MAAEC,QAAQ;MAAEC,SAAS;MAAEC,QAAQ;MAAEC;IAAM,CAAG,GAAAT,IAAA;IAC1F,MAAMG,KAAK,GAAG,OAAOC,UAAU,KAAK,QAAQ,GACtCR,KAAK,CAACQ,UAAU,CAAC,GACjBR,KAAK,CAACc,KAAK,CAACN,UAAU,CAAC,CAAC;IAC9B,MAAM,CAACO,YAAY,GAAG,EAAE,CAAC,GAAGR,KAAK,CAACN,WAAW,CAACe,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,KAAK,qBAAqB,CAAC;IAC/F,MAAM;MAAEpB,SAAS,EAAEI;IAAa,CAAE,GAAGa,YAAY;IACjD,MAAMI,OAAO,GAAGd,iBAAiB,IAAI,EAAE;IACvC,QAAQH,aAAa;MACjB,KAAK,OAAO;MACZ,KAAK,UAAU;QAAE;UACb,MAAMkB,eAAe,GAAG,IAAIC,eAAe,EAAE;UAC7C,IAAIC,eAAe;UACnB,IAAIvC,iBAAiB,CAACC,OAAO,CAAC,EAAE;YAC5BsC,eAAe,GAAG,IAAI,CAACC,QAAQ,CAACvC,OAAO,EAAE;cAAEuB,KAAK;cAAEE,SAAS;cAAEC,QAAQ;cAAEG,MAAM;cAAED;YAAQ,CAAE,EAAEO,OAAO,EAAEC,eAAe,EAAEd,sBAAsB,EAAEK,SAAS,CAAC;UAC3K,CAAiB,MACI;YACrB;YACA;YACoB,MAAMa,OAAO,GAAG,MAAOC,eAAe,IAAK;cACvC,MAAMC,MAAM,GAAG,MAAM,IAAI,CAACH,QAAQ,CAACE,eAAe,EAAE;gBAAElB,KAAK;gBAAEE,SAAS;gBAAEC,QAAQ;gBAAEG,MAAM;gBAAED;cAAQ,CAAE,EAAEO,OAAO,EAAEC,eAAe,EAAEd,sBAAsB,EAAEK,SAAS,CAAC;cAClK,OAAOe,MAAM;YACrC,CAAqB;YACDJ,eAAe,GAAGtC,OAAO,CAACwC,OAAO,CAAC;UACtD;UACgB,IAAI,CAACnC,IAAI,CAACM,4BAA4B,CAAC2B,eAAe,EAAEF,eAAe,CAAC;UACxE,OAAOE,eAAe;QACtC;MACY,KAAK,cAAc;QACf,OAAO,IAAI,CAACK,iBAAiB,CAAC3C,OAAO,EAAE;UAAEuB,KAAK;UAAEE,SAAS;UAAEC,QAAQ;UAAEG,MAAM;UAAED;QAAQ,CAAE,EAAEO,OAAO,EAAEb,sBAAsB,EAAEK,SAAS,CAAC;MACxI;QACI,MAAM,IAAIiB,KAAK,CAAC,2BAA2B1B,aAAa,EAAE,CAAC;IAC3E;EACA;EACI,MAAMqB,QAAQA,CAACvC,OAAO,EAAA6C,KAAA,EAAqL;IAAA,IAAnL;MAAEtB,KAAK;MAAEE,SAAS;MAAEC,QAAQ,EAAEoB,gBAAgB;MAAElB,QAAQ,EAAEmB,gBAAgB;MAAElB,MAAM,EAAEmB;IAAc,CAAG,GAAAH,KAAA;IAAA,IAAExB,iBAAiB,GAAA4B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;IAAA,IAAEb,eAAe,GAAAa,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;IAAA,IAAE7B,sBAAsB,GAAA2B,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;IAAA,IAAExB,SAAS,GAAAsB,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;IACrM,MAAM;MAAEtB,MAAM;MAAEuB,MAAM;MAAExB,QAAQ,EAAEyB,sBAAsB;MAAEC,cAAc;MAAEC,oBAAoB;MAAEC;IAAe,CAAG,GAAGC,aAAa,CAACzD,OAAO,CAAC;IAC3I,MAAM0D,eAAe,GAAGZ,gBAAgB,IAAIU,eAAe,IAAI,KAAK;IAC5E;IACQ,MAAM9B,QAAQ,GAAGgC,eAAe,KAAK,cAAc,GAAG,KAAK,GAAGA,eAAe;IACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,MAAM;MAAEvB,OAAO,EAAEwB,aAAa;MAAEC;IAAe,CAAE,GAAGC,qBAAqB,CAAC7D,OAAO,CAAC;IAC1F;AACA;AACA;AACA;IACQ,IAAI8D,uBAAuB;IAC3B,IAAI,OAAOzC,iBAAiB,KAAK,UAAU,EAAE;MACzC,MAAM0C,cAAc,GAAG;QACnBC,MAAM,EAAE,MAAM;QACdC,GAAG,EAAE,IAAIC,UAAU,CAACnB,gBAAgB,IAAIO,cAAc,IAAID,sBAAsB,IAAI,EAAE,CAAC,CAACc,QAAQ,EAAE;QAClGC,WAAW,EAAEtC,KAAK,CAACP,KAAK;MACxC,CAAa;MACDuC,uBAAuB,GAAG,MAAMzC,iBAAiB,CAAC0C,cAAc,CAAC;IAC7E,CAAS,MACI;MACDD,uBAAuB,GAAGzC,iBAAiB;IACvD;IACA;IACQ,IAAIM,SAAS,EAAE;MACXmC,uBAAuB,GAAG;QACtB,GAAGA,uBAAuB;QAC1BO,aAAa,EAAE1C;MAC/B,CAAa;IACb;IACQ,MAAM2C,WAAW,GAAG,MAAMC,eAAe,CAACvE,OAAO,EAAE0B,QAAQ,EAAEsB,cAAc,IAAInB,MAAM,EAAEiC,uBAAuB,CAAC;IAC/G,MAAM3B,OAAO,GAAG;MACZ,IAAI,CAACmB,cAAc,IAAIgB,WAAW,CAAC;MAC/C;AACA;AACA;AACA;AACA;AACA;MACY,IAAKhB,cAAc,KAAKC,oBAAoB,GAAGe,WAAW,GAAG,EAAE,CAAC,IAAK,EAAE,CAAC;MACpF;MACY,IAAIX,aAAa,KACZ,MAAMA,aAAa,CAAC;QACjBpC,KAAK,EAAEO,KAAK,CAACP,KAAK,CAAC;QACnBE;MACpB,CAAiB,CAAC,CAAC,CAAC;MACpB;MACY,GAAGqC,uBAAuB;MACtC;MACY,IAAI,CAACR,cAAc,IAAI;QACnB,CAACxD,iBAAiB,GAAG0E,mBAAmB,CAAClD,sBAAsB;MAC/E,CAAa;IACb,CAAS;IACD,MAAMmD,IAAI,GAAG;MACTlD,KAAK,EAAEO,KAAK,CAACP,KAAK,CAAC;MACnBE,SAAS,EAAEA,SAAS,IAAI;IACpC,CAAS;IACD,IAAIiD,kBAAkB;IAC9B;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAKpB,cAAc,IAAI,CAACC,oBAAoB,IACvC7B,QAAQ,KAAK,MAAM,IAChBA,QAAQ,KAAK,UAAU,IACvBA,QAAQ,KAAK,KAAK,IAClBA,QAAQ,KAAK,QAAS,EAAE;MAC5BgD,kBAAkB,GAAGvB,SAAS;IAC1C,CAAS,MACI;MACDuB,kBAAkB,GAAG;QACjBC,OAAO,EAAE,CAACpB,oBAAoB,GAAG,SAAS,GAAG,aAAa;QAC1DH,MAAM,EAAE,CAACG,oBAAoB,GAAGH,MAAM,GAAGG;MACzD,CAAa;IACb;IACQ,MAAM3B,QAAQ,GAAGmB,gBAAgB,IAAIO,cAAc,IAAID,sBAAsB;IAC7E,IAAI,CAACzB,QAAQ,EAAE;MACX,MAAMgD,4BAA4B,CAAC,IAAIC,eAAe,CAACC,WAAW,CAAC,CAAC;IAChF;IACQ,IAAIC,QAAQ;IACZ,IAAI;MACZ;MACA;MACA;MACY,MAAM;QAAEN,IAAI,EAAEO;MAAY,CAAE,GAAG,MAAM,IAAI,CAAC3E,IAAI,CAACC,IAAI,CAACN,OAAO,EAAE;QACzDiE,GAAG,EAAE,IAAIC,UAAU,CAACtC,QAAQ,CAAC;QAC7BqD,OAAO,EAAE;UACL9C,OAAO;UACPsC,IAAI;UACJC,kBAAkB;UAClBd;QACpB,CAAiB;QACDxB;MAChB,CAAa,CAAC;MACF2C,QAAQ,GAAG,MAAMC,YAAY,CAACE,IAAI,EAAE;IAChD,CAAS,CACD,OAAOC,KAAK,EAAE;MACV,IAAI,IAAI,CAACzE,aAAa,CAACyE,KAAK,CAAC,EAAE;QAC3B,MAAMA,KAAK;MAC3B;MACYJ,QAAQ,GAAGH,4BAA4B,CAACO,KAAK,CAAC;IAC1D;IACQ,IAAIC,2BAA2B,CAACL,QAAQ,CAAC,EAAE;MACvC,MAAMM,0BAA0B,CAACN,QAAQ,CAAC;IACtD;IACQ,OAAOA,QAAQ;EACvB;EACA;AACA;AACA;AACA;AACA;EACIrE,aAAaA,CAACyE,KAAK,EAAE;IACjB,OAAO,IAAI,CAAC9E,IAAI,CAACI,iBAAiB,CAAC0E,KAAK,CAAC;EACjD;EACA;AACA;AACA;AACA;AACA;EACI3E,MAAMA,CAAC8E,OAAO,EAAEC,OAAO,EAAE;IACrB,OAAO,IAAI,CAAClF,IAAI,CAACE,UAAU,CAAC+E,OAAO,EAAEC,OAAO,CAAC;EACrD;EACI5C,iBAAiBA,CAAC3C,OAAO,EAAAwF,KAAA,EAAkJ;IAAA,IAAhJ;MAAEjE,KAAK;MAAEE,SAAS;MAAEC,QAAQ,EAAEoB,gBAAgB;MAAEjB,MAAM,EAAEmB,cAAc;MAAEpB;IAAQ,CAAG,GAAA4D,KAAA;IAAA,IAAEnE,iBAAiB,GAAA4B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;IAAA,IAAE3B,sBAAsB,GAAA2B,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;IAAA,IAAExB,SAAS,GAAAsB,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;IACrK,MAAMsC,MAAM,GAAGhC,aAAa,CAACzD,OAAO,CAAC;IACrC,MAAM0D,eAAe,GAAGZ,gBAAgB,IAAI2C,MAAM,EAAEjC,eAAe,IAAI,KAAK;IACpF;IACQ,MAAM9B,QAAQ,GAAGgC,eAAe,KAAK,cAAc,GAAG,KAAK,GAAGA,eAAe;IACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,MAAM;MAAEvB,OAAO,EAAEuD;IAAoB,CAAE,GAAG7B,qBAAqB,CAAC7D,OAAO,CAAC;IACxE,MAAMqD,sBAAsB,GAAGzB,QAAQ,IAAI6D,MAAM,EAAE7D,QAAQ;IACnE;IACA;IACA;IACA;IACQ,MAAM+D,OAAO,GAAGtC,sBAAsB,IAAI,MAAM;IAChD,MAAMuC,gBAAgB,GAAG,IAAI,CAACzF,eAAe,CAAC0F,GAAG,CAACF,OAAO,CAAC,IAAI,IAAIG,0BAA0B,EAAE;IAC9F,IAAI,CAAC3F,eAAe,CAAC4F,GAAG,CAACJ,OAAO,EAAEC,gBAAgB,CAAC;IACnD,OAAOA,gBAAgB,CAClBI,SAAS,CAAC;MACXzE,KAAK,EAAEO,KAAK,CAACP,KAAK,CAAC;MACnBE,SAAS;MACT4B,sBAAsB;MACtBD,MAAM,EAAEqC,MAAM,EAAErC,MAAM;MACtB6C,kBAAkB,EAAEvE,QAAQ;MAC5BG,MAAM,EAAEmB,cAAc,IAAIyC,MAAM,EAAE5D,MAAM;MACxCR,iBAAiB;MACjBM,SAAS;MACT+D;IACZ,CAAS,EAAEpE,sBAAsB,CAAC,CACrB4E,IAAI,CAACC,UAAU,CAACC,CAAC,IAAI;MACtB,IAAIA,CAAC,CAACC,MAAM,EAAE;QACV,MAAMhB,0BAA0B,CAACe,CAAC,CAAC;MACnD;MACY,MAAMA,CAAC;IACnB,CAAS,CAAC,CAAC;EACX;AACA;AACY,MAACE,kBAAkB,GAAG,IAAIrG,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}