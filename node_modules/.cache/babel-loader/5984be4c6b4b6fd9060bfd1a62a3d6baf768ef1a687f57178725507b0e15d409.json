{"ast":null,"code":"import { getBtoa } from '../../globalHelpers/index.mjs';\nimport { bytesToString } from './bytesToString.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst base64Encoder = {\n  /**\n   * Convert input to base64-encoded string\n   * @param input - string to convert to base64\n   * @param options - encoding options that can optionally produce a base64url string\n   * @returns base64-encoded string\n   */\n  convert(input) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      urlSafe: false,\n      skipPadding: false\n    };\n    const inputStr = typeof input === 'string' ? input : bytesToString(input);\n    let encodedStr = getBtoa()(inputStr);\n    // urlSafe char replacement and skipPadding options conform to the base64url spec\n    // https://datatracker.ietf.org/doc/html/rfc4648#section-5\n    if (options.urlSafe) {\n      encodedStr = encodedStr.replace(/\\+/g, '-').replace(/\\//g, '_');\n    }\n    if (options.skipPadding) {\n      encodedStr = encodedStr.replace(/=/g, '');\n    }\n    return encodedStr;\n  }\n};\nexport { base64Encoder };","map":{"version":3,"names":["base64Encoder","convert","input","options","arguments","length","undefined","urlSafe","skipPadding","inputStr","bytesToString","encodedStr","getBtoa","replace"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/core/src/utils/convert/base64/base64Encoder.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getBtoa } from '../../globalHelpers';\nimport { bytesToString } from './bytesToString';\nexport const base64Encoder = {\n    /**\n     * Convert input to base64-encoded string\n     * @param input - string to convert to base64\n     * @param options - encoding options that can optionally produce a base64url string\n     * @returns base64-encoded string\n     */\n    convert(input, options = {\n        urlSafe: false,\n        skipPadding: false,\n    }) {\n        const inputStr = typeof input === 'string' ? input : bytesToString(input);\n        let encodedStr = getBtoa()(inputStr);\n        // urlSafe char replacement and skipPadding options conform to the base64url spec\n        // https://datatracker.ietf.org/doc/html/rfc4648#section-5\n        if (options.urlSafe) {\n            encodedStr = encodedStr.replace(/\\+/g, '-').replace(/\\//g, '_');\n        }\n        if (options.skipPadding) {\n            encodedStr = encodedStr.replace(/=/g, '');\n        }\n        return encodedStr;\n    },\n};\n"],"mappings":";;;AAAA;AACA;AAGY,MAACA,aAAa,GAAG;EAC7B;AACA;AACA;AACA;AACA;AACA;EACIC,OAAOA,CAACC,KAAK,EAGV;IAAA,IAHYC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG;MACrBG,OAAO,EAAE,KAAK;MACdC,WAAW,EAAE;IACrB,CAAK;IACG,MAAMC,QAAQ,GAAG,OAAOP,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAGQ,aAAa,CAACR,KAAK,CAAC;IACzE,IAAIS,UAAU,GAAGC,OAAO,EAAE,CAACH,QAAQ,CAAC;IAC5C;IACA;IACQ,IAAIN,OAAO,CAACI,OAAO,EAAE;MACjBI,UAAU,GAAGA,UAAU,CAACE,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;IAC3E;IACQ,IAAIV,OAAO,CAACK,WAAW,EAAE;MACrBG,UAAU,GAAGA,UAAU,CAACE,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;IACrD;IACQ,OAAOF,UAAU;EACzB;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}