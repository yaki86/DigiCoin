{"ast":null,"code":"import { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { assertAuthTokens } from '../utils/types.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../types/errors.mjs';\nimport { createGetUserAttributeVerificationCodeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createGetUserAttributeVerificationCodeClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Resends user's confirmation code when updating attributes while authenticated.\n *\n * @param input - The SendUserAttributeVerificationCodeInput object\n * @returns SendUserAttributeVerificationCodeOutput\n * @throws - {@link GetUserAttributeVerificationException}\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nconst sendUserAttributeVerificationCode = async input => {\n  const {\n    userAttributeKey,\n    options\n  } = input;\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  const clientMetadata = options?.clientMetadata;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolEndpoint,\n    userPoolId\n  } = authConfig;\n  const {\n    tokens\n  } = await fetchAuthSession({\n    forceRefresh: false\n  });\n  assertAuthTokens(tokens);\n  const getUserAttributeVerificationCode = createGetUserAttributeVerificationCodeClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const {\n    CodeDeliveryDetails\n  } = await getUserAttributeVerificationCode({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.SendUserAttributeVerificationCode)\n  }, {\n    AccessToken: tokens.accessToken.toString(),\n    ClientMetadata: clientMetadata,\n    AttributeName: userAttributeKey\n  });\n  const {\n    DeliveryMedium,\n    AttributeName,\n    Destination\n  } = {\n    ...CodeDeliveryDetails\n  };\n  return {\n    destination: Destination,\n    deliveryMedium: DeliveryMedium,\n    attributeName: AttributeName\n  };\n};\nexport { sendUserAttributeVerificationCode };","map":{"version":3,"names":["sendUserAttributeVerificationCode","input","userAttributeKey","options","authConfig","Amplify","getConfig","Auth","Cognito","clientMetadata","assertTokenProviderConfig","userPoolEndpoint","userPoolId","tokens","fetchAuthSession","forceRefresh","assertAuthTokens","getUserAttributeVerificationCode","createGetUserAttributeVerificationCodeClient","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","CodeDeliveryDetails","region","getRegionFromUserPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","SendUserAttributeVerificationCode","AccessToken","accessToken","toString","ClientMetadata","AttributeName","DeliveryMedium","Destination","destination","deliveryMedium","attributeName"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/auth/src/providers/cognito/apis/sendUserAttributeVerificationCode.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { assertAuthTokens } from '../utils/types';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { createGetUserAttributeVerificationCodeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\n/**\n * Resends user's confirmation code when updating attributes while authenticated.\n *\n * @param input - The SendUserAttributeVerificationCodeInput object\n * @returns SendUserAttributeVerificationCodeOutput\n * @throws - {@link GetUserAttributeVerificationException}\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport const sendUserAttributeVerificationCode = async (input) => {\n    const { userAttributeKey, options } = input;\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    const clientMetadata = options?.clientMetadata;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolEndpoint, userPoolId } = authConfig;\n    const { tokens } = await fetchAuthSession({ forceRefresh: false });\n    assertAuthTokens(tokens);\n    const getUserAttributeVerificationCode = createGetUserAttributeVerificationCodeClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const { CodeDeliveryDetails } = await getUserAttributeVerificationCode({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.SendUserAttributeVerificationCode),\n    }, {\n        AccessToken: tokens.accessToken.toString(),\n        ClientMetadata: clientMetadata,\n        AttributeName: userAttributeKey,\n    });\n    const { DeliveryMedium, AttributeName, Destination } = {\n        ...CodeDeliveryDetails,\n    };\n    return {\n        destination: Destination,\n        deliveryMedium: DeliveryMedium,\n        attributeName: AttributeName,\n    };\n};\n"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,iCAAiC,GAAG,MAAOC,KAAK,IAAK;EAC9D,MAAM;IAAEC,gBAAgB;IAAEC;EAAO,CAAE,GAAGF,KAAK;EAC3C,MAAMG,UAAU,GAAGC,OAAO,CAACC,SAAS,EAAE,CAACC,IAAI,EAAEC,OAAO;EACpD,MAAMC,cAAc,GAAGN,OAAO,EAAEM,cAAc;EAC9CC,yBAAyB,CAACN,UAAU,CAAC;EACrC,MAAM;IAAEO,gBAAgB;IAAEC;EAAU,CAAE,GAAGR,UAAU;EACnD,MAAM;IAAES;EAAM,CAAE,GAAG,MAAMC,gBAAgB,CAAC;IAAEC,YAAY,EAAE;EAAK,CAAE,CAAC;EAClEC,gBAAgB,CAACH,MAAM,CAAC;EACxB,MAAMI,gCAAgC,GAAGC,4CAA4C,CAAC;IAClFC,gBAAgB,EAAEC,qCAAqC,CAAC;MACpDC,gBAAgB,EAAEV;IAC9B,CAAS;EACT,CAAK,CAAC;EACF,MAAM;IAAEW;EAAmB,CAAE,GAAG,MAAML,gCAAgC,CAAC;IACnEM,MAAM,EAAEC,uBAAuB,CAACZ,UAAU,CAAC;IAC3Ca,cAAc,EAAEC,qBAAqB,CAACC,UAAU,CAACC,iCAAiC;EAC1F,CAAK,EAAE;IACCC,WAAW,EAAEhB,MAAM,CAACiB,WAAW,CAACC,QAAQ,EAAE;IAC1CC,cAAc,EAAEvB,cAAc;IAC9BwB,aAAa,EAAE/B;EACvB,CAAK,CAAC;EACF,MAAM;IAAEgC,cAAc;IAAED,aAAa;IAAEE;EAAW,CAAE,GAAG;IACnD,GAAGb;EACX,CAAK;EACD,OAAO;IACHc,WAAW,EAAED,WAAW;IACxBE,cAAc,EAAEH,cAAc;IAC9BI,aAAa,EAAEL;EACvB,CAAK;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}