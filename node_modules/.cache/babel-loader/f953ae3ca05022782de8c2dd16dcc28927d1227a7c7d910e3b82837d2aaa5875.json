{"ast":null,"code":"import { completeOAuthSignOut } from './completeOAuthSignOut.mjs';\nimport { oAuthSignOutRedirect } from './oAuthSignOutRedirect.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst handleOAuthSignOut = async (cognitoConfig, store, tokenOrchestrator, redirectUrl) => {\n  const {\n    isOAuthSignIn\n  } = await store.loadOAuthSignIn();\n  const oauthMetadata = await tokenOrchestrator.getOAuthMetadata();\n  // Clear everything before attempting to visted logout endpoint since the current application\n  // state could be wiped away on redirect\n  await completeOAuthSignOut(store);\n  // The isOAuthSignIn flag is propagated by the oAuthToken store which manages oauth keys in local storage only.\n  // These keys are used to determine if a user is in an inflight or signedIn oauth states.\n  // However, this behavior represents an issue when 2 apps share the same set of tokens in Cookie storage because the app that didn't\n  // start the OAuth will not have access to the oauth keys.\n  // A heuristic solution is to add oauth metadata to the tokenOrchestrator which will have access to the underlying\n  // storage mechanism that is used by Amplify.\n  if (isOAuthSignIn || oauthMetadata?.oauthSignIn) {\n    // On web, this will always end up being a void action\n    return oAuthSignOutRedirect(cognitoConfig, false, redirectUrl);\n  }\n};\nexport { handleOAuthSignOut };","map":{"version":3,"names":["handleOAuthSignOut","cognitoConfig","store","tokenOrchestrator","redirectUrl","isOAuthSignIn","loadOAuthSignIn","oauthMetadata","getOAuthMetadata","completeOAuthSignOut","oauthSignIn","oAuthSignOutRedirect"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/auth/src/providers/cognito/utils/oauth/handleOAuthSignOut.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { completeOAuthSignOut } from './completeOAuthSignOut';\nimport { oAuthSignOutRedirect } from './oAuthSignOutRedirect';\nexport const handleOAuthSignOut = async (cognitoConfig, store, tokenOrchestrator, redirectUrl) => {\n    const { isOAuthSignIn } = await store.loadOAuthSignIn();\n    const oauthMetadata = await tokenOrchestrator.getOAuthMetadata();\n    // Clear everything before attempting to visted logout endpoint since the current application\n    // state could be wiped away on redirect\n    await completeOAuthSignOut(store);\n    // The isOAuthSignIn flag is propagated by the oAuthToken store which manages oauth keys in local storage only.\n    // These keys are used to determine if a user is in an inflight or signedIn oauth states.\n    // However, this behavior represents an issue when 2 apps share the same set of tokens in Cookie storage because the app that didn't\n    // start the OAuth will not have access to the oauth keys.\n    // A heuristic solution is to add oauth metadata to the tokenOrchestrator which will have access to the underlying\n    // storage mechanism that is used by Amplify.\n    if (isOAuthSignIn || oauthMetadata?.oauthSignIn) {\n        // On web, this will always end up being a void action\n        return oAuthSignOutRedirect(cognitoConfig, false, redirectUrl);\n    }\n};\n"],"mappings":";;;AAAA;AACA;AAGY,MAACA,kBAAkB,GAAG,MAAAA,CAAOC,aAAa,EAAEC,KAAK,EAAEC,iBAAiB,EAAEC,WAAW,KAAK;EAC9F,MAAM;IAAEC;EAAa,CAAE,GAAG,MAAMH,KAAK,CAACI,eAAe,EAAE;EACvD,MAAMC,aAAa,GAAG,MAAMJ,iBAAiB,CAACK,gBAAgB,EAAE;EACpE;EACA;EACI,MAAMC,oBAAoB,CAACP,KAAK,CAAC;EACrC;EACA;EACA;EACA;EACA;EACA;EACI,IAAIG,aAAa,IAAIE,aAAa,EAAEG,WAAW,EAAE;IACrD;IACQ,OAAOC,oBAAoB,CAACV,aAAa,EAAE,KAAK,EAAEG,WAAW,CAAC;EACtE;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}