{"ast":null,"code":"import { generateGraphQLDocument, buildGraphQLVariables, authModeParams, getCustomHeaders, flattenItems, initializeModel } from '../APIClient.mjs';\nimport { handleListGraphQlError } from './utils.mjs';\nimport { selfAwareAsync } from '../../utils/selfAwareAsync.mjs';\nimport { extendCancellability } from '../cancellation.mjs';\nfunction indexQueryFactory(client, modelIntrospection, model, indexMeta, getInternals) {\n  let context = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n  const indexQueryWithContext = (contextSpec, args, options) => {\n    return _indexQuery(client, modelIntrospection, model, indexMeta, getInternals, {\n      ...args,\n      ...options\n    }, contextSpec);\n  };\n  const indexQuery = (args, options) => {\n    return _indexQuery(client, modelIntrospection, model, indexMeta, getInternals, {\n      ...args,\n      ...options\n    });\n  };\n  return context ? indexQueryWithContext : indexQuery;\n}\nfunction processGraphQlResponse(modelIntroSchema, modelName, result, selectionSet, modelInitializer) {\n  const {\n    data,\n    extensions\n  } = result;\n  const [key] = Object.keys(data);\n  if (data[key].items) {\n    const flattenedResult = data[key].items.map(value => flattenItems(modelIntroSchema, modelName, value));\n    return {\n      data: selectionSet ? flattenedResult : modelInitializer(flattenedResult),\n      nextToken: data[key].nextToken,\n      extensions\n    };\n  }\n  // Index queries are always list queries. No `items`? No flattening needed.\n  return {\n    data: data[key],\n    nextToken: data[key].nextToken,\n    extensions\n  };\n}\nfunction _indexQuery(client, modelIntrospection, model, indexMeta, getInternals, args, contextSpec) {\n  return selfAwareAsync(async resultPromise => {\n    const {\n      name\n    } = model;\n    const query = generateGraphQLDocument(modelIntrospection, model, 'INDEX_QUERY', args, indexMeta);\n    const variables = buildGraphQLVariables(model, 'INDEX_QUERY', args, modelIntrospection, indexMeta);\n    const auth = authModeParams(client, getInternals, args);\n    const modelInitializer = flattenedResult => initializeModel(client, name, flattenedResult, modelIntrospection, auth.authMode, auth.authToken, !!contextSpec);\n    try {\n      const headers = getCustomHeaders(client, getInternals, args?.headers);\n      const graphQlParams = {\n        ...auth,\n        query,\n        variables\n      };\n      const requestArgs = [graphQlParams, headers];\n      if (contextSpec !== undefined) {\n        requestArgs.unshift(contextSpec);\n      }\n      const basePromise = client.graphql(...requestArgs);\n      const extendedPromise = extendCancellability(basePromise, resultPromise);\n      const response = await extendedPromise;\n      if (response.data !== undefined) {\n        return processGraphQlResponse(modelIntrospection, name, response, args?.selectionSet, modelInitializer);\n      }\n    } catch (error) {\n      /**\n       * The `data` type returned by `error` here could be:\n       * 1) `null`\n       * 2) an empty object\n       * 3) \"populated\" but with a `null` value:\n       *   `data: { listByExampleId: null }`\n       * 4) an actual record:\n       *   `data: { listByExampleId: items: [{ id: '1', ...etc } }]`\n       */\n      const {\n        data,\n        errors\n      } = error;\n      // `data` is not `null`, and is not an empty object:\n      if (data !== undefined && data !== null && Object.keys(data).length !== 0 && errors) {\n        const [key] = Object.keys(data);\n        if (data[key]?.items) {\n          const flattenedResult = data[key]?.items.map(value => flattenItems(modelIntrospection, name, value));\n          /**\n           * Check exists since `flattenedResult` could be `null`.\n           * if `flattenedResult` exists, result is an actual record.\n           */\n          if (flattenedResult) {\n            return {\n              data: args?.selectionSet ? flattenedResult : modelInitializer(flattenedResult),\n              nextToken: data[key]?.nextToken\n            };\n          }\n        }\n        // response is of type `data: { listByExampleId: null }`\n        return {\n          data: data[key],\n          nextToken: data[key]?.nextToken\n        };\n      } else {\n        // `data` is `null` or an empty object:\n        return handleListGraphQlError(error);\n      }\n    }\n  });\n}\nexport { indexQueryFactory };","map":{"version":3,"names":["indexQueryFactory","client","modelIntrospection","model","indexMeta","getInternals","context","arguments","length","undefined","indexQueryWithContext","contextSpec","args","options","_indexQuery","indexQuery","processGraphQlResponse","modelIntroSchema","modelName","result","selectionSet","modelInitializer","data","extensions","key","Object","keys","items","flattenedResult","map","value","flattenItems","nextToken","selfAwareAsync","resultPromise","name","query","generateGraphQLDocument","variables","buildGraphQLVariables","auth","authModeParams","initializeModel","authMode","authToken","headers","getCustomHeaders","graphQlParams","requestArgs","unshift","basePromise","graphql","extendedPromise","extendCancellability","response","error","errors","handleListGraphQlError"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/data-schema/src/runtime/internals/operations/indexQuery.ts"],"sourcesContent":["import { authModeParams, buildGraphQLVariables, flattenItems, generateGraphQLDocument, getCustomHeaders, initializeModel, } from '../APIClient';\nimport { handleListGraphQlError } from './utils';\nimport { selfAwareAsync } from '../../utils';\nimport { extendCancellability } from '../cancellation';\nexport function indexQueryFactory(client, modelIntrospection, model, indexMeta, getInternals, context = false) {\n    const indexQueryWithContext = (contextSpec, args, options) => {\n        return _indexQuery(client, modelIntrospection, model, indexMeta, getInternals, {\n            ...args,\n            ...options,\n        }, contextSpec);\n    };\n    const indexQuery = (args, options) => {\n        return _indexQuery(client, modelIntrospection, model, indexMeta, getInternals, {\n            ...args,\n            ...options,\n        });\n    };\n    return context ? indexQueryWithContext : indexQuery;\n}\nfunction processGraphQlResponse(modelIntroSchema, modelName, result, selectionSet, modelInitializer) {\n    const { data, extensions } = result;\n    const [key] = Object.keys(data);\n    if (data[key].items) {\n        const flattenedResult = data[key].items.map((value) => flattenItems(modelIntroSchema, modelName, value));\n        return {\n            data: selectionSet ? flattenedResult : modelInitializer(flattenedResult),\n            nextToken: data[key].nextToken,\n            extensions,\n        };\n    }\n    // Index queries are always list queries. No `items`? No flattening needed.\n    return {\n        data: data[key],\n        nextToken: data[key].nextToken,\n        extensions,\n    };\n}\nfunction _indexQuery(client, modelIntrospection, model, indexMeta, getInternals, args, contextSpec) {\n    return selfAwareAsync(async (resultPromise) => {\n        const { name } = model;\n        const query = generateGraphQLDocument(modelIntrospection, model, 'INDEX_QUERY', args, indexMeta);\n        const variables = buildGraphQLVariables(model, 'INDEX_QUERY', args, modelIntrospection, indexMeta);\n        const auth = authModeParams(client, getInternals, args);\n        const modelInitializer = (flattenedResult) => initializeModel(client, name, flattenedResult, modelIntrospection, auth.authMode, auth.authToken, !!contextSpec);\n        try {\n            const headers = getCustomHeaders(client, getInternals, args?.headers);\n            const graphQlParams = {\n                ...auth,\n                query,\n                variables,\n            };\n            const requestArgs = [graphQlParams, headers];\n            if (contextSpec !== undefined) {\n                requestArgs.unshift(contextSpec);\n            }\n            const basePromise = client.graphql(...requestArgs);\n            const extendedPromise = extendCancellability(basePromise, resultPromise);\n            const response = await extendedPromise;\n            if (response.data !== undefined) {\n                return processGraphQlResponse(modelIntrospection, name, response, args?.selectionSet, modelInitializer);\n            }\n        }\n        catch (error) {\n            /**\n             * The `data` type returned by `error` here could be:\n             * 1) `null`\n             * 2) an empty object\n             * 3) \"populated\" but with a `null` value:\n             *   `data: { listByExampleId: null }`\n             * 4) an actual record:\n             *   `data: { listByExampleId: items: [{ id: '1', ...etc } }]`\n             */\n            const { data, errors } = error;\n            // `data` is not `null`, and is not an empty object:\n            if (data !== undefined &&\n                data !== null &&\n                Object.keys(data).length !== 0 &&\n                errors) {\n                const [key] = Object.keys(data);\n                if (data[key]?.items) {\n                    const flattenedResult = data[key]?.items.map((value) => flattenItems(modelIntrospection, name, value));\n                    /**\n                     * Check exists since `flattenedResult` could be `null`.\n                     * if `flattenedResult` exists, result is an actual record.\n                     */\n                    if (flattenedResult) {\n                        return {\n                            data: args?.selectionSet\n                                ? flattenedResult\n                                : modelInitializer(flattenedResult),\n                            nextToken: data[key]?.nextToken,\n                        };\n                    }\n                }\n                // response is of type `data: { listByExampleId: null }`\n                return {\n                    data: data[key],\n                    nextToken: data[key]?.nextToken,\n                };\n            }\n            else {\n                // `data` is `null` or an empty object:\n                return handleListGraphQlError(error);\n            }\n        }\n    });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}