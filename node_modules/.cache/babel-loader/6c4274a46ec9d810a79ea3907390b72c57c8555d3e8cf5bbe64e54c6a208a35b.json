{"ast":null,"code":"import { createCancellableOperation } from '../../utils/createCancellableOperation.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport '../../errors/validation.mjs';\nimport '../../utils/logger.mjs';\nimport { isIamAuthApplicableForGraphQL } from '../../utils/isIamAuthApplicable.mjs';\nimport { transferHandler } from './handler.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * This weak map provides functionality to cancel a request given the promise containing the `post` request.\n *\n * 1. For every GraphQL POST request, an abort controller is created and supplied to the request.\n * 2. The promise fulfilled by GraphGL POST request is then mapped to that abort controller.\n * 3. The promise is returned to the external caller.\n * 4. The caller can either wait for the promise to fulfill or call `cancel(promise)` to cancel the request.\n * 5. If `cancel(promise)` is called, then the corresponding abort controller is retrieved from the map below.\n * 6. GraphQL POST request will be rejected with the error message provided during cancel.\n * 7. Caller can check if the error is because of cancelling by calling `isCancelError(error)`.\n */\nconst cancelTokenMap = new WeakMap();\n/**\n * @internal\n *\n * REST POST handler to send GraphQL request to given endpoint. By default, it will use IAM to authorize\n * the request. In some auth modes, the IAM auth has to be disabled. Here's how to set up the request auth correctly:\n * * If auth mode is 'iam', you MUST NOT set 'authorization' header and 'x-api-key' header, since it would disable IAM\n *   auth. You MUST also set 'input.options.signingServiceInfo' option.\n *   * The including 'input.options.signingServiceInfo.service' and 'input.options.signingServiceInfo.region' are\n *     optional. If omitted, the signing service and region will be inferred from url.\n * * If auth mode is 'none', you MUST NOT set 'options.signingServiceInfo' option.\n * * If auth mode is 'apiKey', you MUST set 'x-api-key' custom header.\n * * If auth mode is 'oidc' or 'lambda' or 'userPool', you MUST set 'authorization' header.\n *\n * To make the internal post cancellable, you must also call `updateRequestToBeCancellable()` with the promise from\n * internal post call and the abort controller supplied to the internal post call.\n *\n * @param amplify the AmplifyClassV6 instance - it may be the singleton used on Web, or an instance created within\n * a context created by `runWithAmplifyServerContext`\n * @param postInput an object of {@link InternalPostInput}\n * @param postInput.url The URL that the POST request sends to\n * @param postInput.options Options of the POST request\n * @param postInput.abortController The abort controller used to cancel the POST request\n * @returns a {@link RestApiResponse}\n *\n * @throws an {@link AmplifyError} with `Network Error` as the `message` when the external resource is unreachable due to one\n * of the following reasons:\n *   1. no network connection\n *   2. CORS error\n * @throws a {@link CanceledError} when the ongoing POST request get cancelled\n */\nconst post = (amplify, _ref) => {\n  let {\n    url,\n    options,\n    abortController\n  } = _ref;\n  const controller = abortController ?? new AbortController();\n  const responsePromise = createCancellableOperation(async () => {\n    const response = transferHandler(amplify, {\n      url,\n      method: 'POST',\n      ...options,\n      abortSignal: controller.signal\n    }, isIamAuthApplicableForGraphQL, options?.signingServiceInfo);\n    return response;\n  }, controller);\n  const responseWithCleanUp = responsePromise.finally(() => {\n    cancelTokenMap.delete(responseWithCleanUp);\n  });\n  return responseWithCleanUp;\n};\n/**\n * Cancels a request given the promise returned by `post`.\n * If the request is already completed, this function does nothing.\n * It MUST be used after `updateRequestToBeCancellable` is called.\n */\nconst cancel = (promise, message) => {\n  const controller = cancelTokenMap.get(promise);\n  if (controller) {\n    controller.abort(message);\n    if (message && controller.signal.reason !== message) {\n      // In runtimes where `AbortSignal.reason` is not supported, we track the reason ourselves.\n      // @ts-expect-error reason is read-only property.\n      controller.signal.reason = message;\n    }\n    return true;\n  }\n  return false;\n};\n/**\n * MUST be used to make a promise including internal `post` API call cancellable.\n */\nconst updateRequestToBeCancellable = (promise, controller) => {\n  cancelTokenMap.set(promise, controller);\n};\nexport { cancel, post, updateRequestToBeCancellable };","map":{"version":3,"names":["cancelTokenMap","WeakMap","post","amplify","_ref","url","options","abortController","controller","AbortController","responsePromise","createCancellableOperation","response","transferHandler","method","abortSignal","signal","isIamAuthApplicableForGraphQL","signingServiceInfo","responseWithCleanUp","finally","delete","cancel","promise","message","get","abort","reason","updateRequestToBeCancellable","set"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/api-rest/src/apis/common/internalPost.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { createCancellableOperation } from '../../utils';\nimport { isIamAuthApplicableForGraphQL } from '../../utils/isIamAuthApplicable';\nimport { transferHandler } from './handler';\n/**\n * This weak map provides functionality to cancel a request given the promise containing the `post` request.\n *\n * 1. For every GraphQL POST request, an abort controller is created and supplied to the request.\n * 2. The promise fulfilled by GraphGL POST request is then mapped to that abort controller.\n * 3. The promise is returned to the external caller.\n * 4. The caller can either wait for the promise to fulfill or call `cancel(promise)` to cancel the request.\n * 5. If `cancel(promise)` is called, then the corresponding abort controller is retrieved from the map below.\n * 6. GraphQL POST request will be rejected with the error message provided during cancel.\n * 7. Caller can check if the error is because of cancelling by calling `isCancelError(error)`.\n */\nconst cancelTokenMap = new WeakMap();\n/**\n * @internal\n *\n * REST POST handler to send GraphQL request to given endpoint. By default, it will use IAM to authorize\n * the request. In some auth modes, the IAM auth has to be disabled. Here's how to set up the request auth correctly:\n * * If auth mode is 'iam', you MUST NOT set 'authorization' header and 'x-api-key' header, since it would disable IAM\n *   auth. You MUST also set 'input.options.signingServiceInfo' option.\n *   * The including 'input.options.signingServiceInfo.service' and 'input.options.signingServiceInfo.region' are\n *     optional. If omitted, the signing service and region will be inferred from url.\n * * If auth mode is 'none', you MUST NOT set 'options.signingServiceInfo' option.\n * * If auth mode is 'apiKey', you MUST set 'x-api-key' custom header.\n * * If auth mode is 'oidc' or 'lambda' or 'userPool', you MUST set 'authorization' header.\n *\n * To make the internal post cancellable, you must also call `updateRequestToBeCancellable()` with the promise from\n * internal post call and the abort controller supplied to the internal post call.\n *\n * @param amplify the AmplifyClassV6 instance - it may be the singleton used on Web, or an instance created within\n * a context created by `runWithAmplifyServerContext`\n * @param postInput an object of {@link InternalPostInput}\n * @param postInput.url The URL that the POST request sends to\n * @param postInput.options Options of the POST request\n * @param postInput.abortController The abort controller used to cancel the POST request\n * @returns a {@link RestApiResponse}\n *\n * @throws an {@link AmplifyError} with `Network Error` as the `message` when the external resource is unreachable due to one\n * of the following reasons:\n *   1. no network connection\n *   2. CORS error\n * @throws a {@link CanceledError} when the ongoing POST request get cancelled\n */\nexport const post = (amplify, { url, options, abortController }) => {\n    const controller = abortController ?? new AbortController();\n    const responsePromise = createCancellableOperation(async () => {\n        const response = transferHandler(amplify, {\n            url,\n            method: 'POST',\n            ...options,\n            abortSignal: controller.signal,\n        }, isIamAuthApplicableForGraphQL, options?.signingServiceInfo);\n        return response;\n    }, controller);\n    const responseWithCleanUp = responsePromise.finally(() => {\n        cancelTokenMap.delete(responseWithCleanUp);\n    });\n    return responseWithCleanUp;\n};\n/**\n * Cancels a request given the promise returned by `post`.\n * If the request is already completed, this function does nothing.\n * It MUST be used after `updateRequestToBeCancellable` is called.\n */\nexport const cancel = (promise, message) => {\n    const controller = cancelTokenMap.get(promise);\n    if (controller) {\n        controller.abort(message);\n        if (message && controller.signal.reason !== message) {\n            // In runtimes where `AbortSignal.reason` is not supported, we track the reason ourselves.\n            // @ts-expect-error reason is read-only property.\n            controller.signal.reason = message;\n        }\n        return true;\n    }\n    return false;\n};\n/**\n * MUST be used to make a promise including internal `post` API call cancellable.\n */\nexport const updateRequestToBeCancellable = (promise, controller) => {\n    cancelTokenMap.set(promise, controller);\n};\n"],"mappings":";;;;;;;;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,cAAc,GAAG,IAAIC,OAAO,EAAE;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACC,IAAI,GAAGA,CAACC,OAAO,EAAAC,IAAA,KAAwC;EAAA,IAAtC;IAAEC,GAAG;IAAEC,OAAO;IAAEC;EAAe,CAAE,GAAAH,IAAA;EAC3D,MAAMI,UAAU,GAAGD,eAAe,IAAI,IAAIE,eAAe,EAAE;EAC3D,MAAMC,eAAe,GAAGC,0BAA0B,CAAC,YAAY;IAC3D,MAAMC,QAAQ,GAAGC,eAAe,CAACV,OAAO,EAAE;MACtCE,GAAG;MACHS,MAAM,EAAE,MAAM;MACd,GAAGR,OAAO;MACVS,WAAW,EAAEP,UAAU,CAACQ;IACpC,CAAS,EAAEC,6BAA6B,EAAEX,OAAO,EAAEY,kBAAkB,CAAC;IAC9D,OAAON,QAAQ;EACvB,CAAK,EAAEJ,UAAU,CAAC;EACd,MAAMW,mBAAmB,GAAGT,eAAe,CAACU,OAAO,CAAC,MAAM;IACtDpB,cAAc,CAACqB,MAAM,CAACF,mBAAmB,CAAC;EAClD,CAAK,CAAC;EACF,OAAOA,mBAAmB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACY,MAACG,MAAM,GAAGA,CAACC,OAAO,EAAEC,OAAO,KAAK;EACxC,MAAMhB,UAAU,GAAGR,cAAc,CAACyB,GAAG,CAACF,OAAO,CAAC;EAC9C,IAAIf,UAAU,EAAE;IACZA,UAAU,CAACkB,KAAK,CAACF,OAAO,CAAC;IACzB,IAAIA,OAAO,IAAIhB,UAAU,CAACQ,MAAM,CAACW,MAAM,KAAKH,OAAO,EAAE;MAC7D;MACA;MACYhB,UAAU,CAACQ,MAAM,CAACW,MAAM,GAAGH,OAAO;IAC9C;IACQ,OAAO,IAAI;EACnB;EACI,OAAO,KAAK;AAChB;AACA;AACA;AACA;AACY,MAACI,4BAA4B,GAAGA,CAACL,OAAO,EAAEf,UAAU,KAAK;EACjER,cAAc,CAAC6B,GAAG,CAACN,OAAO,EAAEf,UAAU,CAAC;AAC3C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}