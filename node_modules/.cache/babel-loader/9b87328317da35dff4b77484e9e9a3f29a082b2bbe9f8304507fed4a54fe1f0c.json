{"ast":null,"code":"import { convertArrayBufferToBase64Url } from '../../../foundation/convert/base64url/convertArrayBufferToBase64Url.mjs';\nimport { convertBase64UrlToArrayBuffer } from '../../../foundation/convert/base64url/convertBase64UrlToArrayBuffer.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Deserializes Public Key Credential Creation Options JSON\n * @param input PasskeyCreateOptionsJson\n * @returns PublicKeyCredentialCreationOptions\n */\nconst deserializeJsonToPkcCreationOptions = input => {\n  const userIdBuffer = convertBase64UrlToArrayBuffer(input.user.id);\n  const challengeBuffer = convertBase64UrlToArrayBuffer(input.challenge);\n  const excludeCredentialsWithBuffer = (input.excludeCredentials || []).map(excludeCred => ({\n    ...excludeCred,\n    id: convertBase64UrlToArrayBuffer(excludeCred.id)\n  }));\n  return {\n    ...input,\n    excludeCredentials: excludeCredentialsWithBuffer,\n    challenge: challengeBuffer,\n    user: {\n      ...input.user,\n      id: userIdBuffer\n    }\n  };\n};\n/**\n * Serializes a Public Key Credential With Attestation to JSON\n * @param input PasskeyCreateResult\n * @returns PasskeyCreateResultJson\n */\nconst serializePkcWithAttestationToJson = input => {\n  const response = {\n    clientDataJSON: convertArrayBufferToBase64Url(input.response.clientDataJSON),\n    attestationObject: convertArrayBufferToBase64Url(input.response.attestationObject),\n    transports: input.response.getTransports(),\n    publicKeyAlgorithm: input.response.getPublicKeyAlgorithm(),\n    authenticatorData: convertArrayBufferToBase64Url(input.response.getAuthenticatorData())\n  };\n  const publicKey = input.response.getPublicKey();\n  if (publicKey) {\n    response.publicKey = convertArrayBufferToBase64Url(publicKey);\n  }\n  const resultJson = {\n    type: input.type,\n    id: input.id,\n    rawId: convertArrayBufferToBase64Url(input.rawId),\n    clientExtensionResults: input.getClientExtensionResults(),\n    response\n  };\n  if (input.authenticatorAttachment) {\n    resultJson.authenticatorAttachment = input.authenticatorAttachment;\n  }\n  return resultJson;\n};\n/**\n * Deserializes Public Key Credential Get Options JSON\n * @param input PasskeyGetOptionsJson\n * @returns PublicKeyCredentialRequestOptions\n */\nconst deserializeJsonToPkcGetOptions = input => {\n  const challengeBuffer = convertBase64UrlToArrayBuffer(input.challenge);\n  const allowedCredentialsWithBuffer = (input.allowCredentials || []).map(allowedCred => ({\n    ...allowedCred,\n    id: convertBase64UrlToArrayBuffer(allowedCred.id)\n  }));\n  return {\n    ...input,\n    challenge: challengeBuffer,\n    allowCredentials: allowedCredentialsWithBuffer\n  };\n};\n/**\n * Serializes a Public Key Credential With Attestation to JSON\n * @param input PasskeyGetResult\n * @returns PasskeyGetResultJson\n */\nconst serializePkcWithAssertionToJson = input => {\n  const response = {\n    clientDataJSON: convertArrayBufferToBase64Url(input.response.clientDataJSON),\n    authenticatorData: convertArrayBufferToBase64Url(input.response.authenticatorData),\n    signature: convertArrayBufferToBase64Url(input.response.signature)\n  };\n  if (input.response.userHandle) {\n    response.userHandle = convertArrayBufferToBase64Url(input.response.userHandle);\n  }\n  const resultJson = {\n    id: input.id,\n    rawId: convertArrayBufferToBase64Url(input.rawId),\n    type: input.type,\n    clientExtensionResults: input.getClientExtensionResults(),\n    response\n  };\n  if (input.authenticatorAttachment) {\n    resultJson.authenticatorAttachment = input.authenticatorAttachment;\n  }\n  return resultJson;\n};\nexport { deserializeJsonToPkcCreationOptions, deserializeJsonToPkcGetOptions, serializePkcWithAssertionToJson, serializePkcWithAttestationToJson };","map":{"version":3,"names":["deserializeJsonToPkcCreationOptions","input","userIdBuffer","convertBase64UrlToArrayBuffer","user","id","challengeBuffer","challenge","excludeCredentialsWithBuffer","excludeCredentials","map","excludeCred","serializePkcWithAttestationToJson","response","clientDataJSON","convertArrayBufferToBase64Url","attestationObject","transports","getTransports","publicKeyAlgorithm","getPublicKeyAlgorithm","authenticatorData","getAuthenticatorData","publicKey","getPublicKey","resultJson","type","rawId","clientExtensionResults","getClientExtensionResults","authenticatorAttachment","deserializeJsonToPkcGetOptions","allowedCredentialsWithBuffer","allowCredentials","allowedCred","serializePkcWithAssertionToJson","signature","userHandle"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/auth/src/client/utils/passkey/serde.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { convertArrayBufferToBase64Url, convertBase64UrlToArrayBuffer, } from '../../../foundation/convert';\n/**\n * Deserializes Public Key Credential Creation Options JSON\n * @param input PasskeyCreateOptionsJson\n * @returns PublicKeyCredentialCreationOptions\n */\nexport const deserializeJsonToPkcCreationOptions = (input) => {\n    const userIdBuffer = convertBase64UrlToArrayBuffer(input.user.id);\n    const challengeBuffer = convertBase64UrlToArrayBuffer(input.challenge);\n    const excludeCredentialsWithBuffer = (input.excludeCredentials || []).map(excludeCred => ({\n        ...excludeCred,\n        id: convertBase64UrlToArrayBuffer(excludeCred.id),\n    }));\n    return {\n        ...input,\n        excludeCredentials: excludeCredentialsWithBuffer,\n        challenge: challengeBuffer,\n        user: {\n            ...input.user,\n            id: userIdBuffer,\n        },\n    };\n};\n/**\n * Serializes a Public Key Credential With Attestation to JSON\n * @param input PasskeyCreateResult\n * @returns PasskeyCreateResultJson\n */\nexport const serializePkcWithAttestationToJson = (input) => {\n    const response = {\n        clientDataJSON: convertArrayBufferToBase64Url(input.response.clientDataJSON),\n        attestationObject: convertArrayBufferToBase64Url(input.response.attestationObject),\n        transports: input.response.getTransports(),\n        publicKeyAlgorithm: input.response.getPublicKeyAlgorithm(),\n        authenticatorData: convertArrayBufferToBase64Url(input.response.getAuthenticatorData()),\n    };\n    const publicKey = input.response.getPublicKey();\n    if (publicKey) {\n        response.publicKey = convertArrayBufferToBase64Url(publicKey);\n    }\n    const resultJson = {\n        type: input.type,\n        id: input.id,\n        rawId: convertArrayBufferToBase64Url(input.rawId),\n        clientExtensionResults: input.getClientExtensionResults(),\n        response,\n    };\n    if (input.authenticatorAttachment) {\n        resultJson.authenticatorAttachment = input.authenticatorAttachment;\n    }\n    return resultJson;\n};\n/**\n * Deserializes Public Key Credential Get Options JSON\n * @param input PasskeyGetOptionsJson\n * @returns PublicKeyCredentialRequestOptions\n */\nexport const deserializeJsonToPkcGetOptions = (input) => {\n    const challengeBuffer = convertBase64UrlToArrayBuffer(input.challenge);\n    const allowedCredentialsWithBuffer = (input.allowCredentials || []).map(allowedCred => ({\n        ...allowedCred,\n        id: convertBase64UrlToArrayBuffer(allowedCred.id),\n    }));\n    return {\n        ...input,\n        challenge: challengeBuffer,\n        allowCredentials: allowedCredentialsWithBuffer,\n    };\n};\n/**\n * Serializes a Public Key Credential With Attestation to JSON\n * @param input PasskeyGetResult\n * @returns PasskeyGetResultJson\n */\nexport const serializePkcWithAssertionToJson = (input) => {\n    const response = {\n        clientDataJSON: convertArrayBufferToBase64Url(input.response.clientDataJSON),\n        authenticatorData: convertArrayBufferToBase64Url(input.response.authenticatorData),\n        signature: convertArrayBufferToBase64Url(input.response.signature),\n    };\n    if (input.response.userHandle) {\n        response.userHandle = convertArrayBufferToBase64Url(input.response.userHandle);\n    }\n    const resultJson = {\n        id: input.id,\n        rawId: convertArrayBufferToBase64Url(input.rawId),\n        type: input.type,\n        clientExtensionResults: input.getClientExtensionResults(),\n        response,\n    };\n    if (input.authenticatorAttachment) {\n        resultJson.authenticatorAttachment = input.authenticatorAttachment;\n    }\n    return resultJson;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}