{"ast":null,"code":"import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { getUserContextData } from '../utils/userContextData.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../types/errors.mjs';\nimport { createForgotPasswordClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createForgotPasswordClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Resets a user's password.\n *\n * @param input -  The ResetPasswordInput object.\n * @returns ResetPasswordOutput\n * @throws -{@link ForgotPasswordException }\n * Thrown due to an invalid confirmation code or password.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty username.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n **/\nasync function resetPassword(input) {\n  const {\n    username\n  } = input;\n  assertValidationError(!!username, AuthValidationErrorCode.EmptyResetPasswordUsername);\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolClientId,\n    userPoolId,\n    userPoolEndpoint\n  } = authConfig;\n  const clientMetadata = input.options?.clientMetadata;\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const forgotPassword = createForgotPasswordClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const res = await forgotPassword({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ResetPassword)\n  }, {\n    Username: username,\n    ClientMetadata: clientMetadata,\n    ClientId: userPoolClientId,\n    UserContextData\n  });\n  const codeDeliveryDetails = res.CodeDeliveryDetails;\n  return {\n    isPasswordReset: false,\n    nextStep: {\n      resetPasswordStep: 'CONFIRM_RESET_PASSWORD_WITH_CODE',\n      codeDeliveryDetails: {\n        deliveryMedium: codeDeliveryDetails?.DeliveryMedium,\n        destination: codeDeliveryDetails?.Destination,\n        attributeName: codeDeliveryDetails?.AttributeName\n      }\n    }\n  };\n}\nexport { resetPassword };","map":{"version":3,"names":["resetPassword","input","username","assertValidationError","AuthValidationErrorCode","EmptyResetPasswordUsername","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","userPoolClientId","userPoolId","userPoolEndpoint","clientMetadata","options","UserContextData","getUserContextData","forgotPassword","createForgotPasswordClient","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","res","region","getRegionFromUserPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","ResetPassword","Username","ClientMetadata","ClientId","codeDeliveryDetails","CodeDeliveryDetails","isPasswordReset","nextStep","resetPasswordStep","deliveryMedium","DeliveryMedium","destination","Destination","attributeName","AttributeName"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/auth/src/providers/cognito/apis/resetPassword.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { getUserContextData } from '../utils/userContextData';\nimport { createForgotPasswordClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\n/**\n * Resets a user's password.\n *\n * @param input -  The ResetPasswordInput object.\n * @returns ResetPasswordOutput\n * @throws -{@link ForgotPasswordException }\n * Thrown due to an invalid confirmation code or password.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty username.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n **/\nexport async function resetPassword(input) {\n    const { username } = input;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptyResetPasswordUsername);\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolClientId, userPoolId, userPoolEndpoint } = authConfig;\n    const clientMetadata = input.options?.clientMetadata;\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const forgotPassword = createForgotPasswordClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const res = await forgotPassword({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ResetPassword),\n    }, {\n        Username: username,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData,\n    });\n    const codeDeliveryDetails = res.CodeDeliveryDetails;\n    return {\n        isPasswordReset: false,\n        nextStep: {\n            resetPasswordStep: 'CONFIRM_RESET_PASSWORD_WITH_CODE',\n            codeDeliveryDetails: {\n                deliveryMedium: codeDeliveryDetails?.DeliveryMedium,\n                destination: codeDeliveryDetails?.Destination,\n                attributeName: codeDeliveryDetails?.AttributeName,\n            },\n        },\n    };\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,aAAaA,CAACC,KAAK,EAAE;EACvC,MAAM;IAAEC;EAAQ,CAAE,GAAGD,KAAK;EAC1BE,qBAAqB,CAAC,CAAC,CAACD,QAAQ,EAAEE,uBAAuB,CAACC,0BAA0B,CAAC;EACrF,MAAMC,UAAU,GAAGC,OAAO,CAACC,SAAS,EAAE,CAACC,IAAI,EAAEC,OAAO;EACpDC,yBAAyB,CAACL,UAAU,CAAC;EACrC,MAAM;IAAEM,gBAAgB;IAAEC,UAAU;IAAEC;EAAgB,CAAE,GAAGR,UAAU;EACrE,MAAMS,cAAc,GAAGd,KAAK,CAACe,OAAO,EAAED,cAAc;EACpD,MAAME,eAAe,GAAGC,kBAAkB,CAAC;IACvChB,QAAQ;IACRW,UAAU;IACVD;EACR,CAAK,CAAC;EACF,MAAMO,cAAc,GAAGC,0BAA0B,CAAC;IAC9CC,gBAAgB,EAAEC,qCAAqC,CAAC;MACpDC,gBAAgB,EAAET;IAC9B,CAAS;EACT,CAAK,CAAC;EACF,MAAMU,GAAG,GAAG,MAAML,cAAc,CAAC;IAC7BM,MAAM,EAAEC,uBAAuB,CAACb,UAAU,CAAC;IAC3Cc,cAAc,EAAEC,qBAAqB,CAACC,UAAU,CAACC,aAAa;EACtE,CAAK,EAAE;IACCC,QAAQ,EAAE7B,QAAQ;IAClB8B,cAAc,EAAEjB,cAAc;IAC9BkB,QAAQ,EAAErB,gBAAgB;IAC1BK;EACR,CAAK,CAAC;EACF,MAAMiB,mBAAmB,GAAGV,GAAG,CAACW,mBAAmB;EACnD,OAAO;IACHC,eAAe,EAAE,KAAK;IACtBC,QAAQ,EAAE;MACNC,iBAAiB,EAAE,kCAAkC;MACrDJ,mBAAmB,EAAE;QACjBK,cAAc,EAAEL,mBAAmB,EAAEM,cAAc;QACnDC,WAAW,EAAEP,mBAAmB,EAAEQ,WAAW;QAC7CC,aAAa,EAAET,mBAAmB,EAAEU;MACpD;IACA;EACA,CAAK;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}