{"ast":null,"code":"import { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { assertAuthTokens } from '../../providers/cognito/utils/types.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs';\nimport { getRegionFromUserPoolId } from '../parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../utils/getAuthUserAgentValue.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../common/AuthErrorStrings.mjs';\nimport '../../errors/types/validation.mjs';\nimport '../../providers/cognito/types/errors.mjs';\nimport { createListWebAuthnCredentialsClient } from '../factories/serviceClients/cognitoIdentityProvider/createListWebAuthnCredentialsClient.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nasync function listWebAuthnCredentials(amplify, input) {\n  const authConfig = amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolEndpoint,\n    userPoolId\n  } = authConfig;\n  const {\n    tokens\n  } = await amplify.Auth.fetchAuthSession();\n  assertAuthTokens(tokens);\n  const listWebAuthnCredentialsResult = createListWebAuthnCredentialsClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const {\n    Credentials: commandCredentials = [],\n    NextToken: nextToken\n  } = await listWebAuthnCredentialsResult({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ListWebAuthnCredentials)\n  }, {\n    AccessToken: tokens.accessToken.toString(),\n    MaxResults: input?.pageSize,\n    NextToken: input?.nextToken\n  });\n  const credentials = commandCredentials.map(item => ({\n    credentialId: item.CredentialId,\n    friendlyCredentialName: item.FriendlyCredentialName,\n    relyingPartyId: item.RelyingPartyId,\n    authenticatorAttachment: item.AuthenticatorAttachment,\n    authenticatorTransports: item.AuthenticatorTransports,\n    createdAt: item.CreatedAt ? new Date(item.CreatedAt * 1000) : undefined\n  }));\n  return {\n    credentials,\n    nextToken\n  };\n}\nexport { listWebAuthnCredentials };","map":{"version":3,"names":["listWebAuthnCredentials","amplify","input","authConfig","getConfig","Auth","Cognito","assertTokenProviderConfig","userPoolEndpoint","userPoolId","tokens","fetchAuthSession","assertAuthTokens","listWebAuthnCredentialsResult","createListWebAuthnCredentialsClient","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","Credentials","commandCredentials","NextToken","nextToken","region","getRegionFromUserPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","ListWebAuthnCredentials","AccessToken","accessToken","toString","MaxResults","pageSize","credentials","map","item","credentialId","CredentialId","friendlyCredentialName","FriendlyCredentialName","relyingPartyId","RelyingPartyId","authenticatorAttachment","AuthenticatorAttachment","authenticatorTransports","AuthenticatorTransports","createdAt","CreatedAt","Date","undefined"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/auth/src/foundation/apis/listWebAuthnCredentials.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { assertAuthTokens } from '../../providers/cognito/utils/types';\nimport { createCognitoUserPoolEndpointResolver } from '../../providers/cognito/factories';\nimport { getRegionFromUserPoolId } from '../parsers';\nimport { getAuthUserAgentValue } from '../../utils';\nimport { createListWebAuthnCredentialsClient } from '../factories/serviceClients/cognitoIdentityProvider';\nexport async function listWebAuthnCredentials(amplify, input) {\n    const authConfig = amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolEndpoint, userPoolId } = authConfig;\n    const { tokens } = await amplify.Auth.fetchAuthSession();\n    assertAuthTokens(tokens);\n    const listWebAuthnCredentialsResult = createListWebAuthnCredentialsClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const { Credentials: commandCredentials = [], NextToken: nextToken } = await listWebAuthnCredentialsResult({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ListWebAuthnCredentials),\n    }, {\n        AccessToken: tokens.accessToken.toString(),\n        MaxResults: input?.pageSize,\n        NextToken: input?.nextToken,\n    });\n    const credentials = commandCredentials.map(item => ({\n        credentialId: item.CredentialId,\n        friendlyCredentialName: item.FriendlyCredentialName,\n        relyingPartyId: item.RelyingPartyId,\n        authenticatorAttachment: item.AuthenticatorAttachment,\n        authenticatorTransports: item.AuthenticatorTransports,\n        createdAt: item.CreatedAt ? new Date(item.CreatedAt * 1000) : undefined,\n    }));\n    return {\n        credentials,\n        nextToken,\n    };\n}\n"],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AAOO,eAAeA,uBAAuBA,CAACC,OAAO,EAAEC,KAAK,EAAE;EAC1D,MAAMC,UAAU,GAAGF,OAAO,CAACG,SAAS,EAAE,CAACC,IAAI,EAAEC,OAAO;EACpDC,yBAAyB,CAACJ,UAAU,CAAC;EACrC,MAAM;IAAEK,gBAAgB;IAAEC;EAAU,CAAE,GAAGN,UAAU;EACnD,MAAM;IAAEO;EAAM,CAAE,GAAG,MAAMT,OAAO,CAACI,IAAI,CAACM,gBAAgB,EAAE;EACxDC,gBAAgB,CAACF,MAAM,CAAC;EACxB,MAAMG,6BAA6B,GAAGC,mCAAmC,CAAC;IACtEC,gBAAgB,EAAEC,qCAAqC,CAAC;MACpDC,gBAAgB,EAAET;IAC9B,CAAS;EACT,CAAK,CAAC;EACF,MAAM;IAAEU,WAAW,EAAEC,kBAAkB,GAAG,EAAE;IAAEC,SAAS,EAAEC;EAAS,CAAE,GAAG,MAAMR,6BAA6B,CAAC;IACvGS,MAAM,EAAEC,uBAAuB,CAACd,UAAU,CAAC;IAC3Ce,cAAc,EAAEC,qBAAqB,CAACC,UAAU,CAACC,uBAAuB;EAChF,CAAK,EAAE;IACCC,WAAW,EAAElB,MAAM,CAACmB,WAAW,CAACC,QAAQ,EAAE;IAC1CC,UAAU,EAAE7B,KAAK,EAAE8B,QAAQ;IAC3BZ,SAAS,EAAElB,KAAK,EAAEmB;EAC1B,CAAK,CAAC;EACF,MAAMY,WAAW,GAAGd,kBAAkB,CAACe,GAAG,CAACC,IAAI,KAAK;IAChDC,YAAY,EAAED,IAAI,CAACE,YAAY;IAC/BC,sBAAsB,EAAEH,IAAI,CAACI,sBAAsB;IACnDC,cAAc,EAAEL,IAAI,CAACM,cAAc;IACnCC,uBAAuB,EAAEP,IAAI,CAACQ,uBAAuB;IACrDC,uBAAuB,EAAET,IAAI,CAACU,uBAAuB;IACrDC,SAAS,EAAEX,IAAI,CAACY,SAAS,GAAG,IAAIC,IAAI,CAACb,IAAI,CAACY,SAAS,GAAG,IAAI,CAAC,GAAGE;EACtE,CAAK,CAAC,CAAC;EACH,OAAO;IACHhB,WAAW;IACXZ;EACR,CAAK;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}