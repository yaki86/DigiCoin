{"ast":null,"code":"import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { getUserContextData } from '../utils/userContextData.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../types/errors.mjs';\nimport { createConfirmForgotPasswordClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmForgotPasswordClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Confirms the new password and verification code to reset the password.\n *\n * @param input -  The ConfirmResetPasswordInput object.\n * @throws -{@link ConfirmForgotPasswordException }\n * Thrown due to an invalid confirmation code or password.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty confirmation code, password or username.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function confirmResetPassword(input) {\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolClientId,\n    userPoolId,\n    userPoolEndpoint\n  } = authConfig;\n  const {\n    username,\n    newPassword\n  } = input;\n  assertValidationError(!!username, AuthValidationErrorCode.EmptyConfirmResetPasswordUsername);\n  assertValidationError(!!newPassword, AuthValidationErrorCode.EmptyConfirmResetPasswordNewPassword);\n  const code = input.confirmationCode;\n  assertValidationError(!!code, AuthValidationErrorCode.EmptyConfirmResetPasswordConfirmationCode);\n  const metadata = input.options?.clientMetadata;\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const confirmForgotPassword = createConfirmForgotPasswordClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  await confirmForgotPassword({\n    region: getRegionFromUserPoolId(authConfig.userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmResetPassword)\n  }, {\n    Username: username,\n    ConfirmationCode: code,\n    Password: newPassword,\n    ClientMetadata: metadata,\n    ClientId: authConfig.userPoolClientId,\n    UserContextData\n  });\n}\nexport { confirmResetPassword };","map":{"version":3,"names":["confirmResetPassword","input","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","userPoolClientId","userPoolId","userPoolEndpoint","username","newPassword","assertValidationError","AuthValidationErrorCode","EmptyConfirmResetPasswordUsername","EmptyConfirmResetPasswordNewPassword","code","confirmationCode","EmptyConfirmResetPasswordConfirmationCode","metadata","options","clientMetadata","UserContextData","getUserContextData","confirmForgotPassword","createConfirmForgotPasswordClient","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","region","getRegionFromUserPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","ConfirmResetPassword","Username","ConfirmationCode","Password","ClientMetadata","ClientId"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/auth/src/providers/cognito/apis/confirmResetPassword.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { getUserContextData } from '../utils/userContextData';\nimport { createConfirmForgotPasswordClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\n/**\n * Confirms the new password and verification code to reset the password.\n *\n * @param input -  The ConfirmResetPasswordInput object.\n * @throws -{@link ConfirmForgotPasswordException }\n * Thrown due to an invalid confirmation code or password.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty confirmation code, password or username.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function confirmResetPassword(input) {\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolClientId, userPoolId, userPoolEndpoint } = authConfig;\n    const { username, newPassword } = input;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptyConfirmResetPasswordUsername);\n    assertValidationError(!!newPassword, AuthValidationErrorCode.EmptyConfirmResetPasswordNewPassword);\n    const code = input.confirmationCode;\n    assertValidationError(!!code, AuthValidationErrorCode.EmptyConfirmResetPasswordConfirmationCode);\n    const metadata = input.options?.clientMetadata;\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const confirmForgotPassword = createConfirmForgotPasswordClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    await confirmForgotPassword({\n        region: getRegionFromUserPoolId(authConfig.userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmResetPassword),\n    }, {\n        Username: username,\n        ConfirmationCode: code,\n        Password: newPassword,\n        ClientMetadata: metadata,\n        ClientId: authConfig.userPoolClientId,\n        UserContextData,\n    });\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,oBAAoBA,CAACC,KAAK,EAAE;EAC9C,MAAMC,UAAU,GAAGC,OAAO,CAACC,SAAS,EAAE,CAACC,IAAI,EAAEC,OAAO;EACpDC,yBAAyB,CAACL,UAAU,CAAC;EACrC,MAAM;IAAEM,gBAAgB;IAAEC,UAAU;IAAEC;EAAgB,CAAE,GAAGR,UAAU;EACrE,MAAM;IAAES,QAAQ;IAAEC;EAAW,CAAE,GAAGX,KAAK;EACvCY,qBAAqB,CAAC,CAAC,CAACF,QAAQ,EAAEG,uBAAuB,CAACC,iCAAiC,CAAC;EAC5FF,qBAAqB,CAAC,CAAC,CAACD,WAAW,EAAEE,uBAAuB,CAACE,oCAAoC,CAAC;EAClG,MAAMC,IAAI,GAAGhB,KAAK,CAACiB,gBAAgB;EACnCL,qBAAqB,CAAC,CAAC,CAACI,IAAI,EAAEH,uBAAuB,CAACK,yCAAyC,CAAC;EAChG,MAAMC,QAAQ,GAAGnB,KAAK,CAACoB,OAAO,EAAEC,cAAc;EAC9C,MAAMC,eAAe,GAAGC,kBAAkB,CAAC;IACvCb,QAAQ;IACRF,UAAU;IACVD;EACR,CAAK,CAAC;EACF,MAAMiB,qBAAqB,GAAGC,iCAAiC,CAAC;IAC5DC,gBAAgB,EAAEC,qCAAqC,CAAC;MACpDC,gBAAgB,EAAEnB;IAC9B,CAAS;EACT,CAAK,CAAC;EACF,MAAMe,qBAAqB,CAAC;IACxBK,MAAM,EAAEC,uBAAuB,CAAC7B,UAAU,CAACO,UAAU,CAAC;IACtDuB,cAAc,EAAEC,qBAAqB,CAACC,UAAU,CAACC,oBAAoB;EAC7E,CAAK,EAAE;IACCC,QAAQ,EAAEzB,QAAQ;IAClB0B,gBAAgB,EAAEpB,IAAI;IACtBqB,QAAQ,EAAE1B,WAAW;IACrB2B,cAAc,EAAEnB,QAAQ;IACxBoB,QAAQ,EAAEtC,UAAU,CAACM,gBAAgB;IACrCe;EACR,CAAK,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}