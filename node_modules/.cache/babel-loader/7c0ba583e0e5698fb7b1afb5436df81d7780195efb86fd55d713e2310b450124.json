{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Retrieves the device name using the User-Agent Client Hints API if available,\n * falling back to the traditional userAgent string if not.\n *\n * @returns {Promise<string>} A promise that resolves with a string representing the device name.\n *\n * Example Output:\n * navigator.userAgentData:\n *   'macOS 14.2.1 arm macOS Not A(Brand/99.0.0.0;Google Chrome/121.0.6167.160;Chromium/121.0.6167.160'\n * navigator.userAgent:\n *   'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/115.0'\n */\nconst getDeviceName = async () => {\n  const {\n    userAgentData\n  } = navigator;\n  if (!userAgentData) return navigator.userAgent;\n  const {\n    platform = '',\n    platformVersion = '',\n    model = '',\n    architecture = '',\n    fullVersionList = []\n  } = await userAgentData.getHighEntropyValues(['platform', 'platformVersion', 'architecture', 'model', 'fullVersionList']);\n  const versionList = fullVersionList.map(v => `${v.brand}/${v.version}`).join(';');\n  const deviceName = [platform, platformVersion, architecture, model, platform, versionList].filter(value => value).join(' ');\n  return deviceName || navigator.userAgent;\n};\nexport { getDeviceName };","map":{"version":3,"names":["getDeviceName","userAgentData","navigator","userAgent","platform","platformVersion","model","architecture","fullVersionList","getHighEntropyValues","versionList","map","v","brand","version","join","deviceName","filter","value"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/core/src/utils/deviceName/getDeviceName.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Retrieves the device name using the User-Agent Client Hints API if available,\n * falling back to the traditional userAgent string if not.\n *\n * @returns {Promise<string>} A promise that resolves with a string representing the device name.\n *\n * Example Output:\n * navigator.userAgentData:\n *   'macOS 14.2.1 arm macOS Not A(Brand/99.0.0.0;Google Chrome/121.0.6167.160;Chromium/121.0.6167.160'\n * navigator.userAgent:\n *   'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/115.0'\n */\nexport const getDeviceName = async () => {\n    const { userAgentData } = navigator;\n    if (!userAgentData)\n        return navigator.userAgent;\n    const { platform = '', platformVersion = '', model = '', architecture = '', fullVersionList = [], } = await userAgentData.getHighEntropyValues([\n        'platform',\n        'platformVersion',\n        'architecture',\n        'model',\n        'fullVersionList',\n    ]);\n    const versionList = fullVersionList\n        .map((v) => `${v.brand}/${v.version}`)\n        .join(';');\n    const deviceName = [\n        platform,\n        platformVersion,\n        architecture,\n        model,\n        platform,\n        versionList,\n    ]\n        .filter(value => value)\n        .join(' ');\n    return deviceName || navigator.userAgent;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,aAAa,GAAG,MAAAA,CAAA,KAAY;EACrC,MAAM;IAAEC;EAAa,CAAE,GAAGC,SAAS;EACnC,IAAI,CAACD,aAAa,EACd,OAAOC,SAAS,CAACC,SAAS;EAC9B,MAAM;IAAEC,QAAQ,GAAG,EAAE;IAAEC,eAAe,GAAG,EAAE;IAAEC,KAAK,GAAG,EAAE;IAAEC,YAAY,GAAG,EAAE;IAAEC,eAAe,GAAG;EAAE,CAAG,GAAG,MAAMP,aAAa,CAACQ,oBAAoB,CAAC,CAC3I,UAAU,EACV,iBAAiB,EACjB,cAAc,EACd,OAAO,EACP,iBAAiB,CACpB,CAAC;EACF,MAAMC,WAAW,GAAGF,eAAe,CAC9BG,GAAG,CAAEC,CAAC,IAAK,GAAGA,CAAC,CAACC,KAAK,IAAID,CAAC,CAACE,OAAO,EAAE,CAAC,CACrCC,IAAI,CAAC,GAAG,CAAC;EACd,MAAMC,UAAU,GAAG,CACfZ,QAAQ,EACRC,eAAe,EACfE,YAAY,EACZD,KAAK,EACLF,QAAQ,EACRM,WAAW,CACd,CACIO,MAAM,CAACC,KAAK,IAAIA,KAAK,CAAC,CACtBH,IAAI,CAAC,GAAG,CAAC;EACd,OAAOC,UAAU,IAAId,SAAS,CAACC,SAAS;AAC5C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}