{"ast":null,"code":"import { CanceledError } from '../errors/CanceledError.mjs';\nimport '@aws-amplify/core/internals/utils';\nimport '../errors/validation.mjs';\nimport { parseRestApiServiceError } from './serviceError.mjs';\nimport { logger } from './logger.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * @internal\n */\nfunction createCancellableOperation(handler, abortController) {\n  const isInternalPost = targetHandler => !!abortController;\n  // For creating a cancellable operation for public REST APIs, we need to create an AbortController\n  // internally. Whereas for internal POST APIs, we need to accept in the AbortController from the\n  // callers.\n  const publicApisAbortController = new AbortController();\n  const publicApisAbortSignal = publicApisAbortController.signal;\n  const internalPostAbortSignal = abortController?.signal;\n  let abortReason;\n  const job = async () => {\n    try {\n      const response = await (isInternalPost(handler) ? handler() : handler(publicApisAbortSignal));\n      if (response.statusCode >= 300) {\n        throw await parseRestApiServiceError(response);\n      }\n      return response;\n    } catch (error) {\n      const abortSignal = internalPostAbortSignal ?? publicApisAbortSignal;\n      const message = abortReason ?? abortSignal.reason;\n      if (error.name === 'AbortError' || abortSignal?.aborted === true) {\n        const canceledError = new CanceledError({\n          ...(message && {\n            message\n          }),\n          underlyingError: error,\n          recoverySuggestion: 'The API request was explicitly canceled. If this is not intended, validate if you called the `cancel()` function on the API request erroneously.'\n        });\n        logger.debug(error);\n        throw canceledError;\n      }\n      logger.debug(error);\n      throw error;\n    }\n  };\n  if (isInternalPost()) {\n    return job();\n  } else {\n    const cancel = abortMessage => {\n      if (publicApisAbortSignal.aborted === true) {\n        return;\n      }\n      publicApisAbortController.abort(abortMessage);\n      // If abort reason is not supported, set a scoped reasons instead. The reason property inside an\n      // AbortSignal is a readonly property and trying to set it would throw an error.\n      if (abortMessage && publicApisAbortSignal.reason !== abortMessage) {\n        abortReason = abortMessage;\n      }\n    };\n    return {\n      response: job(),\n      cancel\n    };\n  }\n}\nexport { createCancellableOperation };","map":{"version":3,"names":["createCancellableOperation","handler","abortController","isInternalPost","targetHandler","publicApisAbortController","AbortController","publicApisAbortSignal","signal","internalPostAbortSignal","abortReason","job","response","statusCode","parseRestApiServiceError","error","abortSignal","message","reason","name","aborted","canceledError","CanceledError","underlyingError","recoverySuggestion","logger","debug","cancel","abortMessage","abort"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/api-rest/src/utils/createCancellableOperation.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { CanceledError } from '../errors';\nimport { parseRestApiServiceError } from './serviceError';\nimport { logger } from './logger';\n/**\n * @internal\n */\nexport function createCancellableOperation(handler, abortController) {\n    const isInternalPost = (targetHandler) => !!abortController;\n    // For creating a cancellable operation for public REST APIs, we need to create an AbortController\n    // internally. Whereas for internal POST APIs, we need to accept in the AbortController from the\n    // callers.\n    const publicApisAbortController = new AbortController();\n    const publicApisAbortSignal = publicApisAbortController.signal;\n    const internalPostAbortSignal = abortController?.signal;\n    let abortReason;\n    const job = async () => {\n        try {\n            const response = await (isInternalPost(handler)\n                ? handler()\n                : handler(publicApisAbortSignal));\n            if (response.statusCode >= 300) {\n                throw await parseRestApiServiceError(response);\n            }\n            return response;\n        }\n        catch (error) {\n            const abortSignal = internalPostAbortSignal ?? publicApisAbortSignal;\n            const message = abortReason ?? abortSignal.reason;\n            if (error.name === 'AbortError' || abortSignal?.aborted === true) {\n                const canceledError = new CanceledError({\n                    ...(message && { message }),\n                    underlyingError: error,\n                    recoverySuggestion: 'The API request was explicitly canceled. If this is not intended, validate if you called the `cancel()` function on the API request erroneously.',\n                });\n                logger.debug(error);\n                throw canceledError;\n            }\n            logger.debug(error);\n            throw error;\n        }\n    };\n    if (isInternalPost(handler)) {\n        return job();\n    }\n    else {\n        const cancel = (abortMessage) => {\n            if (publicApisAbortSignal.aborted === true) {\n                return;\n            }\n            publicApisAbortController.abort(abortMessage);\n            // If abort reason is not supported, set a scoped reasons instead. The reason property inside an\n            // AbortSignal is a readonly property and trying to set it would throw an error.\n            if (abortMessage && publicApisAbortSignal.reason !== abortMessage) {\n                abortReason = abortMessage;\n            }\n        };\n        return { response: job(), cancel };\n    }\n}\n"],"mappings":";;;;;;AAAA;AACA;AAIA;AACA;AACA;AACO,SAASA,0BAA0BA,CAACC,OAAO,EAAEC,eAAe,EAAE;EACjE,MAAMC,cAAc,GAAIC,aAAa,IAAK,CAAC,CAACF,eAAe;EAC/D;EACA;EACA;EACI,MAAMG,yBAAyB,GAAG,IAAIC,eAAe,EAAE;EACvD,MAAMC,qBAAqB,GAAGF,yBAAyB,CAACG,MAAM;EAC9D,MAAMC,uBAAuB,GAAGP,eAAe,EAAEM,MAAM;EACvD,IAAIE,WAAW;EACf,MAAMC,GAAG,GAAG,MAAAA,CAAA,KAAY;IACpB,IAAI;MACA,MAAMC,QAAQ,GAAG,OAAOT,cAAc,CAACF,OAAO,CAAC,GACzCA,OAAO,EAAE,GACTA,OAAO,CAACM,qBAAqB,CAAC,CAAC;MACrC,IAAIK,QAAQ,CAACC,UAAU,IAAI,GAAG,EAAE;QAC5B,MAAM,MAAMC,wBAAwB,CAACF,QAAQ,CAAC;MAC9D;MACY,OAAOA,QAAQ;IAC3B,CAAS,CACD,OAAOG,KAAK,EAAE;MACV,MAAMC,WAAW,GAAGP,uBAAuB,IAAIF,qBAAqB;MACpE,MAAMU,OAAO,GAAGP,WAAW,IAAIM,WAAW,CAACE,MAAM;MACjD,IAAIH,KAAK,CAACI,IAAI,KAAK,YAAY,IAAIH,WAAW,EAAEI,OAAO,KAAK,IAAI,EAAE;QAC9D,MAAMC,aAAa,GAAG,IAAIC,aAAa,CAAC;UACpC,IAAIL,OAAO,IAAI;YAAEA;UAAO,CAAE,CAAC;UAC3BM,eAAe,EAAER,KAAK;UACtBS,kBAAkB,EAAE;QACxC,CAAiB,CAAC;QACFC,MAAM,CAACC,KAAK,CAACX,KAAK,CAAC;QACnB,MAAMM,aAAa;MACnC;MACYI,MAAM,CAACC,KAAK,CAACX,KAAK,CAAC;MACnB,MAAMA,KAAK;IACvB;EACA,CAAK;EACD,IAAIZ,cAAc,CAAQ,CAAC,EAAE;IACzB,OAAOQ,GAAG,EAAE;EACpB,CAAK,MACI;IACD,MAAMgB,MAAM,GAAIC,YAAY,IAAK;MAC7B,IAAIrB,qBAAqB,CAACa,OAAO,KAAK,IAAI,EAAE;QACxC;MAChB;MACYf,yBAAyB,CAACwB,KAAK,CAACD,YAAY,CAAC;MACzD;MACA;MACY,IAAIA,YAAY,IAAIrB,qBAAqB,CAACW,MAAM,KAAKU,YAAY,EAAE;QAC/DlB,WAAW,GAAGkB,YAAY;MAC1C;IACA,CAAS;IACD,OAAO;MAAEhB,QAAQ,EAAED,GAAG,EAAE;MAAEgB;IAAM,CAAE;EAC1C;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}