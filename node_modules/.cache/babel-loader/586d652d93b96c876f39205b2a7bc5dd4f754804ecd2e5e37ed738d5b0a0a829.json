{"ast":null,"code":"import { AmplifyUrl, getAmplifyUserAgent } from '@aws-amplify/core/internals/utils';\nimport { post } from '@aws-amplify/api-rest/internals';\nimport '../../utils/resolveConfig.mjs';\nimport { resolveLibraryOptions } from '../../utils/resolveLibraryOptions.mjs';\nimport { repackageUnauthorizedError } from '../../utils/errors/repackageAuthError.mjs';\nimport { headerBasedAuth } from '../graphqlAuth.mjs';\nimport { isGraphQLResponseWithErrors } from '../utils/runtimeTypeGuards/isGraphQLResponseWithErrors.mjs';\nconst USER_AGENT_HEADER = 'x-amz-user-agent';\n// This is effectively a copy of InternalGraphQLAPI.ts._graphql(...)\n// Our existing unit tests are tightly coupled to the implementation, so i was unable to refactor\n// and extend _graphql() without having to change a bunch of tests as well... which in turn reduces confidence\n// that this feature will _not affect_ GQL behavior.\nasync function appsyncRequest(amplify, options) {\n  let additionalHeaders = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let abortController = arguments.length > 3 ? arguments[3] : undefined;\n  let customUserAgentDetails = arguments.length > 4 ? arguments[4] : undefined;\n  const {\n    region,\n    appSyncGraphqlEndpoint: endpoint,\n    authenticationType: authMode,\n    query,\n    variables\n  } = options;\n  if (!endpoint) {\n    throw new Error('No endpoint');\n  }\n  const {\n    withCredentials\n  } = resolveLibraryOptions(amplify);\n  const headers = await requestHeaders(amplify, options, additionalHeaders, customUserAgentDetails);\n  const body = {\n    channel: query,\n    events: variables\n  };\n  const signingServiceInfo = ['apiKey', 'none'].includes(authMode) ? undefined : {\n    service: 'appsync',\n    region\n  };\n  const {\n    body: responseBody\n  } = await post(amplify, {\n    url: new AmplifyUrl(endpoint),\n    options: {\n      headers,\n      body,\n      signingServiceInfo,\n      withCredentials\n    },\n    abortController\n  });\n  const response = await responseBody.json();\n  if (isGraphQLResponseWithErrors(response)) {\n    throw repackageUnauthorizedError(response);\n  }\n  return response;\n}\n/**\n * Computes all the necessary HTTP headers for the request based on:\n * 1. Operation-level header options\n * 2. Amplify.configure custom headers\n * 3. AuthZ headers for explicit auth mode specified for operation ?? default auth mode in config\n *\n * @returns HTTP request headers key/value\n */\nasync function requestHeaders(amplify, options, additionalHeaders, customUserAgentDetails) {\n  const {\n    apiKey,\n    appSyncGraphqlEndpoint: endpoint,\n    authenticationType: authMode,\n    query,\n    variables,\n    authToken\n  } = options;\n  const {\n    headers: customHeadersFn\n  } = resolveLibraryOptions(amplify);\n  let additionalCustomHeaders;\n  if (typeof additionalHeaders === 'function') {\n    const requestOptions = {\n      method: 'POST',\n      url: new AmplifyUrl(endpoint).toString(),\n      queryString: query\n    };\n    additionalCustomHeaders = await additionalHeaders(requestOptions);\n  } else {\n    additionalCustomHeaders = additionalHeaders;\n  }\n  // if an authorization header is set, have the operation-level authToken take precedence\n  if (authToken) {\n    additionalCustomHeaders = {\n      ...additionalCustomHeaders,\n      Authorization: authToken\n    };\n  }\n  const authHeaders = await headerBasedAuth(amplify, authMode, apiKey, additionalCustomHeaders);\n  const customHeaders = customHeadersFn && (await customHeadersFn({\n    query,\n    variables: variables\n  }));\n  const headers = {\n    ...authHeaders,\n    // Custom headers included in Amplify configuration options:\n    ...customHeaders,\n    // Custom headers from individual requests or API client configuration:\n    ...additionalCustomHeaders,\n    // User agent headers:\n    [USER_AGENT_HEADER]: getAmplifyUserAgent(customUserAgentDetails)\n  };\n  return headers;\n}\nexport { appsyncRequest };","map":{"version":3,"names":["USER_AGENT_HEADER","appsyncRequest","amplify","options","additionalHeaders","arguments","length","undefined","abortController","customUserAgentDetails","region","appSyncGraphqlEndpoint","endpoint","authenticationType","authMode","query","variables","Error","withCredentials","resolveLibraryOptions","headers","requestHeaders","body","channel","events","signingServiceInfo","includes","service","responseBody","post","url","AmplifyUrl","response","json","isGraphQLResponseWithErrors","repackageUnauthorizedError","apiKey","authToken","customHeadersFn","additionalCustomHeaders","requestOptions","method","toString","queryString","Authorization","authHeaders","headerBasedAuth","customHeaders","getAmplifyUserAgent"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/api-graphql/src/internals/events/appsyncRequest.ts"],"sourcesContent":["import { AmplifyUrl, getAmplifyUserAgent, } from '@aws-amplify/core/internals/utils';\nimport { post } from '@aws-amplify/api-rest/internals';\nimport { resolveLibraryOptions } from '../../utils';\nimport { repackageUnauthorizedError } from '../../utils/errors/repackageAuthError';\nimport { headerBasedAuth } from '../graphqlAuth';\nimport { isGraphQLResponseWithErrors } from '../utils/runtimeTypeGuards/isGraphQLResponseWithErrors';\nconst USER_AGENT_HEADER = 'x-amz-user-agent';\n// This is effectively a copy of InternalGraphQLAPI.ts._graphql(...)\n// Our existing unit tests are tightly coupled to the implementation, so i was unable to refactor\n// and extend _graphql() without having to change a bunch of tests as well... which in turn reduces confidence\n// that this feature will _not affect_ GQL behavior.\nexport async function appsyncRequest(amplify, options, additionalHeaders = {}, abortController, customUserAgentDetails) {\n    const { region, appSyncGraphqlEndpoint: endpoint, authenticationType: authMode, query, variables, } = options;\n    if (!endpoint) {\n        throw new Error('No endpoint');\n    }\n    const { withCredentials } = resolveLibraryOptions(amplify);\n    const headers = await requestHeaders(amplify, options, additionalHeaders, customUserAgentDetails);\n    const body = {\n        channel: query,\n        events: variables,\n    };\n    const signingServiceInfo = ['apiKey', 'none'].includes(authMode)\n        ? undefined\n        : {\n            service: 'appsync',\n            region,\n        };\n    const { body: responseBody } = await post(amplify, {\n        url: new AmplifyUrl(endpoint),\n        options: {\n            headers,\n            body,\n            signingServiceInfo,\n            withCredentials,\n        },\n        abortController,\n    });\n    const response = await responseBody.json();\n    if (isGraphQLResponseWithErrors(response)) {\n        throw repackageUnauthorizedError(response);\n    }\n    return response;\n}\n/**\n * Computes all the necessary HTTP headers for the request based on:\n * 1. Operation-level header options\n * 2. Amplify.configure custom headers\n * 3. AuthZ headers for explicit auth mode specified for operation ?? default auth mode in config\n *\n * @returns HTTP request headers key/value\n */\nasync function requestHeaders(amplify, options, additionalHeaders, customUserAgentDetails) {\n    const { apiKey, appSyncGraphqlEndpoint: endpoint, authenticationType: authMode, query, variables, authToken, } = options;\n    const { headers: customHeadersFn } = resolveLibraryOptions(amplify);\n    let additionalCustomHeaders;\n    if (typeof additionalHeaders === 'function') {\n        const requestOptions = {\n            method: 'POST',\n            url: new AmplifyUrl(endpoint).toString(),\n            queryString: query,\n        };\n        additionalCustomHeaders = await additionalHeaders(requestOptions);\n    }\n    else {\n        additionalCustomHeaders = additionalHeaders;\n    }\n    // if an authorization header is set, have the operation-level authToken take precedence\n    if (authToken) {\n        additionalCustomHeaders = {\n            ...additionalCustomHeaders,\n            Authorization: authToken,\n        };\n    }\n    const authHeaders = await headerBasedAuth(amplify, authMode, apiKey, additionalCustomHeaders);\n    const customHeaders = customHeadersFn &&\n        (await customHeadersFn({\n            query,\n            variables: variables,\n        }));\n    const headers = {\n        ...authHeaders,\n        // Custom headers included in Amplify configuration options:\n        ...customHeaders,\n        // Custom headers from individual requests or API client configuration:\n        ...additionalCustomHeaders,\n        // User agent headers:\n        [USER_AGENT_HEADER]: getAmplifyUserAgent(customUserAgentDetails),\n    };\n    return headers;\n}\n"],"mappings":";;;;;;;AAMA,MAAMA,iBAAiB,GAAG,kBAAkB;AAC5C;AACA;AACA;AACA;AACO,eAAeC,cAAcA,CAACC,OAAO,EAAEC,OAAO,EAAmE;EAAA,IAAjEC,iBAAiB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,IAAEG,eAAe,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAAA,IAAEE,sBAAsB,GAAAJ,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAClH,MAAM;IAAEG,MAAM;IAAEC,sBAAsB,EAAEC,QAAQ;IAAEC,kBAAkB,EAAEC,QAAQ;IAAEC,KAAK;IAAEC;EAAS,CAAG,GAAGb,OAAO;EAC7G,IAAI,CAACS,QAAQ,EAAE;IACX,MAAM,IAAIK,KAAK,CAAC,aAAa,CAAC;EACtC;EACI,MAAM;IAAEC;EAAe,CAAE,GAAGC,qBAAqB,CAACjB,OAAO,CAAC;EAC1D,MAAMkB,OAAO,GAAG,MAAMC,cAAc,CAACnB,OAAO,EAAEC,OAAO,EAAEC,iBAAiB,EAAEK,sBAAsB,CAAC;EACjG,MAAMa,IAAI,GAAG;IACTC,OAAO,EAAER,KAAK;IACdS,MAAM,EAAER;EAChB,CAAK;EACD,MAAMS,kBAAkB,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAACC,QAAQ,CAACZ,QAAQ,CAAC,GAC1DP,SAAS,GACT;IACEoB,OAAO,EAAE,SAAS;IAClBjB;EACZ,CAAS;EACL,MAAM;IAAEY,IAAI,EAAEM;EAAY,CAAE,GAAG,MAAMC,IAAI,CAAC3B,OAAO,EAAE;IAC/C4B,GAAG,EAAE,IAAIC,UAAU,CAACnB,QAAQ,CAAC;IAC7BT,OAAO,EAAE;MACLiB,OAAO;MACPE,IAAI;MACJG,kBAAkB;MAClBP;IACZ,CAAS;IACDV;EACR,CAAK,CAAC;EACF,MAAMwB,QAAQ,GAAG,MAAMJ,YAAY,CAACK,IAAI,EAAE;EAC1C,IAAIC,2BAA2B,CAACF,QAAQ,CAAC,EAAE;IACvC,MAAMG,0BAA0B,CAACH,QAAQ,CAAC;EAClD;EACI,OAAOA,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeX,cAAcA,CAACnB,OAAO,EAAEC,OAAO,EAAEC,iBAAiB,EAAEK,sBAAsB,EAAE;EACvF,MAAM;IAAE2B,MAAM;IAAEzB,sBAAsB,EAAEC,QAAQ;IAAEC,kBAAkB,EAAEC,QAAQ;IAAEC,KAAK;IAAEC,SAAS;IAAEqB;EAAS,CAAG,GAAGlC,OAAO;EACxH,MAAM;IAAEiB,OAAO,EAAEkB;EAAe,CAAE,GAAGnB,qBAAqB,CAACjB,OAAO,CAAC;EACnE,IAAIqC,uBAAuB;EAC3B,IAAI,OAAOnC,iBAAiB,KAAK,UAAU,EAAE;IACzC,MAAMoC,cAAc,GAAG;MACnBC,MAAM,EAAE,MAAM;MACdX,GAAG,EAAE,IAAIC,UAAU,CAACnB,QAAQ,CAAC,CAAC8B,QAAQ,EAAE;MACxCC,WAAW,EAAE5B;IACzB,CAAS;IACDwB,uBAAuB,GAAG,MAAMnC,iBAAiB,CAACoC,cAAc,CAAC;EACzE,CAAK,MACI;IACDD,uBAAuB,GAAGnC,iBAAiB;EACnD;EACA;EACI,IAAIiC,SAAS,EAAE;IACXE,uBAAuB,GAAG;MACtB,GAAGA,uBAAuB;MAC1BK,aAAa,EAAEP;IAC3B,CAAS;EACT;EACI,MAAMQ,WAAW,GAAG,MAAMC,eAAe,CAAC5C,OAAO,EAAEY,QAAQ,EAAEsB,MAAM,EAAEG,uBAAuB,CAAC;EAC7F,MAAMQ,aAAa,GAAGT,eAAe,KAChC,MAAMA,eAAe,CAAC;IACnBvB,KAAK;IACLC,SAAS,EAAEA;EACvB,CAAS,CAAC,CAAC;EACP,MAAMI,OAAO,GAAG;IACZ,GAAGyB,WAAW;IACtB;IACQ,GAAGE,aAAa;IACxB;IACQ,GAAGR,uBAAuB;IAClC;IACQ,CAACvC,iBAAiB,GAAGgD,mBAAmB,CAACvC,sBAAsB;EACvE,CAAK;EACD,OAAOW,OAAO;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}