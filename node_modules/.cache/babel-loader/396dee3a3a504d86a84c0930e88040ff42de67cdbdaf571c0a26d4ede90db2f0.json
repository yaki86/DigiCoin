{"ast":null,"code":"import { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { assertAuthTokens } from '../utils/types.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { toAttributeType } from '../utils/apiHelpers.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../types/errors.mjs';\nimport { createUpdateUserAttributesClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createUpdateUserAttributesClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Updates user's attributes while authenticated.\n *\n * @param input - The UpdateUserAttributesInput object\n * @returns UpdateUserAttributesOutput\n * @throws - {@link UpdateUserAttributesException}\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nconst updateUserAttributes = async input => {\n  const {\n    userAttributes,\n    options\n  } = input;\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  const clientMetadata = options?.clientMetadata;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolEndpoint,\n    userPoolId\n  } = authConfig;\n  const {\n    tokens\n  } = await fetchAuthSession({\n    forceRefresh: false\n  });\n  assertAuthTokens(tokens);\n  const updateUserAttributesClient = createUpdateUserAttributesClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const {\n    CodeDeliveryDetailsList\n  } = await updateUserAttributesClient({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.UpdateUserAttributes)\n  }, {\n    AccessToken: tokens.accessToken.toString(),\n    ClientMetadata: clientMetadata,\n    UserAttributes: toAttributeType(userAttributes)\n  });\n  return {\n    ...getConfirmedAttributes(userAttributes),\n    ...getUnConfirmedAttributes(CodeDeliveryDetailsList)\n  };\n};\nfunction getConfirmedAttributes(attributes) {\n  const confirmedAttributes = {};\n  Object.keys(attributes)?.forEach(key => {\n    confirmedAttributes[key] = {\n      isUpdated: true,\n      nextStep: {\n        updateAttributeStep: 'DONE'\n      }\n    };\n  });\n  return confirmedAttributes;\n}\nfunction getUnConfirmedAttributes(codeDeliveryDetailsList) {\n  const unConfirmedAttributes = {};\n  codeDeliveryDetailsList?.forEach(codeDeliveryDetails => {\n    const {\n      AttributeName,\n      DeliveryMedium,\n      Destination\n    } = codeDeliveryDetails;\n    if (AttributeName) unConfirmedAttributes[AttributeName] = {\n      isUpdated: false,\n      nextStep: {\n        updateAttributeStep: 'CONFIRM_ATTRIBUTE_WITH_CODE',\n        codeDeliveryDetails: {\n          attributeName: AttributeName,\n          deliveryMedium: DeliveryMedium,\n          destination: Destination\n        }\n      }\n    };\n  });\n  return unConfirmedAttributes;\n}\nexport { updateUserAttributes };","map":{"version":3,"names":["updateUserAttributes","input","userAttributes","options","authConfig","Amplify","getConfig","Auth","Cognito","clientMetadata","assertTokenProviderConfig","userPoolEndpoint","userPoolId","tokens","fetchAuthSession","forceRefresh","assertAuthTokens","updateUserAttributesClient","createUpdateUserAttributesClient","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","CodeDeliveryDetailsList","region","getRegionFromUserPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","UpdateUserAttributes","AccessToken","accessToken","toString","ClientMetadata","UserAttributes","toAttributeType","getConfirmedAttributes","getUnConfirmedAttributes","attributes","confirmedAttributes","Object","keys","forEach","key","isUpdated","nextStep","updateAttributeStep","codeDeliveryDetailsList","unConfirmedAttributes","codeDeliveryDetails","AttributeName","DeliveryMedium","Destination","attributeName","deliveryMedium","destination"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/auth/src/providers/cognito/apis/updateUserAttributes.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { assertAuthTokens } from '../utils/types';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { toAttributeType } from '../utils/apiHelpers';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { createUpdateUserAttributesClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\n/**\n * Updates user's attributes while authenticated.\n *\n * @param input - The UpdateUserAttributesInput object\n * @returns UpdateUserAttributesOutput\n * @throws - {@link UpdateUserAttributesException}\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport const updateUserAttributes = async (input) => {\n    const { userAttributes, options } = input;\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    const clientMetadata = options?.clientMetadata;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolEndpoint, userPoolId } = authConfig;\n    const { tokens } = await fetchAuthSession({ forceRefresh: false });\n    assertAuthTokens(tokens);\n    const updateUserAttributesClient = createUpdateUserAttributesClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const { CodeDeliveryDetailsList } = await updateUserAttributesClient({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.UpdateUserAttributes),\n    }, {\n        AccessToken: tokens.accessToken.toString(),\n        ClientMetadata: clientMetadata,\n        UserAttributes: toAttributeType(userAttributes),\n    });\n    return {\n        ...getConfirmedAttributes(userAttributes),\n        ...getUnConfirmedAttributes(CodeDeliveryDetailsList),\n    };\n};\nfunction getConfirmedAttributes(attributes) {\n    const confirmedAttributes = {};\n    Object.keys(attributes)?.forEach(key => {\n        confirmedAttributes[key] = {\n            isUpdated: true,\n            nextStep: {\n                updateAttributeStep: 'DONE',\n            },\n        };\n    });\n    return confirmedAttributes;\n}\nfunction getUnConfirmedAttributes(codeDeliveryDetailsList) {\n    const unConfirmedAttributes = {};\n    codeDeliveryDetailsList?.forEach(codeDeliveryDetails => {\n        const { AttributeName, DeliveryMedium, Destination } = codeDeliveryDetails;\n        if (AttributeName)\n            unConfirmedAttributes[AttributeName] = {\n                isUpdated: false,\n                nextStep: {\n                    updateAttributeStep: 'CONFIRM_ATTRIBUTE_WITH_CODE',\n                    codeDeliveryDetails: {\n                        attributeName: AttributeName,\n                        deliveryMedium: DeliveryMedium,\n                        destination: Destination,\n                    },\n                },\n            };\n    });\n    return unConfirmedAttributes;\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,oBAAoB,GAAG,MAAOC,KAAK,IAAK;EACjD,MAAM;IAAEC,cAAc;IAAEC;EAAO,CAAE,GAAGF,KAAK;EACzC,MAAMG,UAAU,GAAGC,OAAO,CAACC,SAAS,EAAE,CAACC,IAAI,EAAEC,OAAO;EACpD,MAAMC,cAAc,GAAGN,OAAO,EAAEM,cAAc;EAC9CC,yBAAyB,CAACN,UAAU,CAAC;EACrC,MAAM;IAAEO,gBAAgB;IAAEC;EAAU,CAAE,GAAGR,UAAU;EACnD,MAAM;IAAES;EAAM,CAAE,GAAG,MAAMC,gBAAgB,CAAC;IAAEC,YAAY,EAAE;EAAK,CAAE,CAAC;EAClEC,gBAAgB,CAACH,MAAM,CAAC;EACxB,MAAMI,0BAA0B,GAAGC,gCAAgC,CAAC;IAChEC,gBAAgB,EAAEC,qCAAqC,CAAC;MACpDC,gBAAgB,EAAEV;IAC9B,CAAS;EACT,CAAK,CAAC;EACF,MAAM;IAAEW;EAAuB,CAAE,GAAG,MAAML,0BAA0B,CAAC;IACjEM,MAAM,EAAEC,uBAAuB,CAACZ,UAAU,CAAC;IAC3Ca,cAAc,EAAEC,qBAAqB,CAACC,UAAU,CAACC,oBAAoB;EAC7E,CAAK,EAAE;IACCC,WAAW,EAAEhB,MAAM,CAACiB,WAAW,CAACC,QAAQ,EAAE;IAC1CC,cAAc,EAAEvB,cAAc;IAC9BwB,cAAc,EAAEC,eAAe,CAAChC,cAAc;EACtD,CAAK,CAAC;EACF,OAAO;IACH,GAAGiC,sBAAsB,CAACjC,cAAc,CAAC;IACzC,GAAGkC,wBAAwB,CAACd,uBAAuB;EAC3D,CAAK;AACL;AACA,SAASa,sBAAsBA,CAACE,UAAU,EAAE;EACxC,MAAMC,mBAAmB,GAAG,EAAE;EAC9BC,MAAM,CAACC,IAAI,CAACH,UAAU,CAAC,EAAEI,OAAO,CAACC,GAAG,IAAI;IACpCJ,mBAAmB,CAACI,GAAG,CAAC,GAAG;MACvBC,SAAS,EAAE,IAAI;MACfC,QAAQ,EAAE;QACNC,mBAAmB,EAAE;MACrC;IACA,CAAS;EACT,CAAK,CAAC;EACF,OAAOP,mBAAmB;AAC9B;AACA,SAASF,wBAAwBA,CAACU,uBAAuB,EAAE;EACvD,MAAMC,qBAAqB,GAAG,EAAE;EAChCD,uBAAuB,EAAEL,OAAO,CAACO,mBAAmB,IAAI;IACpD,MAAM;MAAEC,aAAa;MAAEC,cAAc;MAAEC;IAAW,CAAE,GAAGH,mBAAmB;IAC1E,IAAIC,aAAa,EACbF,qBAAqB,CAACE,aAAa,CAAC,GAAG;MACnCN,SAAS,EAAE,KAAK;MAChBC,QAAQ,EAAE;QACNC,mBAAmB,EAAE,6BAA6B;QAClDG,mBAAmB,EAAE;UACjBI,aAAa,EAAEH,aAAa;UAC5BI,cAAc,EAAEH,cAAc;UAC9BI,WAAW,EAAEH;QACrC;MACA;IACA,CAAa;EACb,CAAK,CAAC;EACF,OAAOJ,qBAAqB;AAChC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}