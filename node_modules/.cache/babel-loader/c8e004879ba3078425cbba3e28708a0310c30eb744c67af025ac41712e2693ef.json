{"ast":null,"code":"import { generateGraphQLDocument, buildGraphQLVariables, authModeParams, getCustomHeaders, flattenItems, initializeModel } from '../APIClient.mjs';\nimport { handleListGraphQlError } from './utils.mjs';\nimport { selfAwareAsync } from '../../utils/selfAwareAsync.mjs';\nimport { extendCancellability } from '../cancellation.mjs';\nimport { createUserAgentOverride } from '../ai/getCustomUserAgentDetails.mjs';\nfunction listFactory(client, modelIntrospection, model, getInternals, context = false, customUserAgentDetails) {\n  const listWithContext = (contextSpec, args) => {\n    return _list(client, modelIntrospection, model, getInternals, args, contextSpec, customUserAgentDetails);\n  };\n  const list = args => {\n    return _list(client, modelIntrospection, model, getInternals, args, undefined, customUserAgentDetails);\n  };\n  return context ? listWithContext : list;\n}\nfunction _list(client, modelIntrospection, model, getInternals, args, contextSpec, customUserAgentDetails) {\n  return selfAwareAsync(async resultPromise => {\n    const {\n      name\n    } = model;\n    const query = generateGraphQLDocument(modelIntrospection, model, 'LIST', args);\n    const variables = buildGraphQLVariables(model, 'LIST', args, modelIntrospection);\n    const auth = authModeParams(client, getInternals, args);\n    const headers = getCustomHeaders(client, getInternals, args?.headers);\n    const userAgentOverride = createUserAgentOverride(customUserAgentDetails);\n    try {\n      const basePromise = contextSpec ? client.graphql(contextSpec, {\n        ...auth,\n        query,\n        variables\n      }, headers) : client.graphql({\n        ...auth,\n        query,\n        variables,\n        ...userAgentOverride\n      }, headers);\n      const extendedPromise = extendCancellability(basePromise, resultPromise);\n      const {\n        data,\n        extensions\n      } = await extendedPromise;\n      // flatten response\n      if (data !== undefined) {\n        const [key] = Object.keys(data);\n        if (data[key].items) {\n          const flattenedResult = data[key].items.map(value => flattenItems(modelIntrospection, name, value));\n          // don't init if custom selection set\n          if (args?.selectionSet) {\n            return {\n              data: flattenedResult,\n              nextToken: data[key].nextToken,\n              extensions\n            };\n          } else {\n            const initialized = initializeModel(client, name, flattenedResult, modelIntrospection, auth.authMode, auth.authToken, !!contextSpec);\n            return {\n              data: initialized,\n              nextToken: data[key].nextToken,\n              extensions\n            };\n          }\n        }\n        return {\n          data: data[key],\n          nextToken: data[key].nextToken,\n          extensions\n        };\n      }\n    } catch (error) {\n      /**\n       * The `data` type returned by `error` here could be:\n       * 1) `null`\n       * 2) an empty object\n       * 3) \"populated\" but with a `null` value `data: { listPosts: null }`\n       * 4) actual records `data: { listPosts: items: [{ id: '1', ...etc }] }`\n       */\n      const {\n        data,\n        errors\n      } = error;\n      // `data` is not `null`, and is not an empty object:\n      if (data !== undefined && data !== null && Object.keys(data).length !== 0 && errors) {\n        const [key] = Object.keys(data);\n        if (data[key]?.items) {\n          const flattenedResult = data[key].items.map(value => flattenItems(modelIntrospection, name, value));\n          /**\n           * Check exists since `flattenedResult` could be `null`.\n           * if `flattenedResult` exists, result is an actual record.\n           */\n          if (flattenedResult) {\n            // don't init if custom selection set\n            if (args?.selectionSet) {\n              return {\n                data: flattenedResult,\n                nextToken: data[key]?.nextToken,\n                errors\n              };\n            } else {\n              const initialized = initializeModel(client, name, flattenedResult, modelIntrospection, auth.authMode, auth.authToken, !!contextSpec);\n              // data is full record w/out selection set:\n              return {\n                data: initialized,\n                nextToken: data[key]?.nextToken,\n                errors\n              };\n            }\n          }\n          return {\n            data: data[key],\n            nextToken: data[key]?.nextToken,\n            errors\n          };\n        } else {\n          // response is of type `data: { getPost: null }`)\n          return handleListGraphQlError(error);\n        }\n      } else {\n        // `data` is `null` or an empty object:\n        return handleListGraphQlError(error);\n      }\n    }\n  });\n}\nexport { listFactory };","map":{"version":3,"names":["listFactory","client","modelIntrospection","model","getInternals","context","customUserAgentDetails","listWithContext","contextSpec","args","_list","list","undefined","selfAwareAsync","resultPromise","name","query","generateGraphQLDocument","variables","buildGraphQLVariables","auth","authModeParams","headers","getCustomHeaders","userAgentOverride","createUserAgentOverride","basePromise","graphql","extendedPromise","extendCancellability","data","extensions","key","Object","keys","items","flattenedResult","map","value","flattenItems","selectionSet","nextToken","initialized","initializeModel","authMode","authToken","error","errors","length","handleListGraphQlError"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/data-schema/src/runtime/internals/operations/list.ts"],"sourcesContent":["import { authModeParams, buildGraphQLVariables, flattenItems, generateGraphQLDocument, getCustomHeaders, initializeModel, } from '../APIClient';\nimport { handleListGraphQlError } from './utils';\nimport { selfAwareAsync } from '../../utils';\nimport { extendCancellability } from '../cancellation';\nimport { createUserAgentOverride } from '../ai/getCustomUserAgentDetails';\nexport function listFactory(client, modelIntrospection, model, getInternals, context = false, customUserAgentDetails) {\n    const listWithContext = (contextSpec, args) => {\n        return _list(client, modelIntrospection, model, getInternals, args, contextSpec, customUserAgentDetails);\n    };\n    const list = (args) => {\n        return _list(client, modelIntrospection, model, getInternals, args, undefined, customUserAgentDetails);\n    };\n    return context ? listWithContext : list;\n}\nfunction _list(client, modelIntrospection, model, getInternals, args, contextSpec, customUserAgentDetails) {\n    return selfAwareAsync(async (resultPromise) => {\n        const { name } = model;\n        const query = generateGraphQLDocument(modelIntrospection, model, 'LIST', args);\n        const variables = buildGraphQLVariables(model, 'LIST', args, modelIntrospection);\n        const auth = authModeParams(client, getInternals, args);\n        const headers = getCustomHeaders(client, getInternals, args?.headers);\n        const userAgentOverride = createUserAgentOverride(customUserAgentDetails);\n        try {\n            const basePromise = contextSpec\n                ? client.graphql(contextSpec, {\n                    ...auth,\n                    query,\n                    variables,\n                }, headers)\n                : client.graphql({\n                    ...auth,\n                    query,\n                    variables,\n                    ...userAgentOverride,\n                }, headers);\n            const extendedPromise = extendCancellability(basePromise, resultPromise);\n            const { data, extensions } = await extendedPromise;\n            // flatten response\n            if (data !== undefined) {\n                const [key] = Object.keys(data);\n                if (data[key].items) {\n                    const flattenedResult = data[key].items.map((value) => flattenItems(modelIntrospection, name, value));\n                    // don't init if custom selection set\n                    if (args?.selectionSet) {\n                        return {\n                            data: flattenedResult,\n                            nextToken: data[key].nextToken,\n                            extensions,\n                        };\n                    }\n                    else {\n                        const initialized = initializeModel(client, name, flattenedResult, modelIntrospection, auth.authMode, auth.authToken, !!contextSpec);\n                        return {\n                            data: initialized,\n                            nextToken: data[key].nextToken,\n                            extensions,\n                        };\n                    }\n                }\n                return {\n                    data: data[key],\n                    nextToken: data[key].nextToken,\n                    extensions,\n                };\n            }\n        }\n        catch (error) {\n            /**\n             * The `data` type returned by `error` here could be:\n             * 1) `null`\n             * 2) an empty object\n             * 3) \"populated\" but with a `null` value `data: { listPosts: null }`\n             * 4) actual records `data: { listPosts: items: [{ id: '1', ...etc }] }`\n             */\n            const { data, errors } = error;\n            // `data` is not `null`, and is not an empty object:\n            if (data !== undefined &&\n                data !== null &&\n                Object.keys(data).length !== 0 &&\n                errors) {\n                const [key] = Object.keys(data);\n                if (data[key]?.items) {\n                    const flattenedResult = data[key].items.map((value) => flattenItems(modelIntrospection, name, value));\n                    /**\n                     * Check exists since `flattenedResult` could be `null`.\n                     * if `flattenedResult` exists, result is an actual record.\n                     */\n                    if (flattenedResult) {\n                        // don't init if custom selection set\n                        if (args?.selectionSet) {\n                            return {\n                                data: flattenedResult,\n                                nextToken: data[key]?.nextToken,\n                                errors,\n                            };\n                        }\n                        else {\n                            const initialized = initializeModel(client, name, flattenedResult, modelIntrospection, auth.authMode, auth.authToken, !!contextSpec);\n                            // data is full record w/out selection set:\n                            return {\n                                data: initialized,\n                                nextToken: data[key]?.nextToken,\n                                errors,\n                            };\n                        }\n                    }\n                    return {\n                        data: data[key],\n                        nextToken: data[key]?.nextToken,\n                        errors,\n                    };\n                }\n                else {\n                    // response is of type `data: { getPost: null }`)\n                    return handleListGraphQlError(error);\n                }\n            }\n            else {\n                // `data` is `null` or an empty object:\n                return handleListGraphQlError(error);\n            }\n        }\n    });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}