{"ast":null,"code":"import { deDupeAsyncFunction, assertTokenProviderConfig, decodeJWT } from '@aws-amplify/core/internals/utils';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { assertAuthTokensWithRefreshToken } from './types.mjs';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { createInitiateAuthClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createInitiateAuthClient.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../types/errors.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\nimport { getUserContextData } from './userContextData.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst refreshAuthTokensFunction = async ({\n  tokens,\n  authConfig,\n  username\n}) => {\n  assertTokenProviderConfig(authConfig?.Cognito);\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = authConfig.Cognito;\n  const region = getRegionFromUserPoolId(userPoolId);\n  assertAuthTokensWithRefreshToken(tokens);\n  const refreshTokenString = tokens.refreshToken;\n  const AuthParameters = {\n    REFRESH_TOKEN: refreshTokenString\n  };\n  if (tokens.deviceMetadata?.deviceKey) {\n    AuthParameters.DEVICE_KEY = tokens.deviceMetadata.deviceKey;\n  }\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const initiateAuth = createInitiateAuthClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const {\n    AuthenticationResult\n  } = await initiateAuth({\n    region\n  }, {\n    ClientId: userPoolClientId,\n    AuthFlow: 'REFRESH_TOKEN_AUTH',\n    AuthParameters,\n    UserContextData\n  });\n  const accessToken = decodeJWT(AuthenticationResult?.AccessToken ?? '');\n  const idToken = AuthenticationResult?.IdToken ? decodeJWT(AuthenticationResult.IdToken) : undefined;\n  const {\n    iat\n  } = accessToken.payload;\n  // This should never happen. If it does, it's a bug from the service.\n  if (!iat) {\n    throw new AuthError({\n      name: 'iatNotFoundException',\n      message: 'iat not found in access token'\n    });\n  }\n  const clockDrift = iat * 1000 - new Date().getTime();\n  return {\n    accessToken,\n    idToken,\n    clockDrift,\n    refreshToken: refreshTokenString,\n    username\n  };\n};\nconst refreshAuthTokens = deDupeAsyncFunction(refreshAuthTokensFunction);\nconst refreshAuthTokensWithoutDedupe = refreshAuthTokensFunction;\nexport { refreshAuthTokens, refreshAuthTokensWithoutDedupe };","map":{"version":3,"names":["refreshAuthTokensFunction","tokens","authConfig","username","assertTokenProviderConfig","Cognito","userPoolId","userPoolClientId","userPoolEndpoint","region","getRegionFromUserPoolId","assertAuthTokensWithRefreshToken","refreshTokenString","refreshToken","AuthParameters","REFRESH_TOKEN","deviceMetadata","deviceKey","DEVICE_KEY","UserContextData","getUserContextData","initiateAuth","createInitiateAuthClient","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","AuthenticationResult","ClientId","AuthFlow","accessToken","decodeJWT","AccessToken","idToken","IdToken","undefined","iat","payload","AuthError","name","message","clockDrift","Date","getTime","refreshAuthTokens","deDupeAsyncFunction","refreshAuthTokensWithoutDedupe"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/auth/src/providers/cognito/utils/refreshAuthTokens.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { assertTokenProviderConfig, deDupeAsyncFunction, decodeJWT, } from '@aws-amplify/core/internals/utils';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { assertAuthTokensWithRefreshToken } from '../utils/types';\nimport { AuthError } from '../../../errors/AuthError';\nimport { createInitiateAuthClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\nimport { getUserContextData } from './userContextData';\nconst refreshAuthTokensFunction = async ({ tokens, authConfig, username, }) => {\n    assertTokenProviderConfig(authConfig?.Cognito);\n    const { userPoolId, userPoolClientId, userPoolEndpoint } = authConfig.Cognito;\n    const region = getRegionFromUserPoolId(userPoolId);\n    assertAuthTokensWithRefreshToken(tokens);\n    const refreshTokenString = tokens.refreshToken;\n    const AuthParameters = {\n        REFRESH_TOKEN: refreshTokenString,\n    };\n    if (tokens.deviceMetadata?.deviceKey) {\n        AuthParameters.DEVICE_KEY = tokens.deviceMetadata.deviceKey;\n    }\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const initiateAuth = createInitiateAuthClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const { AuthenticationResult } = await initiateAuth({ region }, {\n        ClientId: userPoolClientId,\n        AuthFlow: 'REFRESH_TOKEN_AUTH',\n        AuthParameters,\n        UserContextData,\n    });\n    const accessToken = decodeJWT(AuthenticationResult?.AccessToken ?? '');\n    const idToken = AuthenticationResult?.IdToken\n        ? decodeJWT(AuthenticationResult.IdToken)\n        : undefined;\n    const { iat } = accessToken.payload;\n    // This should never happen. If it does, it's a bug from the service.\n    if (!iat) {\n        throw new AuthError({\n            name: 'iatNotFoundException',\n            message: 'iat not found in access token',\n        });\n    }\n    const clockDrift = iat * 1000 - new Date().getTime();\n    return {\n        accessToken,\n        idToken,\n        clockDrift,\n        refreshToken: refreshTokenString,\n        username,\n    };\n};\nexport const refreshAuthTokens = deDupeAsyncFunction(refreshAuthTokensFunction);\nexport const refreshAuthTokensWithoutDedupe = refreshAuthTokensFunction;\n"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AAQA,MAAMA,yBAAyB,GAAG,MAAAA,CAAO;EAAEC,MAAM;EAAEC,UAAU;EAAEC;AAAQ,CAAG,KAAK;EAC3EC,yBAAyB,CAACF,UAAU,EAAEG,OAAO,CAAC;EAC9C,MAAM;IAAEC,UAAU;IAAEC,gBAAgB;IAAEC;EAAgB,CAAE,GAAGN,UAAU,CAACG,OAAO;EAC7E,MAAMI,MAAM,GAAGC,uBAAuB,CAACJ,UAAU,CAAC;EAClDK,gCAAgC,CAACV,MAAM,CAAC;EACxC,MAAMW,kBAAkB,GAAGX,MAAM,CAACY,YAAY;EAC9C,MAAMC,cAAc,GAAG;IACnBC,aAAa,EAAEH;EACvB,CAAK;EACD,IAAIX,MAAM,CAACe,cAAc,EAAEC,SAAS,EAAE;IAClCH,cAAc,CAACI,UAAU,GAAGjB,MAAM,CAACe,cAAc,CAACC,SAAS;EACnE;EACI,MAAME,eAAe,GAAGC,kBAAkB,CAAC;IACvCjB,QAAQ;IACRG,UAAU;IACVC;EACR,CAAK,CAAC;EACF,MAAMc,YAAY,GAAGC,wBAAwB,CAAC;IAC1CC,gBAAgB,EAAEC,qCAAqC,CAAC;MACpDC,gBAAgB,EAAEjB;IAC9B,CAAS;EACT,CAAK,CAAC;EACF,MAAM;IAAEkB;EAAoB,CAAE,GAAG,MAAML,YAAY,CAAC;IAAEZ;EAAM,CAAE,EAAE;IAC5DkB,QAAQ,EAAEpB,gBAAgB;IAC1BqB,QAAQ,EAAE,oBAAoB;IAC9Bd,cAAc;IACdK;EACR,CAAK,CAAC;EACF,MAAMU,WAAW,GAAGC,SAAS,CAACJ,oBAAoB,EAAEK,WAAW,IAAI,EAAE,CAAC;EACtE,MAAMC,OAAO,GAAGN,oBAAoB,EAAEO,OAAO,GACvCH,SAAS,CAACJ,oBAAoB,CAACO,OAAO,CAAC,GACvCC,SAAS;EACf,MAAM;IAAEC;EAAG,CAAE,GAAGN,WAAW,CAACO,OAAO;EACvC;EACI,IAAI,CAACD,GAAG,EAAE;IACN,MAAM,IAAIE,SAAS,CAAC;MAChBC,IAAI,EAAE,sBAAsB;MAC5BC,OAAO,EAAE;IACrB,CAAS,CAAC;EACV;EACI,MAAMC,UAAU,GAAGL,GAAG,GAAG,IAAI,GAAG,IAAIM,IAAI,EAAE,CAACC,OAAO,EAAE;EACpD,OAAO;IACHb,WAAW;IACXG,OAAO;IACPQ,UAAU;IACV3B,YAAY,EAAED,kBAAkB;IAChCT;EACR,CAAK;AACL,CAAC;AACW,MAACwC,iBAAiB,GAAGC,mBAAmB,CAAC5C,yBAAyB;AAClE,MAAC6C,8BAA8B,GAAG7C,yBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}