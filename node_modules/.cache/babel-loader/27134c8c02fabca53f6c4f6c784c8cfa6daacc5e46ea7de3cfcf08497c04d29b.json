{"ast":null,"code":"import { AuthAction } from '@aws-amplify/core/internals/utils';\nimport { getUserContextData } from '../../../providers/cognito/utils/userContextData.mjs';\nimport { getAuthenticationHelper } from '../../../providers/cognito/utils/srp/getAuthenticationHelper.mjs';\nimport '../../../providers/cognito/utils/srp/constants.mjs';\nimport '@aws-crypto/sha256-js';\nimport { setActiveSignInUsername, retryOnResourceNotFoundException, handlePasswordVerifierChallenge } from '../../../providers/cognito/utils/signInHelpers.mjs';\nimport { createInitiateAuthClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createInitiateAuthClient.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../../../providers/cognito/types/errors.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Handles the Password SRP (Secure Remote Password) authentication flow.\n * This function can be used with both USER_SRP_AUTH and USER_AUTH flows.\n *\n * @param {Object} params - The parameters for the Password SRP authentication\n * @param {string} params.username - The username for authentication\n * @param {string} params.password - The user's password\n * @param {ClientMetadata} [params.clientMetadata] - Optional metadata to be sent with auth requests\n * @param {CognitoUserPoolConfig} params.config - Cognito User Pool configuration\n * @param {AuthTokenOrchestrator} params.tokenOrchestrator - Token orchestrator for managing auth tokens\n * @param {AuthFlowType} params.authFlow - The type of authentication flow ('USER_SRP_AUTH' or 'USER_AUTH')\n * @param {AuthFactorType} [params.preferredChallenge] - Optional preferred challenge type when using USER_AUTH flow\n *\n * @returns {Promise<RespondToAuthChallengeCommandOutput>} The authentication response\n */\nasync function handlePasswordSRP({\n  username,\n  password,\n  clientMetadata,\n  config,\n  tokenOrchestrator,\n  authFlow,\n  preferredChallenge\n}) {\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = config;\n  const userPoolName = userPoolId?.split('_')[1] || '';\n  const authenticationHelper = await getAuthenticationHelper(userPoolName);\n  const authParameters = {\n    USERNAME: username,\n    SRP_A: authenticationHelper.A.toString(16)\n  };\n  if (authFlow === 'USER_AUTH' && preferredChallenge) {\n    authParameters.PREFERRED_CHALLENGE = preferredChallenge;\n  }\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const jsonReq = {\n    AuthFlow: authFlow,\n    AuthParameters: authParameters,\n    ClientMetadata: clientMetadata,\n    ClientId: userPoolClientId,\n    UserContextData\n  };\n  const initiateAuth = createInitiateAuthClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const resp = await initiateAuth({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.SignIn)\n  }, jsonReq);\n  const {\n    ChallengeParameters: challengeParameters,\n    Session: session\n  } = resp;\n  const activeUsername = challengeParameters?.USERNAME ?? username;\n  setActiveSignInUsername(activeUsername);\n  if (resp.ChallengeName === 'PASSWORD_VERIFIER') {\n    return retryOnResourceNotFoundException(handlePasswordVerifierChallenge, [password, challengeParameters, clientMetadata, session, authenticationHelper, config, tokenOrchestrator], activeUsername, tokenOrchestrator);\n  }\n  return resp;\n}\nexport { handlePasswordSRP };","map":{"version":3,"names":["handlePasswordSRP","username","password","clientMetadata","config","tokenOrchestrator","authFlow","preferredChallenge","userPoolId","userPoolClientId","userPoolEndpoint","userPoolName","split","authenticationHelper","getAuthenticationHelper","authParameters","USERNAME","SRP_A","A","toString","PREFERRED_CHALLENGE","UserContextData","getUserContextData","jsonReq","AuthFlow","AuthParameters","ClientMetadata","ClientId","initiateAuth","createInitiateAuthClient","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","resp","region","getRegionFromUserPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","SignIn","ChallengeParameters","challengeParameters","Session","session","activeUsername","setActiveSignInUsername","ChallengeName","retryOnResourceNotFoundException","handlePasswordVerifierChallenge"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/auth/src/client/flows/shared/handlePasswordSRP.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AuthAction } from '@aws-amplify/core/internals/utils';\nimport { getUserContextData } from '../../../providers/cognito/utils/userContextData';\nimport { getAuthenticationHelper } from '../../../providers/cognito/utils/srp';\nimport { handlePasswordVerifierChallenge, retryOnResourceNotFoundException, setActiveSignInUsername, } from '../../../providers/cognito/utils/signInHelpers';\nimport { createInitiateAuthClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../../../providers/cognito/factories';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { getAuthUserAgentValue } from '../../../utils';\n/**\n * Handles the Password SRP (Secure Remote Password) authentication flow.\n * This function can be used with both USER_SRP_AUTH and USER_AUTH flows.\n *\n * @param {Object} params - The parameters for the Password SRP authentication\n * @param {string} params.username - The username for authentication\n * @param {string} params.password - The user's password\n * @param {ClientMetadata} [params.clientMetadata] - Optional metadata to be sent with auth requests\n * @param {CognitoUserPoolConfig} params.config - Cognito User Pool configuration\n * @param {AuthTokenOrchestrator} params.tokenOrchestrator - Token orchestrator for managing auth tokens\n * @param {AuthFlowType} params.authFlow - The type of authentication flow ('USER_SRP_AUTH' or 'USER_AUTH')\n * @param {AuthFactorType} [params.preferredChallenge] - Optional preferred challenge type when using USER_AUTH flow\n *\n * @returns {Promise<RespondToAuthChallengeCommandOutput>} The authentication response\n */\nexport async function handlePasswordSRP({ username, password, clientMetadata, config, tokenOrchestrator, authFlow, preferredChallenge, }) {\n    const { userPoolId, userPoolClientId, userPoolEndpoint } = config;\n    const userPoolName = userPoolId?.split('_')[1] || '';\n    const authenticationHelper = await getAuthenticationHelper(userPoolName);\n    const authParameters = {\n        USERNAME: username,\n        SRP_A: authenticationHelper.A.toString(16),\n    };\n    if (authFlow === 'USER_AUTH' && preferredChallenge) {\n        authParameters.PREFERRED_CHALLENGE = preferredChallenge;\n    }\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const jsonReq = {\n        AuthFlow: authFlow,\n        AuthParameters: authParameters,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData,\n    };\n    const initiateAuth = createInitiateAuthClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const resp = await initiateAuth({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.SignIn),\n    }, jsonReq);\n    const { ChallengeParameters: challengeParameters, Session: session } = resp;\n    const activeUsername = challengeParameters?.USERNAME ?? username;\n    setActiveSignInUsername(activeUsername);\n    if (resp.ChallengeName === 'PASSWORD_VERIFIER') {\n        return retryOnResourceNotFoundException(handlePasswordVerifierChallenge, [\n            password,\n            challengeParameters,\n            clientMetadata,\n            session,\n            authenticationHelper,\n            config,\n            tokenOrchestrator,\n        ], activeUsername, tokenOrchestrator);\n    }\n    return resp;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,iBAAiBA,CAAC;EAAEC,QAAQ;EAAEC,QAAQ;EAAEC,cAAc;EAAEC,MAAM;EAAEC,iBAAiB;EAAEC,QAAQ;EAAEC;AAAkB,CAAG,EAAE;EACtI,MAAM;IAAEC,UAAU;IAAEC,gBAAgB;IAAEC;EAAgB,CAAE,GAAGN,MAAM;EACjE,MAAMO,YAAY,GAAGH,UAAU,EAAEI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;EACpD,MAAMC,oBAAoB,GAAG,MAAMC,uBAAuB,CAACH,YAAY,CAAC;EACxE,MAAMI,cAAc,GAAG;IACnBC,QAAQ,EAAEf,QAAQ;IAClBgB,KAAK,EAAEJ,oBAAoB,CAACK,CAAC,CAACC,QAAQ,CAAC,EAAE;EACjD,CAAK;EACD,IAAIb,QAAQ,KAAK,WAAW,IAAIC,kBAAkB,EAAE;IAChDQ,cAAc,CAACK,mBAAmB,GAAGb,kBAAkB;EAC/D;EACI,MAAMc,eAAe,GAAGC,kBAAkB,CAAC;IACvCrB,QAAQ;IACRO,UAAU;IACVC;EACR,CAAK,CAAC;EACF,MAAMc,OAAO,GAAG;IACZC,QAAQ,EAAElB,QAAQ;IAClBmB,cAAc,EAAEV,cAAc;IAC9BW,cAAc,EAAEvB,cAAc;IAC9BwB,QAAQ,EAAElB,gBAAgB;IAC1BY;EACR,CAAK;EACD,MAAMO,YAAY,GAAGC,wBAAwB,CAAC;IAC1CC,gBAAgB,EAAEC,qCAAqC,CAAC;MACpDC,gBAAgB,EAAEtB;IAC9B,CAAS;EACT,CAAK,CAAC;EACF,MAAMuB,IAAI,GAAG,MAAML,YAAY,CAAC;IAC5BM,MAAM,EAAEC,uBAAuB,CAAC3B,UAAU,CAAC;IAC3C4B,cAAc,EAAEC,qBAAqB,CAACC,UAAU,CAACC,MAAM;EAC/D,CAAK,EAAEhB,OAAO,CAAC;EACX,MAAM;IAAEiB,mBAAmB,EAAEC,mBAAmB;IAAEC,OAAO,EAAEC;EAAO,CAAE,GAAGV,IAAI;EAC3E,MAAMW,cAAc,GAAGH,mBAAmB,EAAEzB,QAAQ,IAAIf,QAAQ;EAChE4C,uBAAuB,CAACD,cAAc,CAAC;EACvC,IAAIX,IAAI,CAACa,aAAa,KAAK,mBAAmB,EAAE;IAC5C,OAAOC,gCAAgC,CAACC,+BAA+B,EAAE,CACrE9C,QAAQ,EACRuC,mBAAmB,EACnBtC,cAAc,EACdwC,OAAO,EACP9B,oBAAoB,EACpBT,MAAM,EACNC,iBAAiB,CACpB,EAAEuC,cAAc,EAAEvC,iBAAiB,CAAC;EAC7C;EACI,OAAO4B,IAAI;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}