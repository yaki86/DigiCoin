{"ast":null,"code":"import { USER_AGENT_HEADER, getAmplifyUserAgent } from '@aws-amplify/core/internals/utils';\nimport { MESSAGE_TYPES, DEFAULT_KEEP_ALIVE_TIMEOUT } from '../constants.mjs';\nimport { AWSWebSocketProvider } from '../AWSWebSocketProvider/index.mjs';\nimport { awsRealTimeHeaderBasedAuth } from '../AWSWebSocketProvider/authHeaders.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst PROVIDER_NAME = 'AWSAppSyncEventsProvider';\nconst WS_PROTOCOL_NAME = 'aws-appsync-event-ws';\nconst CONNECT_URI = ''; // events does not expect a connect uri\nclass AWSAppSyncEventProvider extends AWSWebSocketProvider {\n  constructor() {\n    super({\n      providerName: PROVIDER_NAME,\n      wsProtocolName: WS_PROTOCOL_NAME,\n      connectUri: CONNECT_URI\n    });\n  }\n  getProviderName() {\n    return PROVIDER_NAME;\n  }\n  async connect(options) {\n    super.connect(options);\n  }\n  subscribe(options, customUserAgentDetails) {\n    return super.subscribe(options, customUserAgentDetails).pipe();\n  }\n  async publish(options, customUserAgentDetails) {\n    super.publish(options, customUserAgentDetails);\n  }\n  async _prepareSubscriptionPayload(_ref) {\n    let {\n      options,\n      subscriptionId,\n      customUserAgentDetails,\n      additionalCustomHeaders,\n      libraryConfigHeaders,\n      publish\n    } = _ref;\n    const {\n      appSyncGraphqlEndpoint,\n      authenticationType,\n      query,\n      apiKey,\n      region\n    } = options;\n    // This will be needed for WS publish\n    // const data = {\n    // \tevents: [variables],\n    // };\n    const serializedData = JSON.stringify({\n      channel: query\n    });\n    const headers = {\n      ...(await awsRealTimeHeaderBasedAuth({\n        apiKey,\n        appSyncGraphqlEndpoint,\n        authenticationType,\n        payload: serializedData,\n        canonicalUri: '',\n        region,\n        additionalCustomHeaders\n      })),\n      ...libraryConfigHeaders,\n      ...additionalCustomHeaders,\n      [USER_AGENT_HEADER]: getAmplifyUserAgent(customUserAgentDetails)\n    };\n    // Commented out code will be needed for WS publish\n    const subscriptionMessage = {\n      id: subscriptionId,\n      channel: query,\n      // events: [JSON.stringify(variables)],\n      authorization: {\n        ...headers\n      },\n      // payload: {\n      // \tevents: serializedData,\n      // \textensions: {\n      // \t\tauthorization: {\n      // \t\t\t...headers,\n      // \t\t},\n      // \t},\n      // },\n      type: publish ? MESSAGE_TYPES.EVENT_PUBLISH : MESSAGE_TYPES.EVENT_SUBSCRIBE\n    };\n    const serializedSubscriptionMessage = JSON.stringify(subscriptionMessage);\n    return serializedSubscriptionMessage;\n  }\n  _handleSubscriptionData(message) {\n    this.logger.debug(`subscription message from AWS AppSync Events: ${message.data}`);\n    const {\n      id = '',\n      event: payload,\n      type\n    } = JSON.parse(String(message.data));\n    const {\n      observer = null,\n      query = '',\n      variables = {}\n    } = this.subscriptionObserverMap.get(id) || {};\n    this.logger.debug({\n      id,\n      observer,\n      query,\n      variables\n    });\n    if (type === MESSAGE_TYPES.DATA && payload) {\n      const deserializedEvent = JSON.parse(payload);\n      if (observer) {\n        observer.next({\n          id,\n          type,\n          event: deserializedEvent\n        });\n      } else {\n        this.logger.debug(`observer not found for id: ${id}`);\n      }\n      return [true, {\n        id,\n        type,\n        payload: deserializedEvent\n      }];\n    }\n    return [false, {\n      id,\n      type,\n      payload\n    }];\n  }\n  _unsubscribeMessage(subscriptionId) {\n    return {\n      id: subscriptionId,\n      type: MESSAGE_TYPES.EVENT_STOP\n    };\n  }\n  _extractConnectionTimeout(data) {\n    const {\n      connectionTimeoutMs = DEFAULT_KEEP_ALIVE_TIMEOUT\n    } = data;\n    return connectionTimeoutMs;\n  }\n  _extractErrorCodeAndType(data) {\n    const {\n      errors: [{\n        errorType = '',\n        errorCode = 0\n      } = {}] = []\n    } = data;\n    return {\n      errorCode,\n      errorType\n    };\n  }\n}\nconst AppSyncEventProvider = new AWSAppSyncEventProvider();\nexport { AWSAppSyncEventProvider, AppSyncEventProvider };","map":{"version":3,"names":["PROVIDER_NAME","WS_PROTOCOL_NAME","CONNECT_URI","AWSAppSyncEventProvider","AWSWebSocketProvider","constructor","providerName","wsProtocolName","connectUri","getProviderName","connect","options","subscribe","customUserAgentDetails","pipe","publish","_prepareSubscriptionPayload","_ref","subscriptionId","additionalCustomHeaders","libraryConfigHeaders","appSyncGraphqlEndpoint","authenticationType","query","apiKey","region","serializedData","JSON","stringify","channel","headers","awsRealTimeHeaderBasedAuth","payload","canonicalUri","USER_AGENT_HEADER","getAmplifyUserAgent","subscriptionMessage","id","authorization","type","MESSAGE_TYPES","EVENT_PUBLISH","EVENT_SUBSCRIBE","serializedSubscriptionMessage","_handleSubscriptionData","message","logger","debug","data","event","parse","String","observer","variables","subscriptionObserverMap","get","DATA","deserializedEvent","next","_unsubscribeMessage","EVENT_STOP","_extractConnectionTimeout","connectionTimeoutMs","DEFAULT_KEEP_ALIVE_TIMEOUT","_extractErrorCodeAndType","errors","errorType","errorCode","AppSyncEventProvider"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/api-graphql/src/Providers/AWSAppSyncEventsProvider/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { USER_AGENT_HEADER, getAmplifyUserAgent, } from '@aws-amplify/core/internals/utils';\nimport { DEFAULT_KEEP_ALIVE_TIMEOUT, MESSAGE_TYPES } from '../constants';\nimport { AWSWebSocketProvider } from '../AWSWebSocketProvider';\nimport { awsRealTimeHeaderBasedAuth } from '../AWSWebSocketProvider/authHeaders';\nconst PROVIDER_NAME = 'AWSAppSyncEventsProvider';\nconst WS_PROTOCOL_NAME = 'aws-appsync-event-ws';\nconst CONNECT_URI = ''; // events does not expect a connect uri\nexport class AWSAppSyncEventProvider extends AWSWebSocketProvider {\n    constructor() {\n        super({\n            providerName: PROVIDER_NAME,\n            wsProtocolName: WS_PROTOCOL_NAME,\n            connectUri: CONNECT_URI,\n        });\n    }\n    getProviderName() {\n        return PROVIDER_NAME;\n    }\n    async connect(options) {\n        super.connect(options);\n    }\n    subscribe(options, customUserAgentDetails) {\n        return super.subscribe(options, customUserAgentDetails).pipe();\n    }\n    async publish(options, customUserAgentDetails) {\n        super.publish(options, customUserAgentDetails);\n    }\n    async _prepareSubscriptionPayload({ options, subscriptionId, customUserAgentDetails, additionalCustomHeaders, libraryConfigHeaders, publish, }) {\n        const { appSyncGraphqlEndpoint, authenticationType, query, apiKey, region, } = options;\n        // This will be needed for WS publish\n        // const data = {\n        // \tevents: [variables],\n        // };\n        const serializedData = JSON.stringify({ channel: query });\n        const headers = {\n            ...(await awsRealTimeHeaderBasedAuth({\n                apiKey,\n                appSyncGraphqlEndpoint,\n                authenticationType,\n                payload: serializedData,\n                canonicalUri: '',\n                region,\n                additionalCustomHeaders,\n            })),\n            ...libraryConfigHeaders,\n            ...additionalCustomHeaders,\n            [USER_AGENT_HEADER]: getAmplifyUserAgent(customUserAgentDetails),\n        };\n        // Commented out code will be needed for WS publish\n        const subscriptionMessage = {\n            id: subscriptionId,\n            channel: query,\n            // events: [JSON.stringify(variables)],\n            authorization: {\n                ...headers,\n            },\n            // payload: {\n            // \tevents: serializedData,\n            // \textensions: {\n            // \t\tauthorization: {\n            // \t\t\t...headers,\n            // \t\t},\n            // \t},\n            // },\n            type: publish\n                ? MESSAGE_TYPES.EVENT_PUBLISH\n                : MESSAGE_TYPES.EVENT_SUBSCRIBE,\n        };\n        const serializedSubscriptionMessage = JSON.stringify(subscriptionMessage);\n        return serializedSubscriptionMessage;\n    }\n    _handleSubscriptionData(message) {\n        this.logger.debug(`subscription message from AWS AppSync Events: ${message.data}`);\n        const { id = '', event: payload, type, } = JSON.parse(String(message.data));\n        const { observer = null, query = '', variables = {}, } = this.subscriptionObserverMap.get(id) || {};\n        this.logger.debug({ id, observer, query, variables });\n        if (type === MESSAGE_TYPES.DATA && payload) {\n            const deserializedEvent = JSON.parse(payload);\n            if (observer) {\n                observer.next({ id, type, event: deserializedEvent });\n            }\n            else {\n                this.logger.debug(`observer not found for id: ${id}`);\n            }\n            return [true, { id, type, payload: deserializedEvent }];\n        }\n        return [false, { id, type, payload }];\n    }\n    _unsubscribeMessage(subscriptionId) {\n        return {\n            id: subscriptionId,\n            type: MESSAGE_TYPES.EVENT_STOP,\n        };\n    }\n    _extractConnectionTimeout(data) {\n        const { connectionTimeoutMs = DEFAULT_KEEP_ALIVE_TIMEOUT } = data;\n        return connectionTimeoutMs;\n    }\n    _extractErrorCodeAndType(data) {\n        const { errors: [{ errorType = '', errorCode = 0 } = {}] = [] } = data;\n        return { errorCode, errorType };\n    }\n}\nexport const AppSyncEventProvider = new AWSAppSyncEventProvider();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}