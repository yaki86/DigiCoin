{"ast":null,"code":"import { listFactory } from '../operations/list.mjs';\nimport { indexQueryFactory } from '../operations/indexQuery.mjs';\nimport { getFactory } from '../operations/get.mjs';\nimport { excludeDisabledOps, getSecondaryIndexesFromSchemaModel } from '../clientUtils.mjs';\nfunction generateModelsProperty(client, params, getInternals) {\n  const models = {};\n  const {\n    config\n  } = params;\n  const useContext = params.amplify === null;\n  if (!config) {\n    throw new Error('generateModelsProperty cannot retrieve Amplify config');\n  }\n  if (!config.API?.GraphQL) {\n    return {};\n  }\n  const modelIntrospection = config.API.GraphQL.modelIntrospection;\n  if (!modelIntrospection) {\n    return {};\n  }\n  const SSR_UNSUPORTED_OPS = ['ONCREATE', 'ONUPDATE', 'ONDELETE', 'OBSERVEQUERY'];\n  for (const model of Object.values(modelIntrospection.models)) {\n    const {\n      name\n    } = model;\n    models[name] = {};\n    const enabledModelOps = excludeDisabledOps(modelIntrospection, name);\n    Object.entries(enabledModelOps).forEach(([key, {\n      operationPrefix\n    }]) => {\n      const operation = key;\n      // subscriptions are not supported in SSR\n      if (SSR_UNSUPORTED_OPS.includes(operation)) return;\n      if (operation === 'LIST') {\n        models[name][operationPrefix] = listFactory(client, modelIntrospection, model, getInternals, useContext);\n      } else {\n        models[name][operationPrefix] = getFactory(client, modelIntrospection, model, operation, getInternals, useContext);\n      }\n    });\n    const secondaryIdxs = getSecondaryIndexesFromSchemaModel(model);\n    for (const idx of secondaryIdxs) {\n      models[name][idx.queryField] = indexQueryFactory(client, modelIntrospection, model, idx, getInternals, useContext);\n    }\n  }\n  return models;\n}\nexport { generateModelsProperty };","map":{"version":3,"names":["generateModelsProperty","client","params","getInternals","models","config","useContext","amplify","Error","API","GraphQL","modelIntrospection","SSR_UNSUPORTED_OPS","model","Object","values","name","enabledModelOps","excludeDisabledOps","entries","forEach","key","operationPrefix","operation","includes","listFactory","getFactory","secondaryIdxs","getSecondaryIndexesFromSchemaModel","idx","queryField","indexQueryFactory"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/data-schema/src/runtime/internals/server/generateModelsProperty.ts"],"sourcesContent":["import { listFactory } from '../operations/list';\nimport { indexQueryFactory } from '../operations/indexQuery';\nimport { getFactory } from '../operations/get';\nimport { getSecondaryIndexesFromSchemaModel, excludeDisabledOps, } from '../clientUtils';\nexport function generateModelsProperty(client, params, getInternals) {\n    const models = {};\n    const { config } = params;\n    const useContext = params.amplify === null;\n    if (!config) {\n        throw new Error('generateModelsProperty cannot retrieve Amplify config');\n    }\n    if (!config.API?.GraphQL) {\n        return {};\n    }\n    const modelIntrospection = config.API.GraphQL.modelIntrospection;\n    if (!modelIntrospection) {\n        return {};\n    }\n    const SSR_UNSUPORTED_OPS = [\n        'ONCREATE',\n        'ONUPDATE',\n        'ONDELETE',\n        'OBSERVEQUERY',\n    ];\n    for (const model of Object.values(modelIntrospection.models)) {\n        const { name } = model;\n        models[name] = {};\n        const enabledModelOps = excludeDisabledOps(modelIntrospection, name);\n        Object.entries(enabledModelOps).forEach(([key, { operationPrefix }]) => {\n            const operation = key;\n            // subscriptions are not supported in SSR\n            if (SSR_UNSUPORTED_OPS.includes(operation))\n                return;\n            if (operation === 'LIST') {\n                models[name][operationPrefix] = listFactory(client, modelIntrospection, model, getInternals, useContext);\n            }\n            else {\n                models[name][operationPrefix] = getFactory(client, modelIntrospection, model, operation, getInternals, useContext);\n            }\n        });\n        const secondaryIdxs = getSecondaryIndexesFromSchemaModel(model);\n        for (const idx of secondaryIdxs) {\n            models[name][idx.queryField] = indexQueryFactory(client, modelIntrospection, model, idx, getInternals, useContext);\n        }\n    }\n    return models;\n}\n"],"mappings":";;;;AAIO,SAASA,sBAAsBA,CAACC,MAAM,EAAEC,MAAM,EAAEC,YAAY,EAAE;EACjE,MAAMC,MAAM,GAAG,EAAE;EACjB,MAAM;IAAEC;EAAM,CAAE,GAAGH,MAAM;EACzB,MAAMI,UAAU,GAAGJ,MAAM,CAACK,OAAO,KAAK,IAAI;EAC1C,IAAI,CAACF,MAAM,EAAE;IACT,MAAM,IAAIG,KAAK,CAAC,uDAAuD,CAAC;EAChF;EACI,IAAI,CAACH,MAAM,CAACI,GAAG,EAAEC,OAAO,EAAE;IACtB,OAAO,EAAE;EACjB;EACI,MAAMC,kBAAkB,GAAGN,MAAM,CAACI,GAAG,CAACC,OAAO,CAACC,kBAAkB;EAChE,IAAI,CAACA,kBAAkB,EAAE;IACrB,OAAO,EAAE;EACjB;EACI,MAAMC,kBAAkB,GAAG,CACvB,UAAU,EACV,UAAU,EACV,UAAU,EACV,cAAc,CACjB;EACD,KAAK,MAAMC,KAAK,IAAIC,MAAM,CAACC,MAAM,CAACJ,kBAAkB,CAACP,MAAM,CAAC,EAAE;IAC1D,MAAM;MAAEY;IAAI,CAAE,GAAGH,KAAK;IACtBT,MAAM,CAACY,IAAI,CAAC,GAAG,EAAE;IACjB,MAAMC,eAAe,GAAGC,kBAAkB,CAACP,kBAAkB,EAAEK,IAAI,CAAC;IACpEF,MAAM,CAACK,OAAO,CAACF,eAAe,CAAC,CAACG,OAAO,CAAC,CAAC,CAACC,GAAG,EAAE;MAAEC;IAAe,CAAE,CAAC,KAAK;MACpE,MAAMC,SAAS,GAAGF,GAAG;MACjC;MACY,IAAIT,kBAAkB,CAACY,QAAQ,CAACD,SAAS,CAAC,EACtC;MACJ,IAAIA,SAAS,KAAK,MAAM,EAAE;QACtBnB,MAAM,CAACY,IAAI,CAAC,CAACM,eAAe,CAAC,GAAGG,WAAW,CAACxB,MAAM,EAAEU,kBAAkB,EAAEE,KAAK,EAAEV,YAAY,EAAEG,UAAU,CAAC;MACxH,CAAa,MACI;QACDF,MAAM,CAACY,IAAI,CAAC,CAACM,eAAe,CAAC,GAAGI,UAAU,CAACzB,MAAM,EAAEU,kBAAkB,EAAEE,KAAK,EAAEU,SAAS,EAAEpB,YAAY,EAAEG,UAAU,CAAC;MAClI;IACA,CAAS,CAAC;IACF,MAAMqB,aAAa,GAAGC,kCAAkC,CAACf,KAAK,CAAC;IAC/D,KAAK,MAAMgB,GAAG,IAAIF,aAAa,EAAE;MAC7BvB,MAAM,CAACY,IAAI,CAAC,CAACa,GAAG,CAACC,UAAU,CAAC,GAAGC,iBAAiB,CAAC9B,MAAM,EAAEU,kBAAkB,EAAEE,KAAK,EAAEgB,GAAG,EAAE1B,YAAY,EAAEG,UAAU,CAAC;IAC9H;EACA;EACI,OAAOF,MAAM;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}