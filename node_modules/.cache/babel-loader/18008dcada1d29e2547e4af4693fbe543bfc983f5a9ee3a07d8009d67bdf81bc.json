{"ast":null,"code":"import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { toAttributeType } from '../utils/apiHelpers.mjs';\nimport { autoSignInUserConfirmed, autoSignInWhenUserIsConfirmedWithLink, handleCodeAutoSignIn } from '../utils/signUpHelpers.mjs';\nimport { getUserContextData } from '../utils/userContextData.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport { createSignUpClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createSignUpClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\nimport { autoSignInStore } from '../../../client/utils/store/autoSignInStore.mjs';\nimport '../../../client/utils/store/signInStore.mjs';\nimport { setAutoSignIn } from './autoSignIn.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Creates a user\n *\n * @param input - The SignUpInput object\n * @returns SignUpOutput\n * @throws service: {@link SignUpException } - Cognito service errors thrown during the sign-up process.\n * @throws validation: {@link AuthValidationErrorCode } - Validation errors thrown either username or password\n *  are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function signUp(input) {\n  const {\n    username,\n    password,\n    options\n  } = input;\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  const signUpVerificationMethod = authConfig?.signUpVerificationMethod ?? 'code';\n  const {\n    clientMetadata,\n    validationData,\n    autoSignIn\n  } = input.options ?? {};\n  assertTokenProviderConfig(authConfig);\n  assertValidationError(!!username, AuthValidationErrorCode.EmptySignUpUsername);\n  const signInServiceOptions = typeof autoSignIn !== 'boolean' ? autoSignIn : undefined;\n  const signInInput = {\n    username,\n    options: signInServiceOptions\n  };\n  // if the authFlowType is 'CUSTOM_WITHOUT_SRP' then we don't include the password\n  if (signInServiceOptions?.authFlowType !== 'CUSTOM_WITHOUT_SRP') {\n    signInInput.password = password;\n  }\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = authConfig;\n  const signUpClient = createSignUpClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const signUpClientInput = {\n    Username: username,\n    Password: undefined,\n    UserAttributes: options?.userAttributes && toAttributeType(options?.userAttributes),\n    ClientMetadata: clientMetadata,\n    ValidationData: validationData && toAttributeType(validationData),\n    ClientId: userPoolClientId,\n    UserContextData: getUserContextData({\n      username,\n      userPoolId,\n      userPoolClientId\n    })\n  };\n  if (password) {\n    signUpClientInput.Password = password;\n  }\n  const {\n    UserSub: userId,\n    CodeDeliveryDetails: cdd,\n    UserConfirmed: userConfirmed,\n    Session: session\n  } = await signUpClient({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.SignUp)\n  }, signUpClientInput);\n  if (signInServiceOptions || autoSignIn === true) {\n    autoSignInStore.dispatch({\n      type: 'START'\n    });\n    autoSignInStore.dispatch({\n      type: 'SET_USERNAME',\n      value: username\n    });\n    autoSignInStore.dispatch({\n      type: 'SET_SESSION',\n      value: session\n    });\n  }\n  const codeDeliveryDetails = {\n    destination: cdd?.Destination,\n    deliveryMedium: cdd?.DeliveryMedium,\n    attributeName: cdd?.AttributeName\n  };\n  const isSignUpComplete = !!userConfirmed;\n  const isAutoSignInStarted = autoSignInStore.getState().active;\n  // Sign Up Complete\n  // No Confirm Sign In Step Required\n  if (isSignUpComplete) {\n    if (isAutoSignInStarted) {\n      setAutoSignIn(autoSignInUserConfirmed(signInInput));\n      return {\n        isSignUpComplete: true,\n        nextStep: {\n          signUpStep: 'COMPLETE_AUTO_SIGN_IN'\n        },\n        userId\n      };\n    }\n    return {\n      isSignUpComplete: true,\n      nextStep: {\n        signUpStep: 'DONE'\n      },\n      userId\n    };\n  }\n  // Sign Up Not Complete\n  // Confirm Sign Up Step Required\n  if (isAutoSignInStarted) {\n    // Confirmation Via Link Occurs In Separate Context\n    // AutoSignIn Fn Will Initiate Polling Once Executed\n    if (signUpVerificationMethod === 'link') {\n      setAutoSignIn(autoSignInWhenUserIsConfirmedWithLink(signInInput));\n      return {\n        isSignUpComplete: false,\n        nextStep: {\n          signUpStep: 'COMPLETE_AUTO_SIGN_IN',\n          codeDeliveryDetails\n        },\n        userId\n      };\n    }\n    // Confirmation Via Code Occurs In Same Context\n    // AutoSignIn Next Step Will Be Returned From Confirm Sign Up\n    handleCodeAutoSignIn(signInInput);\n  }\n  return {\n    isSignUpComplete: false,\n    nextStep: {\n      signUpStep: 'CONFIRM_SIGN_UP',\n      codeDeliveryDetails\n    },\n    userId\n  };\n}\nexport { signUp };","map":{"version":3,"names":["signUp","input","username","password","options","authConfig","Amplify","getConfig","Auth","Cognito","signUpVerificationMethod","clientMetadata","validationData","autoSignIn","assertTokenProviderConfig","assertValidationError","AuthValidationErrorCode","EmptySignUpUsername","signInServiceOptions","undefined","signInInput","authFlowType","userPoolId","userPoolClientId","userPoolEndpoint","signUpClient","createSignUpClient","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","signUpClientInput","Username","Password","UserAttributes","userAttributes","toAttributeType","ClientMetadata","ValidationData","ClientId","UserContextData","getUserContextData","UserSub","userId","CodeDeliveryDetails","cdd","UserConfirmed","userConfirmed","Session","session","region","getRegionFromUserPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","SignUp","autoSignInStore","dispatch","type","value","codeDeliveryDetails","destination","Destination","deliveryMedium","DeliveryMedium","attributeName","AttributeName","isSignUpComplete","isAutoSignInStarted","getState","active","setAutoSignIn","autoSignInUserConfirmed","nextStep","signUpStep","autoSignInWhenUserIsConfirmedWithLink","handleCodeAutoSignIn"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/auth/src/providers/cognito/apis/signUp.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { toAttributeType } from '../utils/apiHelpers';\nimport { autoSignInUserConfirmed, autoSignInWhenUserIsConfirmedWithLink, handleCodeAutoSignIn, } from '../utils/signUpHelpers';\nimport { getUserContextData } from '../utils/userContextData';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { createSignUpClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\nimport { autoSignInStore } from '../../../client/utils/store';\nimport { setAutoSignIn } from './autoSignIn';\n/**\n * Creates a user\n *\n * @param input - The SignUpInput object\n * @returns SignUpOutput\n * @throws service: {@link SignUpException } - Cognito service errors thrown during the sign-up process.\n * @throws validation: {@link AuthValidationErrorCode } - Validation errors thrown either username or password\n *  are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function signUp(input) {\n    const { username, password, options } = input;\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    const signUpVerificationMethod = authConfig?.signUpVerificationMethod ?? 'code';\n    const { clientMetadata, validationData, autoSignIn } = input.options ?? {};\n    assertTokenProviderConfig(authConfig);\n    assertValidationError(!!username, AuthValidationErrorCode.EmptySignUpUsername);\n    const signInServiceOptions = typeof autoSignIn !== 'boolean' ? autoSignIn : undefined;\n    const signInInput = {\n        username,\n        options: signInServiceOptions,\n    };\n    // if the authFlowType is 'CUSTOM_WITHOUT_SRP' then we don't include the password\n    if (signInServiceOptions?.authFlowType !== 'CUSTOM_WITHOUT_SRP') {\n        signInInput.password = password;\n    }\n    const { userPoolId, userPoolClientId, userPoolEndpoint } = authConfig;\n    const signUpClient = createSignUpClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const signUpClientInput = {\n        Username: username,\n        Password: undefined,\n        UserAttributes: options?.userAttributes && toAttributeType(options?.userAttributes),\n        ClientMetadata: clientMetadata,\n        ValidationData: validationData && toAttributeType(validationData),\n        ClientId: userPoolClientId,\n        UserContextData: getUserContextData({\n            username,\n            userPoolId,\n            userPoolClientId,\n        }),\n    };\n    if (password) {\n        signUpClientInput.Password = password;\n    }\n    const { UserSub: userId, CodeDeliveryDetails: cdd, UserConfirmed: userConfirmed, Session: session, } = await signUpClient({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.SignUp),\n    }, signUpClientInput);\n    if (signInServiceOptions || autoSignIn === true) {\n        autoSignInStore.dispatch({ type: 'START' });\n        autoSignInStore.dispatch({ type: 'SET_USERNAME', value: username });\n        autoSignInStore.dispatch({ type: 'SET_SESSION', value: session });\n    }\n    const codeDeliveryDetails = {\n        destination: cdd?.Destination,\n        deliveryMedium: cdd?.DeliveryMedium,\n        attributeName: cdd?.AttributeName,\n    };\n    const isSignUpComplete = !!userConfirmed;\n    const isAutoSignInStarted = autoSignInStore.getState().active;\n    // Sign Up Complete\n    // No Confirm Sign In Step Required\n    if (isSignUpComplete) {\n        if (isAutoSignInStarted) {\n            setAutoSignIn(autoSignInUserConfirmed(signInInput));\n            return {\n                isSignUpComplete: true,\n                nextStep: {\n                    signUpStep: 'COMPLETE_AUTO_SIGN_IN',\n                },\n                userId,\n            };\n        }\n        return {\n            isSignUpComplete: true,\n            nextStep: {\n                signUpStep: 'DONE',\n            },\n            userId,\n        };\n    }\n    // Sign Up Not Complete\n    // Confirm Sign Up Step Required\n    if (isAutoSignInStarted) {\n        // Confirmation Via Link Occurs In Separate Context\n        // AutoSignIn Fn Will Initiate Polling Once Executed\n        if (signUpVerificationMethod === 'link') {\n            setAutoSignIn(autoSignInWhenUserIsConfirmedWithLink(signInInput));\n            return {\n                isSignUpComplete: false,\n                nextStep: {\n                    signUpStep: 'COMPLETE_AUTO_SIGN_IN',\n                    codeDeliveryDetails,\n                },\n                userId,\n            };\n        }\n        // Confirmation Via Code Occurs In Same Context\n        // AutoSignIn Next Step Will Be Returned From Confirm Sign Up\n        handleCodeAutoSignIn(signInInput);\n    }\n    return {\n        isSignUpComplete: false,\n        nextStep: {\n            signUpStep: 'CONFIRM_SIGN_UP',\n            codeDeliveryDetails,\n        },\n        userId,\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}