{"ast":null,"code":"import { customOpFactory } from '../operations/custom.mjs';\nimport { convertItemToConversationMessage } from './convertItemToConversationMessage.mjs';\nimport { serializeContent, serializeAiContext, serializeToolConfiguration } from './conversationMessageSerializers.mjs';\nimport { getCustomUserAgentDetails, AiAction } from './getCustomUserAgentDetails.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createSendMessageFunction = (client, modelIntrospection, conversationId, conversationRouteName, getInternals) => async input => {\n  const {\n    conversations\n  } = modelIntrospection;\n  // Safe guard for standalone function. When called as part of client generation, this should never be falsy.\n  if (!conversations) {\n    return {};\n  }\n  const processedInput = typeof input === 'string' ? {\n    content: [{\n      text: input\n    }]\n  } : input;\n  const {\n    content,\n    aiContext,\n    toolConfiguration\n  } = processedInput;\n  const sendSchema = conversations[conversationRouteName].message.send;\n  const sendOperation = customOpFactory(client, modelIntrospection, 'mutation', sendSchema, false, getInternals, getCustomUserAgentDetails(AiAction.SendMessage));\n  const {\n    data,\n    errors\n  } = await sendOperation({\n    conversationId,\n    content: serializeContent(content),\n    ...(aiContext && {\n      aiContext: serializeAiContext(aiContext)\n    }),\n    ...(toolConfiguration && {\n      toolConfiguration: serializeToolConfiguration(toolConfiguration)\n    })\n  });\n  return {\n    data: data ? convertItemToConversationMessage(data) : data,\n    errors\n  };\n};\nexport { createSendMessageFunction };","map":{"version":3,"names":["createSendMessageFunction","client","modelIntrospection","conversationId","conversationRouteName","getInternals","input","conversations","processedInput","content","text","aiContext","toolConfiguration","sendSchema","message","send","sendOperation","customOpFactory","getCustomUserAgentDetails","AiAction","SendMessage","data","errors","serializeContent","serializeAiContext","serializeToolConfiguration","convertItemToConversationMessage"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/data-schema/src/runtime/internals/ai/createSendMessageFunction.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { customOpFactory } from '../operations/custom';\nimport { convertItemToConversationMessage } from './convertItemToConversationMessage';\nimport { serializeAiContext, serializeContent, serializeToolConfiguration, } from './conversationMessageSerializers';\nimport { AiAction, getCustomUserAgentDetails, } from './getCustomUserAgentDetails';\nexport const createSendMessageFunction = (client, modelIntrospection, conversationId, conversationRouteName, getInternals) => async (input) => {\n    const { conversations } = modelIntrospection;\n    // Safe guard for standalone function. When called as part of client generation, this should never be falsy.\n    if (!conversations) {\n        return {};\n    }\n    const processedInput = typeof input === 'string' ? { content: [{ text: input }] } : input;\n    const { content, aiContext, toolConfiguration } = processedInput;\n    const sendSchema = conversations[conversationRouteName].message.send;\n    const sendOperation = customOpFactory(client, modelIntrospection, 'mutation', sendSchema, false, getInternals, getCustomUserAgentDetails(AiAction.SendMessage));\n    const { data, errors } = await sendOperation({\n        conversationId,\n        content: serializeContent(content),\n        ...(aiContext && { aiContext: serializeAiContext(aiContext) }),\n        ...(toolConfiguration && {\n            toolConfiguration: serializeToolConfiguration(toolConfiguration),\n        }),\n    });\n    return {\n        data: data ? convertItemToConversationMessage(data) : data,\n        errors,\n    };\n};\n"],"mappings":";;;;;AAAA;AACA;AAKY,MAACA,yBAAyB,GAAGA,CAACC,MAAM,EAAEC,kBAAkB,EAAEC,cAAc,EAAEC,qBAAqB,EAAEC,YAAY,KAAK,MAAOC,KAAK,IAAK;EAC3I,MAAM;IAAEC;EAAa,CAAE,GAAGL,kBAAkB;EAChD;EACI,IAAI,CAACK,aAAa,EAAE;IAChB,OAAO,EAAE;EACjB;EACI,MAAMC,cAAc,GAAG,OAAOF,KAAK,KAAK,QAAQ,GAAG;IAAEG,OAAO,EAAE,CAAC;MAAEC,IAAI,EAAEJ;IAAK,CAAE;EAAC,CAAE,GAAGA,KAAK;EACzF,MAAM;IAAEG,OAAO;IAAEE,SAAS;IAAEC;EAAiB,CAAE,GAAGJ,cAAc;EAChE,MAAMK,UAAU,GAAGN,aAAa,CAACH,qBAAqB,CAAC,CAACU,OAAO,CAACC,IAAI;EACpE,MAAMC,aAAa,GAAGC,eAAe,CAAChB,MAAM,EAAEC,kBAAkB,EAAE,UAAU,EAAEW,UAAU,EAAE,KAAK,EAAER,YAAY,EAAEa,yBAAyB,CAACC,QAAQ,CAACC,WAAW,CAAC,CAAC;EAC/J,MAAM;IAAEC,IAAI;IAAEC;EAAM,CAAE,GAAG,MAAMN,aAAa,CAAC;IACzCb,cAAc;IACdM,OAAO,EAAEc,gBAAgB,CAACd,OAAO,CAAC;IAClC,IAAIE,SAAS,IAAI;MAAEA,SAAS,EAAEa,kBAAkB,CAACb,SAAS;IAAC,CAAE,CAAC;IAC9D,IAAIC,iBAAiB,IAAI;MACrBA,iBAAiB,EAAEa,0BAA0B,CAACb,iBAAiB;IAC3E,CAAS;EACT,CAAK,CAAC;EACF,OAAO;IACHS,IAAI,EAAEA,IAAI,GAAGK,gCAAgC,CAACL,IAAI,CAAC,GAAGA,IAAI;IAC1DC;EACR,CAAK;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}