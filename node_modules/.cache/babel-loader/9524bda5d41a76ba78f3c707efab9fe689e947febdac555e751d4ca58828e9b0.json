{"ast":null,"code":"import { AmplifyUrl, AmplifyUrlSearchParams } from '@aws-amplify/core/internals/utils';\nimport { RestApiError } from '../errors/RestApiError.mjs';\nimport { assertValidationError } from '../errors/assertValidatonError.mjs';\nimport { RestApiValidationErrorCode, validationErrorMap } from '../errors/validation.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Resolve the REST API request URL by:\n * 1. Loading the REST API endpoint from the Amplify configuration with corresponding API name.\n * 2. Appending the path to the endpoint.\n * 3. Merge the query parameters from path and the queryParameter argument which is taken from the public REST API\n *   options.\n * 4. Validating the resulting URL string.\n *\n * @internal\n */\nconst resolveApiUrl = (amplify, apiName, path, queryParams) => {\n  const urlStr = amplify.getConfig()?.API?.REST?.[apiName]?.endpoint;\n  assertValidationError(!!urlStr, RestApiValidationErrorCode.InvalidApiName);\n  try {\n    const url = new AmplifyUrl(urlStr + path);\n    if (queryParams) {\n      const mergedQueryParams = new AmplifyUrlSearchParams(url.searchParams);\n      Object.entries(queryParams).forEach(([key, value]) => {\n        mergedQueryParams.set(key, value);\n      });\n      url.search = new AmplifyUrlSearchParams(mergedQueryParams).toString();\n    }\n    return url;\n  } catch (error) {\n    throw new RestApiError({\n      name: RestApiValidationErrorCode.InvalidApiName,\n      ...validationErrorMap[RestApiValidationErrorCode.InvalidApiName],\n      recoverySuggestion: `Please make sure the REST endpoint URL is a valid URL string. Got ${urlStr}`\n    });\n  }\n};\nexport { resolveApiUrl };","map":{"version":3,"names":["resolveApiUrl","amplify","apiName","path","queryParams","urlStr","getConfig","API","REST","endpoint","assertValidationError","RestApiValidationErrorCode","InvalidApiName","url","AmplifyUrl","mergedQueryParams","AmplifyUrlSearchParams","searchParams","Object","entries","forEach","key","value","set","search","toString","error","RestApiError","name","validationErrorMap","recoverySuggestion"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/api-rest/src/utils/resolveApiUrl.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AmplifyUrl, AmplifyUrlSearchParams, } from '@aws-amplify/core/internals/utils';\nimport { RestApiError, RestApiValidationErrorCode, assertValidationError, validationErrorMap, } from '../errors';\n/**\n * Resolve the REST API request URL by:\n * 1. Loading the REST API endpoint from the Amplify configuration with corresponding API name.\n * 2. Appending the path to the endpoint.\n * 3. Merge the query parameters from path and the queryParameter argument which is taken from the public REST API\n *   options.\n * 4. Validating the resulting URL string.\n *\n * @internal\n */\nexport const resolveApiUrl = (amplify, apiName, path, queryParams) => {\n    const urlStr = amplify.getConfig()?.API?.REST?.[apiName]?.endpoint;\n    assertValidationError(!!urlStr, RestApiValidationErrorCode.InvalidApiName);\n    try {\n        const url = new AmplifyUrl(urlStr + path);\n        if (queryParams) {\n            const mergedQueryParams = new AmplifyUrlSearchParams(url.searchParams);\n            Object.entries(queryParams).forEach(([key, value]) => {\n                mergedQueryParams.set(key, value);\n            });\n            url.search = new AmplifyUrlSearchParams(mergedQueryParams).toString();\n        }\n        return url;\n    }\n    catch (error) {\n        throw new RestApiError({\n            name: RestApiValidationErrorCode.InvalidApiName,\n            ...validationErrorMap[RestApiValidationErrorCode.InvalidApiName],\n            recoverySuggestion: `Please make sure the REST endpoint URL is a valid URL string. Got ${urlStr}`,\n        });\n    }\n};\n"],"mappings":";;;;;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,aAAa,GAAGA,CAACC,OAAO,EAAEC,OAAO,EAAEC,IAAI,EAAEC,WAAW,KAAK;EAClE,MAAMC,MAAM,GAAGJ,OAAO,CAACK,SAAS,EAAE,EAAEC,GAAG,EAAEC,IAAI,GAAGN,OAAO,CAAC,EAAEO,QAAQ;EAClEC,qBAAqB,CAAC,CAAC,CAACL,MAAM,EAAEM,0BAA0B,CAACC,cAAc,CAAC;EAC1E,IAAI;IACA,MAAMC,GAAG,GAAG,IAAIC,UAAU,CAACT,MAAM,GAAGF,IAAI,CAAC;IACzC,IAAIC,WAAW,EAAE;MACb,MAAMW,iBAAiB,GAAG,IAAIC,sBAAsB,CAACH,GAAG,CAACI,YAAY,CAAC;MACtEC,MAAM,CAACC,OAAO,CAACf,WAAW,CAAC,CAACgB,OAAO,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAK;QAClDP,iBAAiB,CAACQ,GAAG,CAACF,GAAG,EAAEC,KAAK,CAAC;MACjD,CAAa,CAAC;MACFT,GAAG,CAACW,MAAM,GAAG,IAAIR,sBAAsB,CAACD,iBAAiB,CAAC,CAACU,QAAQ,EAAE;IACjF;IACQ,OAAOZ,GAAG;EAClB,CAAK,CACD,OAAOa,KAAK,EAAE;IACV,MAAM,IAAIC,YAAY,CAAC;MACnBC,IAAI,EAAEjB,0BAA0B,CAACC,cAAc;MAC/C,GAAGiB,kBAAkB,CAAClB,0BAA0B,CAACC,cAAc,CAAC;MAChEkB,kBAAkB,EAAE,qEAAqEzB,MAAM;IAC3G,CAAS,CAAC;EACV;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}