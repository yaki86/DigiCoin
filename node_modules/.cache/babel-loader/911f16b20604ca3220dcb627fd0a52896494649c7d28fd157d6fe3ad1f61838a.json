{"ast":null,"code":"import { resolveOwnerFields } from '../utils/resolveOwnerFields.mjs';\nimport { capitalize } from '../utils/stringTransformation.mjs';\nimport { selfAwareAsync } from '../utils/selfAwareAsync.mjs';\nimport { extendCancellability } from './cancellation.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\nconst connectionType = {\n  HAS_ONE: 'HAS_ONE',\n  HAS_MANY: 'HAS_MANY',\n  BELONGS_TO: 'BELONGS_TO'\n};\n// When generating an SK's KeyConditionInput name, string-like types map to String\nconst skGraphQlFieldTypeMap = {\n  ID: 'ID',\n  String: 'String',\n  AWSDate: 'String',\n  AWSTime: 'String',\n  AWSDateTime: 'String',\n  AWSTimestamp: 'Int',\n  AWSEmail: 'String',\n  AWSPhone: 'String',\n  AWSURL: 'String',\n  AWSIPAddress: 'String',\n  AWSJSON: 'String',\n  Boolean: 'Boolean',\n  Int: 'Int',\n  Float: 'Float'\n};\n// move to util\nconst resolvedSkName = sk => {\n  if (sk.length === 1) {\n    return sk[0];\n  } else {\n    return sk.reduce((acc, curr, idx) => {\n      if (idx === 0) {\n        return curr;\n      } else {\n        return acc + capitalize(curr);\n      }\n    }, '');\n  }\n};\n/**\n * Crawls a model tree, starting with a given **individual** model instance record, looking\n * for related hasMany children to extract from their `items` containers.\n *\n * E.g., if we have a record like this:\n *\n * ```js\n * {\n *   id: 'some-id',\n *   children: {\n *     items: [\n *       { name: 'a' }\n *       { name: 'b' }\n *       { name: 'c' }\n *     ]\n *   }\n * }\n * ```\n *\n * And if `children` refers to *an array of another model* (as opposed to a custom type),\n * the `items` will be extracted. We do this because `items` is just the mechanism for nesting\n * child records -- we don't want customers to have to dig the items out in application code.\n * Ultimately, we return this \"flattened\" structure:\n *\n * ```js\n * {\n *   id: 'some-id',\n *   children: [\n *     { name: 'a' }\n *     { name: 'b' }\n *     { name: 'c' }\n *   ]\n * }\n * ```\n *\n * Notably, an identical record could be the result of a nested custom type that contains an\n * `items` property. This will *not* be flattened, because in that case the `items` property is\n * actually part of the customer's schema. Similarly if a model contains an explicit `items` field.\n *\n * @param modelIntrospection Top-level model introspection schema.\n * @param modelName The name of the model. Can be `undefined`. E.g., for customOperation return types.\n * @param modelRecord The individual \"model instance record\" to normalize.\n */\nconst flattenItems = (modelIntrospection, modelName, modelRecord) => {\n  if (!modelRecord) return null;\n  const mapped = {};\n  for (const [fieldName, value] of Object.entries(modelRecord)) {\n    const fieldDef = modelName ? modelIntrospection.models[modelName]?.fields[fieldName] : undefined;\n    const dvPair = {\n      fieldDef,\n      value\n    };\n    if (isRelatedModelItemsArrayPair(dvPair)) {\n      mapped[fieldName] = dvPair.value.items.map(itemValue => flattenItems(modelIntrospection, dvPair.fieldDef.type.model, itemValue));\n    } else if (isRelatedModelProperty(fieldDef)) {\n      mapped[fieldName] = flattenItems(modelIntrospection, fieldDef.type.model, value);\n    } else {\n      mapped[fieldName] = value;\n    }\n  }\n  return mapped;\n};\n/**\n * Determines whether the given field definition and associated result value\n * represent a related model array from a HasMany-type relationship.\n *\n * @param dv Pair of field definition and associated result value\n * @returns\n */\nfunction isRelatedModelItemsArrayPair(dv) {\n  return typeof dv.fieldDef?.type === 'object' && 'model' in dv.fieldDef.type && typeof dv.fieldDef.type.model === 'string' && dv.fieldDef.isArray && Array.isArray(dv.value?.items);\n}\n/**\n * Determines whether the given field definition represents a relationship\n * to another model.\n *\n * @param fieldDef\n * @returns\n */\nfunction isRelatedModelProperty(fieldDef) {\n  return typeof fieldDef?.type === 'object' && 'model' in fieldDef.type && typeof fieldDef.type.model === 'string';\n}\n// TODO: this should accept single result to support CRUD methods; create helper for array/list\nfunction initializeModel(client, modelName, result, modelIntrospection, authMode, authToken, context = false) {\n  const introModel = modelIntrospection.models[modelName];\n  const introModelFields = introModel.fields;\n  const modelFields = Object.entries(introModelFields).filter(([_, field]) => field?.type?.model !== undefined).map(([fieldName]) => fieldName);\n  return result.map(record => {\n    if (record === null || record === undefined) {\n      return record;\n    }\n    const initializedRelationshipFields = {};\n    for (const fieldName of modelFields) {\n      const modelField = introModelFields[fieldName];\n      const modelFieldType = modelField?.type;\n      const relatedModelName = modelFieldType.model;\n      const relatedModel = modelIntrospection.models[relatedModelName];\n      const relatedModelPKFieldName = relatedModel.primaryKeyInfo.primaryKeyFieldName;\n      const relatedModelSKFieldNames = relatedModel.primaryKeyInfo.sortKeyFieldNames;\n      const relationType = modelField.association?.connectionType;\n      let connectionFields = [];\n      if (modelField.association && 'associatedWith' in modelField.association) {\n        connectionFields = modelField.association.associatedWith;\n      }\n      const targetNames = [];\n      if (modelField.association && 'targetNames' in modelField.association) {\n        targetNames.push(...modelField.association.targetNames);\n      }\n      switch (relationType) {\n        case connectionType.BELONGS_TO:\n          {\n            const sortKeyValues = relatedModelSKFieldNames.reduce(\n            // TODO(Eslint): is this implementation correct?\n            // eslint-disable-next-line array-callback-return\n            (acc, curVal) => {\n              if (record[curVal]) {\n                acc[curVal] = record[curVal];\n              }\n              return acc;\n            }, {});\n            // if get is disabled on the related model\n            if (client.models[relatedModelName]?.get === undefined) {\n              break;\n            }\n            if (context) {\n              initializedRelationshipFields[fieldName] = (contextSpec, options) => {\n                if (record[targetNames[0]]) {\n                  return client.models[relatedModelName].get(contextSpec, {\n                    [relatedModelPKFieldName]: record[targetNames[0]],\n                    ...sortKeyValues\n                  }, {\n                    authMode: options?.authMode || authMode,\n                    authToken: options?.authToken || authToken\n                  });\n                }\n                return {\n                  data: null\n                };\n              };\n            } else {\n              initializedRelationshipFields[fieldName] = options => {\n                if (record[targetNames[0]]) {\n                  return client.models[relatedModelName].get({\n                    [relatedModelPKFieldName]: record[targetNames[0]],\n                    ...sortKeyValues\n                  }, {\n                    authMode: options?.authMode || authMode,\n                    authToken: options?.authToken || authToken\n                  });\n                }\n                return {\n                  data: null\n                };\n              };\n            }\n            break;\n          }\n        case connectionType.HAS_ONE:\n        case connectionType.HAS_MANY:\n          {\n            /**\n             * If the loader is a HAS_ONE, we just need to attempt to grab the first item\n             * from the result.\n             */\n            const mapResult = relationType === connectionType.HAS_ONE ? result => {\n              return {\n                data: result?.data.shift() || null,\n                errors: result.errors,\n                extensions: result.extensions\n              };\n            } : result => result;\n            const parentPk = introModel.primaryKeyInfo.primaryKeyFieldName;\n            const parentSK = introModel.primaryKeyInfo.sortKeyFieldNames;\n            // M:N check - TODO: refactor\n            const relatedModelField = relatedModel.fields[connectionFields[0]];\n            const relatedModelFieldType = relatedModelField.type;\n            if (relatedModelFieldType.model) {\n              let relatedTargetNames = [];\n              if (relatedModelField.association && 'targetNames' in relatedModelField.association) {\n                relatedTargetNames = relatedModelField.association?.targetNames;\n              }\n              const hasManyFilter = relatedTargetNames.map((field, idx) => {\n                if (idx === 0) {\n                  return {\n                    [field]: {\n                      eq: record[parentPk]\n                    }\n                  };\n                }\n                return {\n                  [field]: {\n                    eq: record[parentSK[idx - 1]]\n                  }\n                };\n              });\n              // if list is disabled on the related model\n              if (client.models[relatedModelName]?.list === undefined) {\n                break;\n              }\n              if (context) {\n                initializedRelationshipFields[fieldName] = (contextSpec, options) => {\n                  if (record[parentPk]) {\n                    return selfAwareAsync(async resultPromise => {\n                      const basePromise = client.models[relatedModelName].list(contextSpec, {\n                        filter: {\n                          and: hasManyFilter\n                        },\n                        limit: options?.limit,\n                        nextToken: options?.nextToken,\n                        authMode: options?.authMode || authMode,\n                        authToken: options?.authToken || authToken\n                      });\n                      const extendedBase = extendCancellability(basePromise, resultPromise);\n                      return mapResult(await extendedBase);\n                    });\n                  }\n                  return [];\n                };\n              } else {\n                initializedRelationshipFields[fieldName] = options => {\n                  if (record[parentPk]) {\n                    return selfAwareAsync(async resultPromise => {\n                      const basePromise = client.models[relatedModelName].list({\n                        filter: {\n                          and: hasManyFilter\n                        },\n                        limit: options?.limit,\n                        nextToken: options?.nextToken,\n                        authMode: options?.authMode || authMode,\n                        authToken: options?.authToken || authToken\n                      });\n                      const extendedBase = extendCancellability(basePromise, resultPromise);\n                      return mapResult(await extendedBase);\n                    });\n                  }\n                  return [];\n                };\n              }\n              break;\n            }\n            const hasManyFilter = connectionFields.map((field, idx) => {\n              if (idx === 0) {\n                return {\n                  [field]: {\n                    eq: record[parentPk]\n                  }\n                };\n              }\n              return {\n                [field]: {\n                  eq: record[parentSK[idx - 1]]\n                }\n              };\n            });\n            // if list is disabled on the related model\n            if (client.models[relatedModelName]?.list === undefined) {\n              break;\n            }\n            if (context) {\n              initializedRelationshipFields[fieldName] = (contextSpec, options) => {\n                if (record[parentPk]) {\n                  return selfAwareAsync(async resultPromise => {\n                    const basePromise = client.models[relatedModelName].list(contextSpec, {\n                      filter: {\n                        and: hasManyFilter\n                      },\n                      limit: options?.limit,\n                      nextToken: options?.nextToken,\n                      authMode: options?.authMode || authMode,\n                      authToken: options?.authToken || authToken\n                    });\n                    const extendedBase = extendCancellability(basePromise, resultPromise);\n                    return mapResult(await extendedBase);\n                  });\n                }\n                return [];\n              };\n            } else {\n              initializedRelationshipFields[fieldName] = options => {\n                if (record[parentPk]) {\n                  return selfAwareAsync(async resultPromise => {\n                    const basePromise = client.models[relatedModelName].list({\n                      filter: {\n                        and: hasManyFilter\n                      },\n                      limit: options?.limit,\n                      nextToken: options?.nextToken,\n                      authMode: options?.authMode || authMode,\n                      authToken: options?.authToken || authToken\n                    });\n                    const extendedBase = extendCancellability(basePromise, resultPromise);\n                    return mapResult(await extendedBase);\n                  });\n                }\n                return [];\n              };\n            }\n            break;\n          }\n      }\n    }\n    return {\n      ...record,\n      ...initializedRelationshipFields\n    };\n  });\n}\nconst graphQLOperationsInfo = {\n  CREATE: {\n    operationPrefix: 'create',\n    usePlural: false\n  },\n  GET: {\n    operationPrefix: 'get',\n    usePlural: false\n  },\n  UPDATE: {\n    operationPrefix: 'update',\n    usePlural: false\n  },\n  DELETE: {\n    operationPrefix: 'delete',\n    usePlural: false\n  },\n  LIST: {\n    operationPrefix: 'list',\n    usePlural: true\n  },\n  INDEX_QUERY: {\n    operationPrefix: '',\n    usePlural: false\n  },\n  ONCREATE: {\n    operationPrefix: 'onCreate',\n    usePlural: false\n  },\n  ONUPDATE: {\n    operationPrefix: 'onUpdate',\n    usePlural: false\n  },\n  ONDELETE: {\n    operationPrefix: 'onDelete',\n    usePlural: false\n  },\n  OBSERVEQUERY: {\n    operationPrefix: 'observeQuery',\n    usePlural: false\n  }\n};\nconst SELECTION_SET_WILDCARD = '*';\nconst getDefaultSelectionSetForNonModelWithIR = (nonModelDefinition, modelIntrospection) => {\n  const {\n    fields\n  } = nonModelDefinition;\n  const mappedFields = Object.values(fields).map(({\n    type,\n    name\n  }) => {\n    if (typeof type.enum === 'string') {\n      return [name, FIELD_IR];\n    }\n    if (typeof type.nonModel === 'string') {\n      return [name, getDefaultSelectionSetForNonModelWithIR(modelIntrospection.nonModels[type.nonModel], modelIntrospection)];\n    }\n    if (typeof type === 'string') {\n      return [name, FIELD_IR];\n    }\n    return undefined;\n  }).filter(pair => pair !== undefined);\n  return Object.fromEntries(mappedFields);\n};\nconst getDefaultSelectionSetForModelWithIR = (modelDefinition, modelIntrospection) => {\n  const {\n    fields\n  } = modelDefinition;\n  const mappedFields = Object.values(fields).map(({\n    type,\n    name\n  }) => {\n    if (typeof type.enum === 'string' || typeof type === 'string') {\n      return [name, FIELD_IR];\n    }\n    if (typeof type.nonModel === 'string') {\n      return [name, getDefaultSelectionSetForNonModelWithIR(modelIntrospection.nonModels[type.nonModel], modelIntrospection)];\n    }\n    return undefined;\n  }).filter(pair => pair !== undefined);\n  const ownerFields = resolveOwnerFields(modelDefinition).map(field => [field, FIELD_IR]);\n  return Object.fromEntries(mappedFields.concat(ownerFields));\n};\nfunction defaultSelectionSetForModel(modelDefinition) {\n  // fields that are explicitly part of the graphql schema; not\n  // inferred from owner auth rules.\n  const {\n    fields\n  } = modelDefinition;\n  const explicitFields = Object.values(fields)\n  // Default selection set omits model fields\n  .map(({\n    type,\n    name\n  }) => {\n    if (typeof type === 'string') return name;\n    if (typeof type === 'object') {\n      if (typeof type?.enum === 'string') {\n        return name;\n      } else if (typeof type?.nonModel === 'string') {\n        return `${name}.${SELECTION_SET_WILDCARD}`;\n      }\n    }\n    return undefined;\n  }).filter(Boolean);\n  // fields used for owner auth rules that may or may not also\n  // be explicit on the model.\n  const ownerFields = resolveOwnerFields(modelDefinition);\n  return Array.from(new Set(explicitFields.concat(ownerFields)));\n}\nconst FIELD_IR = '';\n/**\n * Generates nested Custom Selection Set IR from path\n *\n * @param modelDefinitions\n * @param modelName\n * @param selectionSet - array of object paths\n * @example\n * ### Given\n * `selectionSet = ['id', 'comments.post.id']`\n * ### Returns\n * ```ts\n * {\n *   id: '',\n *   comments: {\n *     items: { post: { id: '' } }\n *   }\n * }\n * ```\n */\nfunction customSelectionSetToIR(modelIntrospection, modelName, selectionSet) {\n  const dotNotationToObject = (path, modelOrNonModelName) => {\n    const [fieldName, ...rest] = path.split('.');\n    const nested = rest[0];\n    const modelOrNonModelDefinition = modelIntrospection.models[modelOrNonModelName] ?? modelIntrospection.nonModels[modelOrNonModelName];\n    const modelOrNonModelFields = modelOrNonModelDefinition?.fields;\n    const relatedModel = modelOrNonModelFields?.[fieldName]?.type?.model;\n    const relatedModelDefinition = modelIntrospection.models[relatedModel];\n    const relatedNonModel = modelOrNonModelFields?.[fieldName]?.type?.nonModel;\n    const relatedNonModelDefinition = modelIntrospection.nonModels[relatedNonModel];\n    const isModelOrNonModelOrFieldType = relatedModelDefinition ? 'model' : relatedNonModelDefinition ? 'nonModel' : 'field';\n    if (isModelOrNonModelOrFieldType === 'nonModel') {\n      let result = {};\n      if (!nested) {\n        throw Error(`${fieldName} must declare a wildcard (*) or a field of custom type ${relatedNonModel}`);\n      }\n      if (nested === SELECTION_SET_WILDCARD) {\n        result = {\n          [fieldName]: getDefaultSelectionSetForNonModelWithIR(relatedNonModelDefinition, modelIntrospection)\n        };\n      } else {\n        result = {\n          [fieldName]: dotNotationToObject(rest.join('.'), relatedNonModel)\n        };\n      }\n      return result;\n    } else if (isModelOrNonModelOrFieldType === 'model') {\n      let result = {};\n      if (!nested) {\n        throw Error(`${fieldName} must declare a wildcard (*) or a field of model ${relatedModel}`);\n      }\n      if (nested === SELECTION_SET_WILDCARD) {\n        const nestedRelatedModelDefinition = modelIntrospection.models[relatedModel];\n        result = {\n          [fieldName]: getDefaultSelectionSetForModelWithIR(nestedRelatedModelDefinition, modelIntrospection)\n        };\n      } else {\n        result = {\n          [fieldName]: dotNotationToObject(rest.join('.'), relatedModel)\n        };\n      }\n      if (modelOrNonModelFields[fieldName]?.isArray) {\n        result = {\n          [fieldName]: {\n            items: result[fieldName]\n          }\n        };\n      }\n      return result;\n    } else {\n      const modelField = modelOrNonModelFields?.[fieldName];\n      const nonModelDefinition = modelIntrospection.nonModels[modelOrNonModelName];\n      const nonModelField = nonModelDefinition?.fields?.[fieldName];\n      if (!nonModelDefinition) {\n        const isOwnerField = resolveOwnerFields(modelOrNonModelDefinition).includes(fieldName);\n        if (!modelField && !isOwnerField) {\n          throw Error(`${fieldName} is not a field of model ${modelOrNonModelName}`);\n        }\n      } else {\n        if (!nonModelField) {\n          throw Error(`${fieldName} is not a field of custom type ${modelOrNonModelName}`);\n        }\n      }\n      return {\n        [fieldName]: FIELD_IR\n      };\n    }\n  };\n  return selectionSet.reduce((resultObj, path) => deepMergeSelectionSetObjects(dotNotationToObject(path, modelName), resultObj), {});\n}\n/**\n * Stringifies selection set IR\n * * @example\n * ### Given\n * ```ts\n * {\n *   id: '',\n *   comments: {\n *     items: { post: { id: '' } }\n *   }\n * }\n * ```\n * ### Returns\n * `'id comments { items { post { id } } }'`\n */\nfunction selectionSetIRToString(obj) {\n  const res = [];\n  Object.entries(obj).forEach(([fieldName, value]) => {\n    if (value === FIELD_IR) {\n      res.push(fieldName);\n    } else if (typeof value === 'object' && value !== null) {\n      if (value?.items) {\n        res.push(fieldName, '{', 'items', '{', selectionSetIRToString(value.items), '}', '}');\n      } else {\n        res.push(fieldName, '{', selectionSetIRToString(value), '}');\n      }\n    }\n  });\n  return res.join(' ');\n}\n/**\n * Recursively merges selection set objects from `source` onto `target`.\n *\n * `target` will be updated. `source` will be left alone.\n *\n * @param source The object to merge into target.\n * @param target The object to be mutated.\n */\nfunction deepMergeSelectionSetObjects(source, target) {\n  const isObject = obj => obj && typeof obj === 'object';\n  for (const key in source) {\n    // This verification avoids 'Prototype Pollution' issue\n    if (!Object.prototype.hasOwnProperty.call(source, key)) continue;\n    if (Object.prototype.hasOwnProperty.call(target, key) && isObject(target[key])) {\n      deepMergeSelectionSetObjects(source[key], target[key]);\n    } else {\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction generateSelectionSet(modelIntrospection, modelName, selectionSet) {\n  const modelDefinition = modelIntrospection.models[modelName];\n  const selSetIr = customSelectionSetToIR(modelIntrospection, modelName, selectionSet ?? defaultSelectionSetForModel(modelDefinition));\n  const selSetString = selectionSetIRToString(selSetIr);\n  return selSetString;\n}\nfunction generateGraphQLDocument(modelIntrospection, modelDefinition, modelOperation, listArgs, indexMeta) {\n  const {\n    name,\n    pluralName,\n    fields,\n    primaryKeyInfo: {\n      isCustomPrimaryKey,\n      primaryKeyFieldName,\n      sortKeyFieldNames\n    },\n    attributes\n  } = modelDefinition;\n  // Use pascal case of the model name to generate the operations and the arguments.\n  // This is required to be in sync with the resources generated by the GraphQL transformers.\n  const namePascalCase = name.charAt(0).toUpperCase() + name.slice(1);\n  const pluralNamePascalCase = pluralName.charAt(0).toUpperCase() + pluralName.slice(1);\n  const {\n    operationPrefix,\n    usePlural\n  } = graphQLOperationsInfo[modelOperation];\n  const {\n    selectionSet\n  } = listArgs || {};\n  let graphQLFieldName;\n  let indexQueryArgs;\n  if (operationPrefix) {\n    graphQLFieldName = `${operationPrefix}${usePlural ? pluralNamePascalCase : namePascalCase}`;\n  } else if (indexMeta) {\n    const {\n      queryField,\n      pk,\n      sk = []\n    } = indexMeta;\n    graphQLFieldName = queryField;\n    /**\n     * **a. Single field SK** -> single arg where name is the field name and the type is `Model${gqlFieldType}KeyConditionInput` (nullable)\n     *  Note: string-like data types e.g.,  AWSDateTime, AWSEmail, AWSPhone, etc. should map to String. See `skGraphQlFieldTypeMap` above\n     * @example\n     * ```\n     * sk1: ModelStringKeyConditionInput\n     * ```\n     *\n     * **b. Composite SK** -> single arg where the name is camelCase concatenation of all the field names that comprise the SK\n     *  and the type is `Model${modelName}${keyAttributeName}CompositeKeyConditionInput` (nullable)\n     * @example\n     * ```\n     * sk1Sk2: ModelMyModelMyModelByPkAndSk1AndSk2CompositeKeyConditionInput\n     */\n    let skQueryArgs = {};\n    if (sk.length === 1) {\n      const [skField] = sk;\n      const type = typeof fields[skField].type === 'string' ? fields[skField].type : 'String';\n      const normalizedType = skGraphQlFieldTypeMap[type];\n      skQueryArgs = {\n        [skField]: `Model${normalizedType}KeyConditionInput`\n      };\n    } else if (sk.length > 1) {\n      const compositeSkArgName = resolvedSkName(sk);\n      const keyName = attributes?.find(attr => attr?.properties?.queryField === queryField)?.properties?.name;\n      skQueryArgs = {\n        [compositeSkArgName]: `Model${capitalize(name)}${capitalize(keyName)}CompositeKeyConditionInput`\n      };\n    }\n    indexQueryArgs = {\n      [pk]: `${Object.prototype.hasOwnProperty.call(fields[pk].type, 'enum') ? fields[pk].type.enum // AppSync schema sets enum type as the type of the enum fields that's used as PK\n      : fields[pk].type}!`,\n      ...skQueryArgs\n    };\n  } else {\n    throw new Error('Error generating GraphQL Document - invalid operation name');\n  }\n  let graphQLOperationType;\n  let graphQLSelectionSet;\n  let graphQLArguments;\n  const selectionSetFields = generateSelectionSet(modelIntrospection, name, selectionSet);\n  // default PK args for get and list operations\n  // modified below for CPK\n  const getPkArgs = {\n    [primaryKeyFieldName]: `${fields[primaryKeyFieldName].type}!`\n  };\n  const listPkArgs = {};\n  /**\n   * Generate query field args for the SK if it's defined\n   *\n   * **1. Get queries** require each SK field to be present as a separate arg where the type is the field's GraphQL scalar type (non-nullable)\n   * @example\n   * ```\n   * sk1: String!, sk2: Int!\n   * ```\n   *\n   * **2. List queries**\n   *\n   * **a. Single field SK** -> single arg where name is the field name and the type is `Model${gqlFieldType}KeyConditionInput` (nullable)\n   *      Note: string-like data types e.g.,  AWSDateTime, AWSEmail, AWSPhone, etc. should map to String. See `skGraphQlFieldTypeMap` above\n   * @example\n   * ```\n   * sk1: ModelStringKeyConditionInput\n   * ```\n   *\n   * **b. Composite SK** -> single arg where the name is camelCase concatenation of all the field names that comprise the SK\n   *  and the type is `Model${modelName}PrimaryCompositeKeyConditionInput` (nullable)\n   * @example\n   * ```\n   * sk1Sk2: ModelMyModelPrimaryCompositeKeyConditionInput\n   * ```\n   */\n  const generateSkArgs = op => {\n    if (sortKeyFieldNames.length === 0) return {};\n    if (op === 'get') {\n      return sortKeyFieldNames.reduce((acc, fieldName) => {\n        const fieldType = fields[fieldName].type;\n        if (op === 'get') {\n          acc[fieldName] = `${fieldType}!`; // ! - SK args are non-nullable in Get queries\n        }\n        return acc;\n      }, {});\n    } else {\n      // list SK\n      if (sortKeyFieldNames.length === 1) {\n        // Single SK\n        const [sk] = sortKeyFieldNames;\n        const type = typeof fields[sk].type === 'string' ? fields[sk].type : 'String';\n        const normalizedType = skGraphQlFieldTypeMap[type];\n        return {\n          [sk]: `Model${normalizedType}KeyConditionInput`\n        };\n      } else {\n        // Composite SK\n        const compositeSkArgName = resolvedSkName(sortKeyFieldNames);\n        return {\n          [compositeSkArgName]: `Model${capitalize(name)}PrimaryCompositeKeyConditionInput`\n        };\n      }\n    }\n  };\n  if (isCustomPrimaryKey) {\n    Object.assign(getPkArgs, generateSkArgs('get'));\n    Object.assign(listPkArgs, {\n      // PK is only included in list query field args in the generated GQL\n      // when explicitly specifying PK with .identifier(['fieldName']) or @primaryKey in the schema definition\n      [primaryKeyFieldName]: `${fields[primaryKeyFieldName].type}`,\n      // PK is always a nullable arg for list (no `!` after the type)\n      sortDirection: 'ModelSortDirection'\n    }, generateSkArgs('list'));\n  }\n  switch (modelOperation) {\n    case 'CREATE':\n    case 'UPDATE':\n    case 'DELETE':\n      graphQLArguments ?? (graphQLArguments = {\n        input: `${operationPrefix.charAt(0).toLocaleUpperCase() + operationPrefix.slice(1)}${namePascalCase}Input!`\n      });\n      graphQLOperationType ?? (graphQLOperationType = 'mutation');\n    // TODO(Eslint): this this case clause correct without the break statement?\n    // eslint-disable-next-line no-fallthrough\n    case 'GET':\n      graphQLArguments ?? (graphQLArguments = getPkArgs);\n      graphQLSelectionSet ?? (graphQLSelectionSet = selectionSetFields);\n    // TODO(Eslint): this this case clause correct without the break statement?\n    // eslint-disable-next-line no-fallthrough\n    case 'LIST':\n      graphQLArguments ?? (graphQLArguments = {\n        ...listPkArgs,\n        // eslint doesn't like the ts-ignore, because it thinks it's unnecessary.\n        // But TS doesn't like the `filter: ...` because it think it will always be\n        // overwritten. (it won't be.) so, we need to ignore the TS error and then\n        // ignore the eslint error on the ts-ignore.\n        // eslint-disable-next-line\n        // @ts-ignore\n        filter: `Model${namePascalCase}FilterInput`,\n        limit: 'Int',\n        nextToken: 'String'\n      });\n      graphQLOperationType ?? (graphQLOperationType = 'query');\n      graphQLSelectionSet ?? (graphQLSelectionSet = `items { ${selectionSetFields} } nextToken __typename`);\n    // TODO(Eslint): this this case clause correct without the break statement?\n    // eslint-disable-next-line no-fallthrough\n    case 'INDEX_QUERY':\n      graphQLArguments ?? (graphQLArguments = {\n        ...indexQueryArgs,\n        filter: `Model${namePascalCase}FilterInput`,\n        sortDirection: 'ModelSortDirection',\n        limit: 'Int',\n        nextToken: 'String'\n      });\n      graphQLOperationType ?? (graphQLOperationType = 'query');\n      graphQLSelectionSet ?? (graphQLSelectionSet = `items { ${selectionSetFields} } nextToken __typename`);\n    // TODO(Eslint): this this case clause correct without the break statement?\n    // eslint-disable-next-line no-fallthrough\n    case 'ONCREATE':\n    case 'ONUPDATE':\n    case 'ONDELETE':\n      graphQLArguments ?? (graphQLArguments = {\n        filter: `ModelSubscription${namePascalCase}FilterInput`\n      });\n      graphQLOperationType ?? (graphQLOperationType = 'subscription');\n      graphQLSelectionSet ?? (graphQLSelectionSet = selectionSetFields);\n      break;\n    case 'OBSERVEQUERY':\n    default:\n      throw new Error('Internal error: Attempted to generate graphql document for observeQuery. Please report this error.');\n  }\n  const graphQLDocument = `${graphQLOperationType}${graphQLArguments ? `(${Object.entries(graphQLArguments).map(([fieldName, type]) => `$${fieldName}: ${type}`)})` : ''} { ${graphQLFieldName}${graphQLArguments ? `(${Object.keys(graphQLArguments).map(fieldName => `${fieldName}: $${fieldName}`)})` : ''} { ${graphQLSelectionSet} } }`;\n  return graphQLDocument;\n}\nfunction buildGraphQLVariables(modelDefinition, operation, arg, modelIntrospection, indexMeta) {\n  const {\n    fields,\n    primaryKeyInfo: {\n      isCustomPrimaryKey,\n      primaryKeyFieldName,\n      sortKeyFieldNames\n    }\n  } = modelDefinition;\n  const skName = sortKeyFieldNames?.length && resolvedSkName(sortKeyFieldNames);\n  let variables = {};\n  // TODO: process input\n  switch (operation) {\n    case 'CREATE':\n      variables = {\n        input: arg ? normalizeMutationInput(arg, modelDefinition, modelIntrospection) : {}\n      };\n      break;\n    case 'UPDATE':\n      // readonly fields are not  updated\n      variables = {\n        input: arg ? Object.fromEntries(Object.entries(normalizeMutationInput(arg, modelDefinition, modelIntrospection)).filter(([fieldName]) => {\n          const {\n            isReadOnly\n          } = fields[fieldName];\n          return !isReadOnly;\n        })) : {}\n      };\n      break;\n    case 'GET':\n    case 'DELETE':\n      // only identifiers are sent\n      if (arg) {\n        variables = isCustomPrimaryKey ? [primaryKeyFieldName, ...sortKeyFieldNames].reduce((acc, fieldName) => {\n          acc[fieldName] = arg[fieldName];\n          return acc;\n        }, {}) : {\n          [primaryKeyFieldName]: arg[primaryKeyFieldName]\n        };\n      }\n      if (operation === 'DELETE') {\n        variables = {\n          input: variables\n        };\n      }\n      break;\n    case 'LIST':\n      if (arg?.filter) {\n        variables.filter = arg.filter;\n      }\n      if (arg?.sortDirection) {\n        variables.sortDirection = arg.sortDirection;\n      }\n      if (arg && arg[primaryKeyFieldName]) {\n        variables[primaryKeyFieldName] = arg[primaryKeyFieldName];\n      }\n      if (skName && arg && arg[skName]) {\n        variables[skName] = arg[skName];\n      }\n      if (arg?.nextToken) {\n        variables.nextToken = arg.nextToken;\n      }\n      if (arg?.limit) {\n        variables.limit = arg.limit;\n      }\n      break;\n    case 'INDEX_QUERY':\n      {\n        const {\n          pk,\n          sk = []\n        } = indexMeta;\n        const indexQuerySkName = sk?.length && resolvedSkName(sk);\n        variables[pk] = arg[pk];\n        if (indexQuerySkName && arg && arg[indexQuerySkName]) {\n          variables[indexQuerySkName] = arg[indexQuerySkName];\n        }\n        if (arg?.filter) {\n          variables.filter = arg.filter;\n        }\n        if (arg?.sortDirection) {\n          variables.sortDirection = arg.sortDirection;\n        }\n        if (arg?.nextToken) {\n          variables.nextToken = arg.nextToken;\n        }\n        if (arg?.limit) {\n          variables.limit = arg.limit;\n        }\n        break;\n      }\n    case 'ONCREATE':\n    case 'ONUPDATE':\n    case 'ONDELETE':\n      if (arg?.filter) {\n        variables = {\n          filter: arg.filter\n        };\n      }\n      break;\n    case 'OBSERVEQUERY':\n      throw new Error('Internal error: Attempted to build variables for observeQuery. Please report this error.');\n    default:\n      {\n        const exhaustiveCheck = operation;\n        throw new Error(`Unhandled operation case: ${exhaustiveCheck}`);\n      }\n  }\n  return variables;\n}\n/**\n * Iterates over mutation input values and resolves any model inputs to their corresponding join fields/values\n *\n * @example\n * ### Usage\n * ```ts\n * const result = normalizeMutationInput({ post: post }, model, modelDefinition);\n * ```\n * ### Result\n * ```ts\n * { postId: \"abc123\" }\n * ```\n *\n */\nfunction normalizeMutationInput(mutationInput, model, modelIntrospection) {\n  const {\n    fields\n  } = model;\n  const normalized = {};\n  Object.entries(mutationInput).forEach(([inputFieldName, inputValue]) => {\n    const fieldType = fields[inputFieldName]?.type;\n    const relatedModelName = fieldType?.model;\n    if (relatedModelName) {\n      const association = fields[inputFieldName]?.association;\n      const relatedModelDef = modelIntrospection.models[relatedModelName];\n      const relatedModelPkInfo = relatedModelDef.primaryKeyInfo;\n      if (association?.connectionType === connectionType.HAS_ONE) {\n        const associationHasOne = association;\n        associationHasOne.targetNames.forEach((targetName, idx) => {\n          const associatedFieldName = associationHasOne.associatedWith[idx];\n          normalized[targetName] = inputValue[associatedFieldName];\n        });\n      }\n      if (association?.connectionType === connectionType.BELONGS_TO) {\n        const associationBelongsTo = association;\n        associationBelongsTo.targetNames.forEach((targetName, idx) => {\n          if (idx === 0) {\n            const associatedFieldName = relatedModelPkInfo.primaryKeyFieldName;\n            normalized[targetName] = inputValue[associatedFieldName];\n          } else {\n            const associatedFieldName = relatedModelPkInfo.sortKeyFieldNames[idx - 1];\n            normalized[targetName] = inputValue[associatedFieldName];\n          }\n        });\n      }\n    } else {\n      normalized[inputFieldName] = inputValue;\n    }\n  });\n  return normalized;\n}\n/**\n * Produces a parameter object that can contains auth mode/token overrides\n * only if present in either `options` (first) or configured on the `client`\n * as a fallback.\n *\n * @param client Configured client from `generateClient`\n * @param options Args/Options object from call site.\n * @returns\n */\nfunction authModeParams(client, getInternals, options = {}) {\n  const internals = getInternals(client);\n  return {\n    authMode: options.authMode || internals.authMode,\n    authToken: options.authToken || internals.authToken\n  };\n}\n/**\n * Retrieves custom headers from either the client or request options.\n * @param client V6Client | V6ClientSSRRequest | V6ClientSSRCookies - for extracting client headers\n * @param requestHeaders {@link CustomHeaders} - request headers\n * @returns custom headers as {@link CustomHeaders}\n */\nfunction getCustomHeaders(client, getInternals, requestHeaders) {\n  let headers = getInternals(client).headers || {};\n  // Individual request headers will take precedence over client headers.\n  // We intentionally do *not* merge client and request headers.\n  if (requestHeaders) {\n    headers = requestHeaders;\n  }\n  return headers;\n}\nexport { authModeParams, buildGraphQLVariables, customSelectionSetToIR, flattenItems, generateGraphQLDocument, generateSelectionSet, getCustomHeaders, getDefaultSelectionSetForNonModelWithIR, graphQLOperationsInfo, initializeModel, normalizeMutationInput, selectionSetIRToString };","map":{"version":3,"names":["connectionType","HAS_ONE","HAS_MANY","BELONGS_TO","skGraphQlFieldTypeMap","ID","String","AWSDate","AWSTime","AWSDateTime","AWSTimestamp","AWSEmail","AWSPhone","AWSURL","AWSIPAddress","AWSJSON","Boolean","Int","Float","resolvedSkName","sk","length","reduce","acc","curr","idx","capitalize","flattenItems","modelIntrospection","modelName","modelRecord","mapped","fieldName","value","Object","entries","fieldDef","models","fields","undefined","dvPair","isRelatedModelItemsArrayPair","items","map","itemValue","type","model","isRelatedModelProperty","dv","isArray","Array","initializeModel","client","result","authMode","authToken","context","introModel","introModelFields","modelFields","filter","_","field","record","initializedRelationshipFields","modelField","modelFieldType","relatedModelName","relatedModel","relatedModelPKFieldName","primaryKeyInfo","primaryKeyFieldName","relatedModelSKFieldNames","sortKeyFieldNames","relationType","association","connectionFields","associatedWith","targetNames","push","sortKeyValues","curVal","get","contextSpec","options","data","mapResult","shift","errors","extensions","parentPk","parentSK","relatedModelField","relatedModelFieldType","relatedTargetNames","hasManyFilter","eq","list","selfAwareAsync","resultPromise","basePromise","and","limit","nextToken","extendedBase","extendCancellability","graphQLOperationsInfo","CREATE","operationPrefix","usePlural","GET","UPDATE","DELETE","LIST","INDEX_QUERY","ONCREATE","ONUPDATE","ONDELETE","OBSERVEQUERY","SELECTION_SET_WILDCARD","getDefaultSelectionSetForNonModelWithIR","nonModelDefinition","mappedFields","values","name","enum","FIELD_IR","nonModel","nonModels","pair","fromEntries","getDefaultSelectionSetForModelWithIR","modelDefinition","ownerFields","resolveOwnerFields","concat","defaultSelectionSetForModel","explicitFields","from","Set","customSelectionSetToIR","selectionSet","dotNotationToObject","path","modelOrNonModelName","rest","split","nested","modelOrNonModelDefinition","modelOrNonModelFields","relatedModelDefinition","relatedNonModel","relatedNonModelDefinition","isModelOrNonModelOrFieldType","Error","join","nestedRelatedModelDefinition","nonModelField","isOwnerField","includes","resultObj","deepMergeSelectionSetObjects","selectionSetIRToString","obj","res","forEach","source","target","isObject","key","prototype","hasOwnProperty","call","generateSelectionSet","selSetIr","selSetString","generateGraphQLDocument","modelOperation","listArgs","indexMeta","pluralName","isCustomPrimaryKey","attributes","namePascalCase","charAt","toUpperCase","slice","pluralNamePascalCase","graphQLFieldName","indexQueryArgs","queryField","pk","skQueryArgs","skField","normalizedType","compositeSkArgName","keyName","find","attr","properties","graphQLOperationType","graphQLSelectionSet","graphQLArguments","selectionSetFields","getPkArgs","listPkArgs","generateSkArgs","op","fieldType","assign","sortDirection","input","toLocaleUpperCase","graphQLDocument","keys","buildGraphQLVariables","operation","arg","skName","variables","normalizeMutationInput","isReadOnly","indexQuerySkName","exhaustiveCheck","mutationInput","normalized","inputFieldName","inputValue","relatedModelDef","relatedModelPkInfo","associationHasOne","targetName","associatedFieldName","associationBelongsTo","authModeParams","getInternals","internals","getCustomHeaders","requestHeaders","headers"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/data-schema/src/runtime/internals/APIClient.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\nimport { resolveOwnerFields, capitalize, selfAwareAsync } from '../utils';\nimport { extendCancellability } from './cancellation';\nconst connectionType = {\n    HAS_ONE: 'HAS_ONE',\n    HAS_MANY: 'HAS_MANY',\n    BELONGS_TO: 'BELONGS_TO',\n};\n// When generating an SK's KeyConditionInput name, string-like types map to String\nconst skGraphQlFieldTypeMap = {\n    ID: 'ID',\n    String: 'String',\n    AWSDate: 'String',\n    AWSTime: 'String',\n    AWSDateTime: 'String',\n    AWSTimestamp: 'Int',\n    AWSEmail: 'String',\n    AWSPhone: 'String',\n    AWSURL: 'String',\n    AWSIPAddress: 'String',\n    AWSJSON: 'String',\n    Boolean: 'Boolean',\n    Int: 'Int',\n    Float: 'Float',\n};\n// move to util\nconst resolvedSkName = (sk) => {\n    if (sk.length === 1) {\n        return sk[0];\n    }\n    else {\n        return sk.reduce((acc, curr, idx) => {\n            if (idx === 0) {\n                return curr;\n            }\n            else {\n                return acc + capitalize(curr);\n            }\n        }, '');\n    }\n};\n/**\n * Crawls a model tree, starting with a given **individual** model instance record, looking\n * for related hasMany children to extract from their `items` containers.\n *\n * E.g., if we have a record like this:\n *\n * ```js\n * {\n *   id: 'some-id',\n *   children: {\n *     items: [\n *       { name: 'a' }\n *       { name: 'b' }\n *       { name: 'c' }\n *     ]\n *   }\n * }\n * ```\n *\n * And if `children` refers to *an array of another model* (as opposed to a custom type),\n * the `items` will be extracted. We do this because `items` is just the mechanism for nesting\n * child records -- we don't want customers to have to dig the items out in application code.\n * Ultimately, we return this \"flattened\" structure:\n *\n * ```js\n * {\n *   id: 'some-id',\n *   children: [\n *     { name: 'a' }\n *     { name: 'b' }\n *     { name: 'c' }\n *   ]\n * }\n * ```\n *\n * Notably, an identical record could be the result of a nested custom type that contains an\n * `items` property. This will *not* be flattened, because in that case the `items` property is\n * actually part of the customer's schema. Similarly if a model contains an explicit `items` field.\n *\n * @param modelIntrospection Top-level model introspection schema.\n * @param modelName The name of the model. Can be `undefined`. E.g., for customOperation return types.\n * @param modelRecord The individual \"model instance record\" to normalize.\n */\nexport const flattenItems = (modelIntrospection, modelName, modelRecord) => {\n    if (!modelRecord)\n        return null;\n    const mapped = {};\n    for (const [fieldName, value] of Object.entries(modelRecord)) {\n        const fieldDef = modelName\n            ? modelIntrospection.models[modelName]?.fields[fieldName]\n            : undefined;\n        const dvPair = { fieldDef, value };\n        if (isRelatedModelItemsArrayPair(dvPair)) {\n            mapped[fieldName] = dvPair.value.items.map((itemValue) => flattenItems(modelIntrospection, dvPair.fieldDef.type.model, itemValue));\n        }\n        else if (isRelatedModelProperty(fieldDef)) {\n            mapped[fieldName] = flattenItems(modelIntrospection, fieldDef.type.model, value);\n        }\n        else {\n            mapped[fieldName] = value;\n        }\n    }\n    return mapped;\n};\n/**\n * Determines whether the given field definition and associated result value\n * represent a related model array from a HasMany-type relationship.\n *\n * @param dv Pair of field definition and associated result value\n * @returns\n */\nfunction isRelatedModelItemsArrayPair(dv) {\n    return (typeof dv.fieldDef?.type === 'object' &&\n        'model' in dv.fieldDef.type &&\n        typeof dv.fieldDef.type.model === 'string' &&\n        dv.fieldDef.isArray &&\n        Array.isArray(dv.value?.items));\n}\n/**\n * Determines whether the given field definition represents a relationship\n * to another model.\n *\n * @param fieldDef\n * @returns\n */\nfunction isRelatedModelProperty(fieldDef) {\n    return (typeof fieldDef?.type === 'object' &&\n        'model' in fieldDef.type &&\n        typeof fieldDef.type.model === 'string');\n}\n// TODO: this should accept single result to support CRUD methods; create helper for array/list\nexport function initializeModel(client, modelName, result, modelIntrospection, authMode, authToken, context = false) {\n    const introModel = modelIntrospection.models[modelName];\n    const introModelFields = introModel.fields;\n    const modelFields = Object.entries(introModelFields)\n        .filter(([_, field]) => field?.type?.model !== undefined)\n        .map(([fieldName]) => fieldName);\n    return result.map((record) => {\n        if (record === null || record === undefined) {\n            return record;\n        }\n        const initializedRelationshipFields = {};\n        for (const fieldName of modelFields) {\n            const modelField = introModelFields[fieldName];\n            const modelFieldType = modelField?.type;\n            const relatedModelName = modelFieldType.model;\n            const relatedModel = modelIntrospection.models[relatedModelName];\n            const relatedModelPKFieldName = relatedModel.primaryKeyInfo.primaryKeyFieldName;\n            const relatedModelSKFieldNames = relatedModel.primaryKeyInfo.sortKeyFieldNames;\n            const relationType = modelField.association?.connectionType;\n            let connectionFields = [];\n            if (modelField.association &&\n                'associatedWith' in modelField.association) {\n                connectionFields = modelField.association.associatedWith;\n            }\n            const targetNames = [];\n            if (modelField.association && 'targetNames' in modelField.association) {\n                targetNames.push(...modelField.association.targetNames);\n            }\n            switch (relationType) {\n                case connectionType.BELONGS_TO: {\n                    const sortKeyValues = relatedModelSKFieldNames.reduce(\n                    // TODO(Eslint): is this implementation correct?\n                    // eslint-disable-next-line array-callback-return\n                    (acc, curVal) => {\n                        if (record[curVal]) {\n                            acc[curVal] = record[curVal];\n                        }\n                        return acc;\n                    }, {});\n                    // if get is disabled on the related model\n                    if (client.models[relatedModelName]?.get === undefined) {\n                        break;\n                    }\n                    if (context) {\n                        initializedRelationshipFields[fieldName] = (contextSpec, options) => {\n                            if (record[targetNames[0]]) {\n                                return client.models[relatedModelName].get(contextSpec, {\n                                    [relatedModelPKFieldName]: record[targetNames[0]],\n                                    ...sortKeyValues,\n                                }, {\n                                    authMode: options?.authMode || authMode,\n                                    authToken: options?.authToken || authToken,\n                                });\n                            }\n                            return { data: null };\n                        };\n                    }\n                    else {\n                        initializedRelationshipFields[fieldName] = (options) => {\n                            if (record[targetNames[0]]) {\n                                return client.models[relatedModelName].get({\n                                    [relatedModelPKFieldName]: record[targetNames[0]],\n                                    ...sortKeyValues,\n                                }, {\n                                    authMode: options?.authMode || authMode,\n                                    authToken: options?.authToken || authToken,\n                                });\n                            }\n                            return { data: null };\n                        };\n                    }\n                    break;\n                }\n                case connectionType.HAS_ONE:\n                case connectionType.HAS_MANY: {\n                    /**\n                     * If the loader is a HAS_ONE, we just need to attempt to grab the first item\n                     * from the result.\n                     */\n                    const mapResult = relationType === connectionType.HAS_ONE\n                        ? (result) => {\n                            return {\n                                data: result?.data.shift() || null,\n                                errors: result.errors,\n                                extensions: result.extensions,\n                            };\n                        }\n                        : (result) => result;\n                    const parentPk = introModel.primaryKeyInfo.primaryKeyFieldName;\n                    const parentSK = introModel.primaryKeyInfo.sortKeyFieldNames;\n                    // M:N check - TODO: refactor\n                    const relatedModelField = relatedModel.fields[connectionFields[0]];\n                    const relatedModelFieldType = relatedModelField.type;\n                    if (relatedModelFieldType.model) {\n                        let relatedTargetNames = [];\n                        if (relatedModelField.association &&\n                            'targetNames' in relatedModelField.association) {\n                            relatedTargetNames = relatedModelField.association?.targetNames;\n                        }\n                        const hasManyFilter = relatedTargetNames.map((field, idx) => {\n                            if (idx === 0) {\n                                return { [field]: { eq: record[parentPk] } };\n                            }\n                            return { [field]: { eq: record[parentSK[idx - 1]] } };\n                        });\n                        // if list is disabled on the related model\n                        if (client.models[relatedModelName]?.list === undefined) {\n                            break;\n                        }\n                        if (context) {\n                            initializedRelationshipFields[fieldName] = (contextSpec, options) => {\n                                if (record[parentPk]) {\n                                    return selfAwareAsync(async (resultPromise) => {\n                                        const basePromise = client.models[relatedModelName].list(contextSpec, {\n                                            filter: { and: hasManyFilter },\n                                            limit: options?.limit,\n                                            nextToken: options?.nextToken,\n                                            authMode: options?.authMode || authMode,\n                                            authToken: options?.authToken || authToken,\n                                        });\n                                        const extendedBase = extendCancellability(basePromise, resultPromise);\n                                        return mapResult((await extendedBase));\n                                    });\n                                }\n                                return [];\n                            };\n                        }\n                        else {\n                            initializedRelationshipFields[fieldName] = (options) => {\n                                if (record[parentPk]) {\n                                    return selfAwareAsync(async (resultPromise) => {\n                                        const basePromise = client.models[relatedModelName].list({\n                                            filter: { and: hasManyFilter },\n                                            limit: options?.limit,\n                                            nextToken: options?.nextToken,\n                                            authMode: options?.authMode || authMode,\n                                            authToken: options?.authToken || authToken,\n                                        });\n                                        const extendedBase = extendCancellability(basePromise, resultPromise);\n                                        return mapResult((await extendedBase));\n                                    });\n                                }\n                                return [];\n                            };\n                        }\n                        break;\n                    }\n                    const hasManyFilter = connectionFields.map((field, idx) => {\n                        if (idx === 0) {\n                            return { [field]: { eq: record[parentPk] } };\n                        }\n                        return { [field]: { eq: record[parentSK[idx - 1]] } };\n                    });\n                    // if list is disabled on the related model\n                    if (client.models[relatedModelName]?.list === undefined) {\n                        break;\n                    }\n                    if (context) {\n                        initializedRelationshipFields[fieldName] = (contextSpec, options) => {\n                            if (record[parentPk]) {\n                                return selfAwareAsync(async (resultPromise) => {\n                                    const basePromise = client.models[relatedModelName].list(contextSpec, {\n                                        filter: { and: hasManyFilter },\n                                        limit: options?.limit,\n                                        nextToken: options?.nextToken,\n                                        authMode: options?.authMode || authMode,\n                                        authToken: options?.authToken || authToken,\n                                    });\n                                    const extendedBase = extendCancellability(basePromise, resultPromise);\n                                    return mapResult((await extendedBase));\n                                });\n                            }\n                            return [];\n                        };\n                    }\n                    else {\n                        initializedRelationshipFields[fieldName] = (options) => {\n                            if (record[parentPk]) {\n                                return selfAwareAsync(async (resultPromise) => {\n                                    const basePromise = client.models[relatedModelName].list({\n                                        filter: { and: hasManyFilter },\n                                        limit: options?.limit,\n                                        nextToken: options?.nextToken,\n                                        authMode: options?.authMode || authMode,\n                                        authToken: options?.authToken || authToken,\n                                    });\n                                    const extendedBase = extendCancellability(basePromise, resultPromise);\n                                    return mapResult((await extendedBase));\n                                });\n                            }\n                            return [];\n                        };\n                    }\n                    break;\n                }\n                default:\n                    break;\n            }\n        }\n        return { ...record, ...initializedRelationshipFields };\n    });\n}\nexport const graphQLOperationsInfo = {\n    CREATE: { operationPrefix: 'create', usePlural: false },\n    GET: { operationPrefix: 'get', usePlural: false },\n    UPDATE: { operationPrefix: 'update', usePlural: false },\n    DELETE: { operationPrefix: 'delete', usePlural: false },\n    LIST: { operationPrefix: 'list', usePlural: true },\n    INDEX_QUERY: { operationPrefix: '', usePlural: false },\n    ONCREATE: { operationPrefix: 'onCreate', usePlural: false },\n    ONUPDATE: { operationPrefix: 'onUpdate', usePlural: false },\n    ONDELETE: { operationPrefix: 'onDelete', usePlural: false },\n    OBSERVEQUERY: { operationPrefix: 'observeQuery', usePlural: false },\n};\nconst SELECTION_SET_WILDCARD = '*';\nexport const getDefaultSelectionSetForNonModelWithIR = (nonModelDefinition, modelIntrospection) => {\n    const { fields } = nonModelDefinition;\n    const mappedFields = Object.values(fields)\n        .map(({ type, name }) => {\n        if (typeof type.enum === 'string') {\n            return [name, FIELD_IR];\n        }\n        if (typeof type.nonModel === 'string') {\n            return [\n                name,\n                getDefaultSelectionSetForNonModelWithIR(modelIntrospection.nonModels[type.nonModel], modelIntrospection),\n            ];\n        }\n        if (typeof type === 'string') {\n            return [name, FIELD_IR];\n        }\n        return undefined;\n    })\n        .filter((pair) => pair !== undefined);\n    return Object.fromEntries(mappedFields);\n};\nconst getDefaultSelectionSetForModelWithIR = (modelDefinition, modelIntrospection) => {\n    const { fields } = modelDefinition;\n    const mappedFields = Object.values(fields)\n        .map(({ type, name }) => {\n        if (typeof type.enum === 'string' ||\n            typeof type === 'string') {\n            return [name, FIELD_IR];\n        }\n        if (typeof type.nonModel === 'string') {\n            return [\n                name,\n                getDefaultSelectionSetForNonModelWithIR(modelIntrospection.nonModels[type.nonModel], modelIntrospection),\n            ];\n        }\n        return undefined;\n    })\n        .filter((pair) => pair !== undefined);\n    const ownerFields = resolveOwnerFields(modelDefinition).map((field) => [\n        field,\n        FIELD_IR,\n    ]);\n    return Object.fromEntries(mappedFields.concat(ownerFields));\n};\nfunction defaultSelectionSetForModel(modelDefinition) {\n    // fields that are explicitly part of the graphql schema; not\n    // inferred from owner auth rules.\n    const { fields } = modelDefinition;\n    const explicitFields = Object.values(fields)\n        // Default selection set omits model fields\n        .map(({ type, name }) => {\n        if (typeof type === 'string')\n            return name;\n        if (typeof type === 'object') {\n            if (typeof type?.enum === 'string') {\n                return name;\n            }\n            else if (typeof type?.nonModel === 'string') {\n                return `${name}.${SELECTION_SET_WILDCARD}`;\n            }\n        }\n        return undefined;\n    })\n        .filter(Boolean);\n    // fields used for owner auth rules that may or may not also\n    // be explicit on the model.\n    const ownerFields = resolveOwnerFields(modelDefinition);\n    return Array.from(new Set(explicitFields.concat(ownerFields)));\n}\nconst FIELD_IR = '';\n/**\n * Generates nested Custom Selection Set IR from path\n *\n * @param modelDefinitions\n * @param modelName\n * @param selectionSet - array of object paths\n * @example\n * ### Given\n * `selectionSet = ['id', 'comments.post.id']`\n * ### Returns\n * ```ts\n * {\n *   id: '',\n *   comments: {\n *     items: { post: { id: '' } }\n *   }\n * }\n * ```\n */\nexport function customSelectionSetToIR(modelIntrospection, modelName, selectionSet) {\n    const dotNotationToObject = (path, modelOrNonModelName) => {\n        const [fieldName, ...rest] = path.split('.');\n        const nested = rest[0];\n        const modelOrNonModelDefinition = modelIntrospection.models[modelOrNonModelName] ??\n            modelIntrospection.nonModels[modelOrNonModelName];\n        const modelOrNonModelFields = modelOrNonModelDefinition?.fields;\n        const relatedModel = modelOrNonModelFields?.[fieldName]?.type?.model;\n        const relatedModelDefinition = modelIntrospection.models[relatedModel];\n        const relatedNonModel = modelOrNonModelFields?.[fieldName]?.type?.nonModel;\n        const relatedNonModelDefinition = modelIntrospection.nonModels[relatedNonModel];\n        const isModelOrNonModelOrFieldType = relatedModelDefinition\n            ? 'model'\n            : relatedNonModelDefinition\n                ? 'nonModel'\n                : 'field';\n        if (isModelOrNonModelOrFieldType === 'nonModel') {\n            let result = {};\n            if (!nested) {\n                throw Error(`${fieldName} must declare a wildcard (*) or a field of custom type ${relatedNonModel}`);\n            }\n            if (nested === SELECTION_SET_WILDCARD) {\n                result = {\n                    [fieldName]: getDefaultSelectionSetForNonModelWithIR(relatedNonModelDefinition, modelIntrospection),\n                };\n            }\n            else {\n                result = {\n                    [fieldName]: dotNotationToObject(rest.join('.'), relatedNonModel),\n                };\n            }\n            return result;\n        }\n        else if (isModelOrNonModelOrFieldType === 'model') {\n            let result = {};\n            if (!nested) {\n                throw Error(`${fieldName} must declare a wildcard (*) or a field of model ${relatedModel}`);\n            }\n            if (nested === SELECTION_SET_WILDCARD) {\n                const nestedRelatedModelDefinition = modelIntrospection.models[relatedModel];\n                result = {\n                    [fieldName]: getDefaultSelectionSetForModelWithIR(nestedRelatedModelDefinition, modelIntrospection),\n                };\n            }\n            else {\n                result = {\n                    [fieldName]: dotNotationToObject(rest.join('.'), relatedModel),\n                };\n            }\n            if (modelOrNonModelFields[fieldName]?.isArray) {\n                result = {\n                    [fieldName]: {\n                        items: result[fieldName],\n                    },\n                };\n            }\n            return result;\n        }\n        else {\n            const modelField = modelOrNonModelFields?.[fieldName];\n            const nonModelDefinition = modelIntrospection.nonModels[modelOrNonModelName];\n            const nonModelField = nonModelDefinition?.fields?.[fieldName];\n            if (!nonModelDefinition) {\n                const isOwnerField = resolveOwnerFields(modelOrNonModelDefinition).includes(fieldName);\n                if (!modelField && !isOwnerField) {\n                    throw Error(`${fieldName} is not a field of model ${modelOrNonModelName}`);\n                }\n            }\n            else {\n                if (!nonModelField) {\n                    throw Error(`${fieldName} is not a field of custom type ${modelOrNonModelName}`);\n                }\n            }\n            return { [fieldName]: FIELD_IR };\n        }\n    };\n    return selectionSet.reduce((resultObj, path) => deepMergeSelectionSetObjects(dotNotationToObject(path, modelName), resultObj), {});\n}\n/**\n * Stringifies selection set IR\n * * @example\n * ### Given\n * ```ts\n * {\n *   id: '',\n *   comments: {\n *     items: { post: { id: '' } }\n *   }\n * }\n * ```\n * ### Returns\n * `'id comments { items { post { id } } }'`\n */\nexport function selectionSetIRToString(obj) {\n    const res = [];\n    Object.entries(obj).forEach(([fieldName, value]) => {\n        if (value === FIELD_IR) {\n            res.push(fieldName);\n        }\n        else if (typeof value === 'object' && value !== null) {\n            if (value?.items) {\n                res.push(fieldName, '{', 'items', '{', selectionSetIRToString(value.items), '}', '}');\n            }\n            else {\n                res.push(fieldName, '{', selectionSetIRToString(value), '}');\n            }\n        }\n    });\n    return res.join(' ');\n}\n/**\n * Recursively merges selection set objects from `source` onto `target`.\n *\n * `target` will be updated. `source` will be left alone.\n *\n * @param source The object to merge into target.\n * @param target The object to be mutated.\n */\nfunction deepMergeSelectionSetObjects(source, target) {\n    const isObject = (obj) => obj && typeof obj === 'object';\n    for (const key in source) {\n        // This verification avoids 'Prototype Pollution' issue\n        if (!Object.prototype.hasOwnProperty.call(source, key))\n            continue;\n        if (Object.prototype.hasOwnProperty.call(target, key) &&\n            isObject(target[key])) {\n            deepMergeSelectionSetObjects(source[key], target[key]);\n        }\n        else {\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nexport function generateSelectionSet(modelIntrospection, modelName, selectionSet) {\n    const modelDefinition = modelIntrospection.models[modelName];\n    const selSetIr = customSelectionSetToIR(modelIntrospection, modelName, selectionSet ?? defaultSelectionSetForModel(modelDefinition));\n    const selSetString = selectionSetIRToString(selSetIr);\n    return selSetString;\n}\nexport function generateGraphQLDocument(modelIntrospection, modelDefinition, modelOperation, listArgs, indexMeta) {\n    const { name, pluralName, fields, primaryKeyInfo: { isCustomPrimaryKey, primaryKeyFieldName, sortKeyFieldNames, }, attributes, } = modelDefinition;\n    // Use pascal case of the model name to generate the operations and the arguments.\n    // This is required to be in sync with the resources generated by the GraphQL transformers.\n    const namePascalCase = name.charAt(0).toUpperCase() + name.slice(1);\n    const pluralNamePascalCase = pluralName.charAt(0).toUpperCase() + pluralName.slice(1);\n    const { operationPrefix, usePlural } = graphQLOperationsInfo[modelOperation];\n    const { selectionSet } = listArgs || {};\n    let graphQLFieldName;\n    let indexQueryArgs;\n    if (operationPrefix) {\n        graphQLFieldName = `${operationPrefix}${usePlural ? pluralNamePascalCase : namePascalCase}`;\n    }\n    else if (indexMeta) {\n        const { queryField, pk, sk = [] } = indexMeta;\n        graphQLFieldName = queryField;\n        /**\n         * **a. Single field SK** -> single arg where name is the field name and the type is `Model${gqlFieldType}KeyConditionInput` (nullable)\n         *  Note: string-like data types e.g.,  AWSDateTime, AWSEmail, AWSPhone, etc. should map to String. See `skGraphQlFieldTypeMap` above\n         * @example\n         * ```\n         * sk1: ModelStringKeyConditionInput\n         * ```\n         *\n         * **b. Composite SK** -> single arg where the name is camelCase concatenation of all the field names that comprise the SK\n         *  and the type is `Model${modelName}${keyAttributeName}CompositeKeyConditionInput` (nullable)\n         * @example\n         * ```\n         * sk1Sk2: ModelMyModelMyModelByPkAndSk1AndSk2CompositeKeyConditionInput\n         */\n        let skQueryArgs = {};\n        if (sk.length === 1) {\n            const [skField] = sk;\n            const type = (typeof fields[skField].type === 'string'\n                ? fields[skField].type\n                : 'String');\n            const normalizedType = skGraphQlFieldTypeMap[type];\n            skQueryArgs = {\n                [skField]: `Model${normalizedType}KeyConditionInput`,\n            };\n        }\n        else if (sk.length > 1) {\n            const compositeSkArgName = resolvedSkName(sk);\n            const keyName = attributes?.find((attr) => attr?.properties?.queryField === queryField)?.properties?.name;\n            skQueryArgs = {\n                [compositeSkArgName]: `Model${capitalize(name)}${capitalize(keyName)}CompositeKeyConditionInput`,\n            };\n        }\n        indexQueryArgs = {\n            [pk]: `${Object.prototype.hasOwnProperty.call(fields[pk].type, 'enum')\n                ? fields[pk].type.enum // AppSync schema sets enum type as the type of the enum fields that's used as PK\n                : fields[pk].type}!`,\n            ...skQueryArgs,\n        };\n    }\n    else {\n        throw new Error('Error generating GraphQL Document - invalid operation name');\n    }\n    let graphQLOperationType;\n    let graphQLSelectionSet;\n    let graphQLArguments;\n    const selectionSetFields = generateSelectionSet(modelIntrospection, name, selectionSet);\n    // default PK args for get and list operations\n    // modified below for CPK\n    const getPkArgs = {\n        [primaryKeyFieldName]: `${fields[primaryKeyFieldName].type}!`,\n    };\n    const listPkArgs = {};\n    /**\n     * Generate query field args for the SK if it's defined\n     *\n     * **1. Get queries** require each SK field to be present as a separate arg where the type is the field's GraphQL scalar type (non-nullable)\n     * @example\n     * ```\n     * sk1: String!, sk2: Int!\n     * ```\n     *\n     * **2. List queries**\n     *\n     * **a. Single field SK** -> single arg where name is the field name and the type is `Model${gqlFieldType}KeyConditionInput` (nullable)\n     *      Note: string-like data types e.g.,  AWSDateTime, AWSEmail, AWSPhone, etc. should map to String. See `skGraphQlFieldTypeMap` above\n     * @example\n     * ```\n     * sk1: ModelStringKeyConditionInput\n     * ```\n     *\n     * **b. Composite SK** -> single arg where the name is camelCase concatenation of all the field names that comprise the SK\n     *  and the type is `Model${modelName}PrimaryCompositeKeyConditionInput` (nullable)\n     * @example\n     * ```\n     * sk1Sk2: ModelMyModelPrimaryCompositeKeyConditionInput\n     * ```\n     */\n    const generateSkArgs = (op) => {\n        if (sortKeyFieldNames.length === 0)\n            return {};\n        if (op === 'get') {\n            return sortKeyFieldNames.reduce((acc, fieldName) => {\n                const fieldType = fields[fieldName].type;\n                if (op === 'get') {\n                    acc[fieldName] = `${fieldType}!`; // ! - SK args are non-nullable in Get queries\n                }\n                return acc;\n            }, {});\n        }\n        else {\n            // list SK\n            if (sortKeyFieldNames.length === 1) {\n                // Single SK\n                const [sk] = sortKeyFieldNames;\n                const type = (typeof fields[sk].type === 'string' ? fields[sk].type : 'String');\n                const normalizedType = skGraphQlFieldTypeMap[type];\n                return {\n                    [sk]: `Model${normalizedType}KeyConditionInput`,\n                };\n            }\n            else {\n                // Composite SK\n                const compositeSkArgName = resolvedSkName(sortKeyFieldNames);\n                return {\n                    [compositeSkArgName]: `Model${capitalize(name)}PrimaryCompositeKeyConditionInput`,\n                };\n            }\n        }\n    };\n    if (isCustomPrimaryKey) {\n        Object.assign(getPkArgs, generateSkArgs('get'));\n        Object.assign(listPkArgs, {\n            // PK is only included in list query field args in the generated GQL\n            // when explicitly specifying PK with .identifier(['fieldName']) or @primaryKey in the schema definition\n            [primaryKeyFieldName]: `${fields[primaryKeyFieldName].type}`, // PK is always a nullable arg for list (no `!` after the type)\n            sortDirection: 'ModelSortDirection',\n        }, generateSkArgs('list'));\n    }\n    switch (modelOperation) {\n        case 'CREATE':\n        case 'UPDATE':\n        case 'DELETE':\n            graphQLArguments ??\n                (graphQLArguments = {\n                    input: `${operationPrefix.charAt(0).toLocaleUpperCase() +\n                        operationPrefix.slice(1)}${namePascalCase}Input!`,\n                });\n            graphQLOperationType ?? (graphQLOperationType = 'mutation');\n        // TODO(Eslint): this this case clause correct without the break statement?\n        // eslint-disable-next-line no-fallthrough\n        case 'GET':\n            graphQLArguments ?? (graphQLArguments = getPkArgs);\n            graphQLSelectionSet ?? (graphQLSelectionSet = selectionSetFields);\n        // TODO(Eslint): this this case clause correct without the break statement?\n        // eslint-disable-next-line no-fallthrough\n        case 'LIST':\n            graphQLArguments ??\n                (graphQLArguments = {\n                    ...listPkArgs,\n                    // eslint doesn't like the ts-ignore, because it thinks it's unnecessary.\n                    // But TS doesn't like the `filter: ...` because it think it will always be\n                    // overwritten. (it won't be.) so, we need to ignore the TS error and then\n                    // ignore the eslint error on the ts-ignore.\n                    // eslint-disable-next-line\n                    // @ts-ignore\n                    filter: `Model${namePascalCase}FilterInput`,\n                    limit: 'Int',\n                    nextToken: 'String',\n                });\n            graphQLOperationType ?? (graphQLOperationType = 'query');\n            graphQLSelectionSet ??\n                (graphQLSelectionSet = `items { ${selectionSetFields} } nextToken __typename`);\n        // TODO(Eslint): this this case clause correct without the break statement?\n        // eslint-disable-next-line no-fallthrough\n        case 'INDEX_QUERY':\n            graphQLArguments ??\n                (graphQLArguments = {\n                    ...indexQueryArgs,\n                    filter: `Model${namePascalCase}FilterInput`,\n                    sortDirection: 'ModelSortDirection',\n                    limit: 'Int',\n                    nextToken: 'String',\n                });\n            graphQLOperationType ?? (graphQLOperationType = 'query');\n            graphQLSelectionSet ??\n                (graphQLSelectionSet = `items { ${selectionSetFields} } nextToken __typename`);\n        // TODO(Eslint): this this case clause correct without the break statement?\n        // eslint-disable-next-line no-fallthrough\n        case 'ONCREATE':\n        case 'ONUPDATE':\n        case 'ONDELETE':\n            graphQLArguments ??\n                (graphQLArguments = {\n                    filter: `ModelSubscription${namePascalCase}FilterInput`,\n                });\n            graphQLOperationType ?? (graphQLOperationType = 'subscription');\n            graphQLSelectionSet ?? (graphQLSelectionSet = selectionSetFields);\n            break;\n        case 'OBSERVEQUERY':\n        default:\n            throw new Error('Internal error: Attempted to generate graphql document for observeQuery. Please report this error.');\n    }\n    const graphQLDocument = `${graphQLOperationType}${graphQLArguments\n        ? `(${Object.entries(graphQLArguments).map(([fieldName, type]) => `$${fieldName}: ${type}`)})`\n        : ''} { ${graphQLFieldName}${graphQLArguments\n        ? `(${Object.keys(graphQLArguments).map((fieldName) => `${fieldName}: $${fieldName}`)})`\n        : ''} { ${graphQLSelectionSet} } }`;\n    return graphQLDocument;\n}\nexport function buildGraphQLVariables(modelDefinition, operation, arg, modelIntrospection, indexMeta) {\n    const { fields, primaryKeyInfo: { isCustomPrimaryKey, primaryKeyFieldName, sortKeyFieldNames, }, } = modelDefinition;\n    const skName = sortKeyFieldNames?.length && resolvedSkName(sortKeyFieldNames);\n    let variables = {};\n    // TODO: process input\n    switch (operation) {\n        case 'CREATE':\n            variables = {\n                input: arg\n                    ? normalizeMutationInput(arg, modelDefinition, modelIntrospection)\n                    : {},\n            };\n            break;\n        case 'UPDATE':\n            // readonly fields are not  updated\n            variables = {\n                input: arg\n                    ? Object.fromEntries(Object.entries(normalizeMutationInput(arg, modelDefinition, modelIntrospection)).filter(([fieldName]) => {\n                        const { isReadOnly } = fields[fieldName];\n                        return !isReadOnly;\n                    }))\n                    : {},\n            };\n            break;\n        case 'GET':\n        case 'DELETE':\n            // only identifiers are sent\n            if (arg) {\n                variables = isCustomPrimaryKey\n                    ? [primaryKeyFieldName, ...sortKeyFieldNames].reduce((acc, fieldName) => {\n                        acc[fieldName] = arg[fieldName];\n                        return acc;\n                    }, {})\n                    : { [primaryKeyFieldName]: arg[primaryKeyFieldName] };\n            }\n            if (operation === 'DELETE') {\n                variables = { input: variables };\n            }\n            break;\n        case 'LIST':\n            if (arg?.filter) {\n                variables.filter = arg.filter;\n            }\n            if (arg?.sortDirection) {\n                variables.sortDirection = arg.sortDirection;\n            }\n            if (arg && arg[primaryKeyFieldName]) {\n                variables[primaryKeyFieldName] = arg[primaryKeyFieldName];\n            }\n            if (skName && arg && arg[skName]) {\n                variables[skName] = arg[skName];\n            }\n            if (arg?.nextToken) {\n                variables.nextToken = arg.nextToken;\n            }\n            if (arg?.limit) {\n                variables.limit = arg.limit;\n            }\n            break;\n        case 'INDEX_QUERY': {\n            const { pk, sk = [] } = indexMeta;\n            const indexQuerySkName = sk?.length && resolvedSkName(sk);\n            variables[pk] = arg[pk];\n            if (indexQuerySkName && arg && arg[indexQuerySkName]) {\n                variables[indexQuerySkName] = arg[indexQuerySkName];\n            }\n            if (arg?.filter) {\n                variables.filter = arg.filter;\n            }\n            if (arg?.sortDirection) {\n                variables.sortDirection = arg.sortDirection;\n            }\n            if (arg?.nextToken) {\n                variables.nextToken = arg.nextToken;\n            }\n            if (arg?.limit) {\n                variables.limit = arg.limit;\n            }\n            break;\n        }\n        case 'ONCREATE':\n        case 'ONUPDATE':\n        case 'ONDELETE':\n            if (arg?.filter) {\n                variables = { filter: arg.filter };\n            }\n            break;\n        case 'OBSERVEQUERY':\n            throw new Error('Internal error: Attempted to build variables for observeQuery. Please report this error.');\n        default: {\n            const exhaustiveCheck = operation;\n            throw new Error(`Unhandled operation case: ${exhaustiveCheck}`);\n        }\n    }\n    return variables;\n}\n/**\n * Iterates over mutation input values and resolves any model inputs to their corresponding join fields/values\n *\n * @example\n * ### Usage\n * ```ts\n * const result = normalizeMutationInput({ post: post }, model, modelDefinition);\n * ```\n * ### Result\n * ```ts\n * { postId: \"abc123\" }\n * ```\n *\n */\nexport function normalizeMutationInput(mutationInput, model, modelIntrospection) {\n    const { fields } = model;\n    const normalized = {};\n    Object.entries(mutationInput).forEach(([inputFieldName, inputValue]) => {\n        const fieldType = fields[inputFieldName]?.type;\n        const relatedModelName = fieldType?.model;\n        if (relatedModelName) {\n            const association = fields[inputFieldName]?.association;\n            const relatedModelDef = modelIntrospection.models[relatedModelName];\n            const relatedModelPkInfo = relatedModelDef.primaryKeyInfo;\n            if (association?.connectionType === connectionType.HAS_ONE) {\n                const associationHasOne = association;\n                associationHasOne.targetNames.forEach((targetName, idx) => {\n                    const associatedFieldName = associationHasOne.associatedWith[idx];\n                    normalized[targetName] = inputValue[associatedFieldName];\n                });\n            }\n            if (association?.connectionType === connectionType.BELONGS_TO) {\n                const associationBelongsTo = association;\n                associationBelongsTo.targetNames.forEach((targetName, idx) => {\n                    if (idx === 0) {\n                        const associatedFieldName = relatedModelPkInfo.primaryKeyFieldName;\n                        normalized[targetName] = inputValue[associatedFieldName];\n                    }\n                    else {\n                        const associatedFieldName = relatedModelPkInfo.sortKeyFieldNames[idx - 1];\n                        normalized[targetName] = inputValue[associatedFieldName];\n                    }\n                });\n            }\n        }\n        else {\n            normalized[inputFieldName] = inputValue;\n        }\n    });\n    return normalized;\n}\n/**\n * Produces a parameter object that can contains auth mode/token overrides\n * only if present in either `options` (first) or configured on the `client`\n * as a fallback.\n *\n * @param client Configured client from `generateClient`\n * @param options Args/Options object from call site.\n * @returns\n */\nexport function authModeParams(client, getInternals, options = {}) {\n    const internals = getInternals(client);\n    return {\n        authMode: options.authMode || internals.authMode,\n        authToken: options.authToken || internals.authToken,\n    };\n}\n/**\n * Retrieves custom headers from either the client or request options.\n * @param client V6Client | V6ClientSSRRequest | V6ClientSSRCookies - for extracting client headers\n * @param requestHeaders {@link CustomHeaders} - request headers\n * @returns custom headers as {@link CustomHeaders}\n */\nexport function getCustomHeaders(client, getInternals, requestHeaders) {\n    let headers = getInternals(client).headers || {};\n    // Individual request headers will take precedence over client headers.\n    // We intentionally do *not* merge client and request headers.\n    if (requestHeaders) {\n        headers = requestHeaders;\n    }\n    return headers;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}