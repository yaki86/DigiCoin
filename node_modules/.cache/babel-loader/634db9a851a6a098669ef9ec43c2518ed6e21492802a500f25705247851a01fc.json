{"ast":null,"code":"import { getHashedDataAsHex } from './dataHashHelpers.mjs';\nimport { getCanonicalRequest } from './getCanonicalRequest.mjs';\nimport { getSigningKey } from './getSigningKey.mjs';\nimport { getStringToSign } from './getStringToSign.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Calculates and returns an AWS API Signature.\n * https://docs.aws.amazon.com/IAM/latest/UserGuide/create-signed-request.html\n *\n * @param request `HttpRequest` to be signed.\n * @param signRequestOptions `SignRequestOptions` object containing values used to construct the signature.\n * @returns AWS API Signature to sign a request or url with.\n *\n * @internal\n */\nconst getSignature = (request, _ref) => {\n  let {\n    credentialScope,\n    longDate,\n    secretAccessKey,\n    shortDate,\n    signingRegion,\n    signingService,\n    uriEscapePath\n  } = _ref;\n  // step 1: create a canonical request\n  const canonicalRequest = getCanonicalRequest(request, uriEscapePath);\n  // step 2: create a hash of the canonical request\n  const hashedRequest = getHashedDataAsHex(null, canonicalRequest);\n  // step 3: create a string to sign\n  const stringToSign = getStringToSign(longDate, credentialScope, hashedRequest);\n  // step 4: calculate the signature\n  const signature = getHashedDataAsHex(getSigningKey(secretAccessKey, shortDate, signingRegion, signingService), stringToSign);\n  return signature;\n};\nexport { getSignature };","map":{"version":3,"names":["getSignature","request","_ref","credentialScope","longDate","secretAccessKey","shortDate","signingRegion","signingService","uriEscapePath","canonicalRequest","getCanonicalRequest","hashedRequest","getHashedDataAsHex","stringToSign","getStringToSign","signature","getSigningKey"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/core/src/clients/middleware/signing/signer/signatureV4/utils/getSignature.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getHashedDataAsHex } from './dataHashHelpers';\nimport { getCanonicalRequest } from './getCanonicalRequest';\nimport { getSigningKey } from './getSigningKey';\nimport { getStringToSign } from './getStringToSign';\n/**\n * Calculates and returns an AWS API Signature.\n * https://docs.aws.amazon.com/IAM/latest/UserGuide/create-signed-request.html\n *\n * @param request `HttpRequest` to be signed.\n * @param signRequestOptions `SignRequestOptions` object containing values used to construct the signature.\n * @returns AWS API Signature to sign a request or url with.\n *\n * @internal\n */\nexport const getSignature = (request, { credentialScope, longDate, secretAccessKey, shortDate, signingRegion, signingService, uriEscapePath, }) => {\n    // step 1: create a canonical request\n    const canonicalRequest = getCanonicalRequest(request, uriEscapePath);\n    // step 2: create a hash of the canonical request\n    const hashedRequest = getHashedDataAsHex(null, canonicalRequest);\n    // step 3: create a string to sign\n    const stringToSign = getStringToSign(longDate, credentialScope, hashedRequest);\n    // step 4: calculate the signature\n    const signature = getHashedDataAsHex(getSigningKey(secretAccessKey, shortDate, signingRegion, signingService), stringToSign);\n    return signature;\n};\n"],"mappings":";;;;;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,YAAY,GAAGA,CAACC,OAAO,EAAAC,IAAA,KAA+G;EAAA,IAA7G;IAAEC,eAAe;IAAEC,QAAQ;IAAEC,eAAe;IAAEC,SAAS;IAAEC,aAAa;IAAEC,cAAc;IAAEC;EAAa,CAAG,GAAAP,IAAA;EAC9I;EACI,MAAMQ,gBAAgB,GAAGC,mBAAmB,CAACV,OAAO,EAAEQ,aAAa,CAAC;EACxE;EACI,MAAMG,aAAa,GAAGC,kBAAkB,CAAC,IAAI,EAAEH,gBAAgB,CAAC;EACpE;EACI,MAAMI,YAAY,GAAGC,eAAe,CAACX,QAAQ,EAAED,eAAe,EAAES,aAAa,CAAC;EAClF;EACI,MAAMI,SAAS,GAAGH,kBAAkB,CAACI,aAAa,CAACZ,eAAe,EAAEC,SAAS,EAAEC,aAAa,EAAEC,cAAc,CAAC,EAAEM,YAAY,CAAC;EAC5H,OAAOE,SAAS;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}