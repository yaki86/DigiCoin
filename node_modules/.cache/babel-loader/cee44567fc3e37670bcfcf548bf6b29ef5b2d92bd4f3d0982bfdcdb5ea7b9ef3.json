{"ast":null,"code":"import { AmplifyUrl, AmplifyUrlSearchParams } from '@aws-amplify/core/internals/utils';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst protocol = 'wss://';\nconst standardDomainPattern = /^https:\\/\\/\\w{26}\\.appsync-api\\.\\w{2}(?:(?:-\\w{2,})+)-\\d\\.amazonaws.com(?:\\.cn)?\\/graphql$/i;\nconst eventDomainPattern = /^https:\\/\\/\\w{26}\\.\\w+-api\\.\\w{2}(?:(?:-\\w{2,})+)-\\d\\.amazonaws.com(?:\\.cn)?\\/event$/i;\nconst customDomainPath = '/realtime';\nconst isCustomDomain = url => {\n  return url.match(standardDomainPattern) === null;\n};\nconst isEventDomain = url => url.match(eventDomainPattern) !== null;\nconst getRealtimeEndpointUrl = appSyncGraphqlEndpoint => {\n  let realtimeEndpoint = appSyncGraphqlEndpoint ?? '';\n  if (isEventDomain(realtimeEndpoint)) {\n    realtimeEndpoint = realtimeEndpoint.concat(customDomainPath).replace('ddpg-api', 'grt-gamma').replace('appsync-api', 'appsync-realtime-api');\n  } else if (isCustomDomain(realtimeEndpoint)) {\n    realtimeEndpoint = realtimeEndpoint.concat(customDomainPath);\n  } else {\n    realtimeEndpoint = realtimeEndpoint.replace('appsync-api', 'appsync-realtime-api').replace('gogi-beta', 'grt-beta').replace('ddpg-api', 'grt-gamma');\n  }\n  realtimeEndpoint = realtimeEndpoint.replace('https://', protocol).replace('http://', protocol);\n  return new AmplifyUrl(realtimeEndpoint);\n};\n/**\n * Strips out `Authorization` header if present\n */\nconst extractNonAuthHeaders = headers => {\n  if (!headers) {\n    return {};\n  }\n  if ('Authorization' in headers) {\n    const {\n      Authorization: _,\n      ...nonAuthHeaders\n    } = headers;\n    return nonAuthHeaders;\n  }\n  return headers;\n};\n/**\n *\n * @param headers - http headers\n * @returns uri-encoded query parameters derived from custom headers\n */\nconst queryParamsFromCustomHeaders = headers => {\n  const nonAuthHeaders = extractNonAuthHeaders(headers);\n  const params = new AmplifyUrlSearchParams();\n  Object.entries(nonAuthHeaders).forEach(([k, v]) => {\n    params.append(k, v);\n  });\n  return params;\n};\n/**\n * Normalizes AppSync realtime endpoint URL\n *\n * @param appSyncGraphqlEndpoint - AppSync endpointUri from config\n * @param urlParams - URLSearchParams\n * @returns fully resolved string realtime endpoint URL\n */\nconst realtimeUrlWithQueryString = (appSyncGraphqlEndpoint, urlParams) => {\n  const realtimeEndpointUrl = getRealtimeEndpointUrl(appSyncGraphqlEndpoint);\n  // preserves any query params a customer might manually set in the configuration\n  const existingParams = new AmplifyUrlSearchParams(realtimeEndpointUrl.search);\n  for (const [k, v] of urlParams.entries()) {\n    existingParams.append(k, v);\n  }\n  realtimeEndpointUrl.search = existingParams.toString();\n  return realtimeEndpointUrl.toString();\n};\n// TODO: move to separate file?\nconst additionalHeadersFromOptions = async options => {\n  const {\n    appSyncGraphqlEndpoint,\n    query,\n    libraryConfigHeaders = () => ({}),\n    additionalHeaders = {},\n    authToken\n  } = options;\n  let additionalCustomHeaders = {};\n  const _libraryConfigHeaders = await libraryConfigHeaders();\n  if (typeof additionalHeaders === 'function') {\n    const requestOptions = {\n      url: appSyncGraphqlEndpoint || '',\n      queryString: query || ''\n    };\n    additionalCustomHeaders = await additionalHeaders(requestOptions);\n  } else {\n    additionalCustomHeaders = additionalHeaders;\n  }\n  // if an authorization header is set, have the explicit, operation-level authToken take precedence\n  if (authToken) {\n    additionalCustomHeaders = {\n      ...additionalCustomHeaders,\n      Authorization: authToken\n    };\n  }\n  return {\n    additionalCustomHeaders,\n    libraryConfigHeaders: _libraryConfigHeaders\n  };\n};\nexport { additionalHeadersFromOptions, getRealtimeEndpointUrl, isCustomDomain, queryParamsFromCustomHeaders, realtimeUrlWithQueryString };","map":{"version":3,"names":["protocol","standardDomainPattern","eventDomainPattern","customDomainPath","isCustomDomain","url","match","isEventDomain","getRealtimeEndpointUrl","appSyncGraphqlEndpoint","realtimeEndpoint","concat","replace","AmplifyUrl","extractNonAuthHeaders","headers","Authorization","_","nonAuthHeaders","queryParamsFromCustomHeaders","params","AmplifyUrlSearchParams","Object","entries","forEach","k","v","append","realtimeUrlWithQueryString","urlParams","realtimeEndpointUrl","existingParams","search","toString","additionalHeadersFromOptions","options","query","libraryConfigHeaders","additionalHeaders","authToken","additionalCustomHeaders","_libraryConfigHeaders","requestOptions","queryString"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/api-graphql/src/Providers/AWSWebSocketProvider/appsyncUrl.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AmplifyUrl, AmplifyUrlSearchParams, } from '@aws-amplify/core/internals/utils';\nconst protocol = 'wss://';\nconst standardDomainPattern = /^https:\\/\\/\\w{26}\\.appsync-api\\.\\w{2}(?:(?:-\\w{2,})+)-\\d\\.amazonaws.com(?:\\.cn)?\\/graphql$/i;\nconst eventDomainPattern = /^https:\\/\\/\\w{26}\\.\\w+-api\\.\\w{2}(?:(?:-\\w{2,})+)-\\d\\.amazonaws.com(?:\\.cn)?\\/event$/i;\nconst customDomainPath = '/realtime';\nexport const isCustomDomain = (url) => {\n    return url.match(standardDomainPattern) === null;\n};\nconst isEventDomain = (url) => url.match(eventDomainPattern) !== null;\nexport const getRealtimeEndpointUrl = (appSyncGraphqlEndpoint) => {\n    let realtimeEndpoint = appSyncGraphqlEndpoint ?? '';\n    if (isEventDomain(realtimeEndpoint)) {\n        realtimeEndpoint = realtimeEndpoint\n            .concat(customDomainPath)\n            .replace('ddpg-api', 'grt-gamma')\n            .replace('appsync-api', 'appsync-realtime-api');\n    }\n    else if (isCustomDomain(realtimeEndpoint)) {\n        realtimeEndpoint = realtimeEndpoint.concat(customDomainPath);\n    }\n    else {\n        realtimeEndpoint = realtimeEndpoint\n            .replace('appsync-api', 'appsync-realtime-api')\n            .replace('gogi-beta', 'grt-beta')\n            .replace('ddpg-api', 'grt-gamma');\n    }\n    realtimeEndpoint = realtimeEndpoint\n        .replace('https://', protocol)\n        .replace('http://', protocol);\n    return new AmplifyUrl(realtimeEndpoint);\n};\n/**\n * Strips out `Authorization` header if present\n */\nconst extractNonAuthHeaders = (headers) => {\n    if (!headers) {\n        return {};\n    }\n    if ('Authorization' in headers) {\n        const { Authorization: _, ...nonAuthHeaders } = headers;\n        return nonAuthHeaders;\n    }\n    return headers;\n};\n/**\n *\n * @param headers - http headers\n * @returns uri-encoded query parameters derived from custom headers\n */\nexport const queryParamsFromCustomHeaders = (headers) => {\n    const nonAuthHeaders = extractNonAuthHeaders(headers);\n    const params = new AmplifyUrlSearchParams();\n    Object.entries(nonAuthHeaders).forEach(([k, v]) => {\n        params.append(k, v);\n    });\n    return params;\n};\n/**\n * Normalizes AppSync realtime endpoint URL\n *\n * @param appSyncGraphqlEndpoint - AppSync endpointUri from config\n * @param urlParams - URLSearchParams\n * @returns fully resolved string realtime endpoint URL\n */\nexport const realtimeUrlWithQueryString = (appSyncGraphqlEndpoint, urlParams) => {\n    const realtimeEndpointUrl = getRealtimeEndpointUrl(appSyncGraphqlEndpoint);\n    // preserves any query params a customer might manually set in the configuration\n    const existingParams = new AmplifyUrlSearchParams(realtimeEndpointUrl.search);\n    for (const [k, v] of urlParams.entries()) {\n        existingParams.append(k, v);\n    }\n    realtimeEndpointUrl.search = existingParams.toString();\n    return realtimeEndpointUrl.toString();\n};\n// TODO: move to separate file?\nexport const additionalHeadersFromOptions = async (options) => {\n    const { appSyncGraphqlEndpoint, query, libraryConfigHeaders = () => ({}), additionalHeaders = {}, authToken, } = options;\n    let additionalCustomHeaders = {};\n    const _libraryConfigHeaders = await libraryConfigHeaders();\n    if (typeof additionalHeaders === 'function') {\n        const requestOptions = {\n            url: appSyncGraphqlEndpoint || '',\n            queryString: query || '',\n        };\n        additionalCustomHeaders = await additionalHeaders(requestOptions);\n    }\n    else {\n        additionalCustomHeaders = additionalHeaders;\n    }\n    // if an authorization header is set, have the explicit, operation-level authToken take precedence\n    if (authToken) {\n        additionalCustomHeaders = {\n            ...additionalCustomHeaders,\n            Authorization: authToken,\n        };\n    }\n    return {\n        additionalCustomHeaders,\n        libraryConfigHeaders: _libraryConfigHeaders,\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}