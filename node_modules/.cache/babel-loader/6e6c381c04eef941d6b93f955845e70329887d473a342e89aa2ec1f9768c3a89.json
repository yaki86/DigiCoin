{"ast":null,"code":"import { toBase64 } from '@smithy/util-base64';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst serializeAiContext = aiContext => JSON.stringify(aiContext);\nconst serializeContent = content => content.map(block => {\n  if (block.image) {\n    return serializeImageBlock(block);\n  }\n  if (block.toolResult) {\n    return serializeToolResultBlock(block);\n  }\n  return block;\n});\nconst serializeToolConfiguration = _ref => {\n  let {\n    tools\n  } = _ref;\n  return {\n    tools: Object.entries(tools).map(_ref2 => {\n      let [name, tool] = _ref2;\n      return {\n        toolSpec: {\n          name,\n          description: tool.description,\n          inputSchema: {\n            json: JSON.stringify(tool.inputSchema.json)\n          }\n        }\n      };\n    })\n  };\n};\nconst serializeImageBlock = _ref3 => {\n  let {\n    image\n  } = _ref3;\n  return {\n    image: {\n      ...image,\n      source: {\n        ...image.source,\n        bytes: toBase64(image.source.bytes)\n      }\n    }\n  };\n};\nconst serializeJsonBlock = _ref4 => {\n  let {\n    json\n  } = _ref4;\n  return {\n    json: JSON.stringify(json)\n  };\n};\nconst serializeToolResultBlock = _ref5 => {\n  let {\n    toolResult\n  } = _ref5;\n  return {\n    toolResult: {\n      ...toolResult,\n      content: toolResult.content.map(toolResultBlock => {\n        if (toolResultBlock.image) {\n          return serializeImageBlock(toolResultBlock);\n        }\n        if (toolResultBlock.json) {\n          return serializeJsonBlock(toolResultBlock);\n        }\n        return toolResultBlock;\n      })\n    }\n  };\n};\nexport { serializeAiContext, serializeContent, serializeToolConfiguration };","map":{"version":3,"names":["serializeAiContext","aiContext","JSON","stringify","serializeContent","content","map","block","image","serializeImageBlock","toolResult","serializeToolResultBlock","serializeToolConfiguration","_ref","tools","Object","entries","_ref2","name","tool","toolSpec","description","inputSchema","json","_ref3","source","bytes","toBase64","serializeJsonBlock","_ref4","_ref5","toolResultBlock"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/data-schema/src/runtime/internals/ai/conversationMessageSerializers.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { toBase64 } from '@smithy/util-base64';\nexport const serializeAiContext = (aiContext) => JSON.stringify(aiContext);\nexport const serializeContent = (content) => content.map((block) => {\n    if (block.image) {\n        return serializeImageBlock(block);\n    }\n    if (block.toolResult) {\n        return serializeToolResultBlock(block);\n    }\n    return block;\n});\nexport const serializeToolConfiguration = ({ tools }) => ({\n    tools: Object.entries(tools).map(([name, tool]) => ({\n        toolSpec: {\n            name,\n            description: tool.description,\n            inputSchema: {\n                json: JSON.stringify(tool.inputSchema.json),\n            },\n        },\n    })),\n});\nconst serializeImageBlock = ({ image }) => ({\n    image: {\n        ...image,\n        source: {\n            ...image.source,\n            bytes: toBase64(image.source.bytes),\n        },\n    },\n});\nconst serializeJsonBlock = ({ json }) => ({\n    json: JSON.stringify(json),\n});\nconst serializeToolResultBlock = ({ toolResult, }) => ({\n    toolResult: {\n        ...toolResult,\n        content: toolResult.content.map((toolResultBlock) => {\n            if (toolResultBlock.image) {\n                return serializeImageBlock(toolResultBlock);\n            }\n            if (toolResultBlock.json) {\n                return serializeJsonBlock(toolResultBlock);\n            }\n            return toolResultBlock;\n        }),\n    },\n});\n"],"mappings":";;AAAA;AACA;AAEY,MAACA,kBAAkB,GAAIC,SAAS,IAAKC,IAAI,CAACC,SAAS,CAACF,SAAS;AAC7D,MAACG,gBAAgB,GAAIC,OAAO,IAAKA,OAAO,CAACC,GAAG,CAAEC,KAAK,IAAK;EAChE,IAAIA,KAAK,CAACC,KAAK,EAAE;IACb,OAAOC,mBAAmB,CAACF,KAAK,CAAC;EACzC;EACI,IAAIA,KAAK,CAACG,UAAU,EAAE;IAClB,OAAOC,wBAAwB,CAACJ,KAAK,CAAC;EAC9C;EACI,OAAOA,KAAK;AAChB,CAAC;AACW,MAACK,0BAA0B,GAAGC,IAAA;EAAA,IAAC;IAAEC;EAAK,CAAE,GAAAD,IAAA;EAAA,OAAM;IACtDC,KAAK,EAAEC,MAAM,CAACC,OAAO,CAACF,KAAK,CAAC,CAACR,GAAG,CAACW,KAAA;MAAA,IAAC,CAACC,IAAI,EAAEC,IAAI,CAAC,GAAAF,KAAA;MAAA,OAAM;QAChDG,QAAQ,EAAE;UACNF,IAAI;UACJG,WAAW,EAAEF,IAAI,CAACE,WAAW;UAC7BC,WAAW,EAAE;YACTC,IAAI,EAAErB,IAAI,CAACC,SAAS,CAACgB,IAAI,CAACG,WAAW,CAACC,IAAI;UAC1D;QACA;MACA,CAAK;IAAA,CAAC;EACN,CAAC;AAAA;AACD,MAAMd,mBAAmB,GAAGe,KAAA;EAAA,IAAC;IAAEhB;EAAK,CAAE,GAAAgB,KAAA;EAAA,OAAM;IACxChB,KAAK,EAAE;MACH,GAAGA,KAAK;MACRiB,MAAM,EAAE;QACJ,GAAGjB,KAAK,CAACiB,MAAM;QACfC,KAAK,EAAEC,QAAQ,CAACnB,KAAK,CAACiB,MAAM,CAACC,KAAK;MAC9C;IACA;EACA,CAAC;AAAA,CAAC;AACF,MAAME,kBAAkB,GAAGC,KAAA;EAAA,IAAC;IAAEN;EAAI,CAAE,GAAAM,KAAA;EAAA,OAAM;IACtCN,IAAI,EAAErB,IAAI,CAACC,SAAS,CAACoB,IAAI;EAC7B,CAAC;AAAA,CAAC;AACF,MAAMZ,wBAAwB,GAAGmB,KAAA;EAAA,IAAC;IAAEpB;EAAU,CAAG,GAAAoB,KAAA;EAAA,OAAM;IACnDpB,UAAU,EAAE;MACR,GAAGA,UAAU;MACbL,OAAO,EAAEK,UAAU,CAACL,OAAO,CAACC,GAAG,CAAEyB,eAAe,IAAK;QACjD,IAAIA,eAAe,CAACvB,KAAK,EAAE;UACvB,OAAOC,mBAAmB,CAACsB,eAAe,CAAC;QAC3D;QACY,IAAIA,eAAe,CAACR,IAAI,EAAE;UACtB,OAAOK,kBAAkB,CAACG,eAAe,CAAC;QAC1D;QACY,OAAOA,eAAe;MAClC,CAAS;IACT;EACA,CAAC;AAAA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}