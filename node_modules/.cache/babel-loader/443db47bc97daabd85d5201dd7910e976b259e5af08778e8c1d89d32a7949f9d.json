{"ast":null,"code":"import { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { assertAuthTokens } from '../../providers/cognito/utils/types.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs';\nimport { getRegionFromUserPoolId } from '../../foundation/parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../utils/getAuthUserAgentValue.mjs';\nimport { registerPasskey } from '../utils/passkey/registerPasskey.mjs';\nimport '../utils/passkey/errors.mjs';\nimport { assertValidCredentialCreationOptions } from '../utils/passkey/types/shared.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../common/AuthErrorStrings.mjs';\nimport '../../errors/types/validation.mjs';\nimport '../../providers/cognito/types/errors.mjs';\nimport { createStartWebAuthnRegistrationClient } from '../../foundation/factories/serviceClients/cognitoIdentityProvider/createStartWebAuthnRegistrationClient.mjs';\nimport { createCompleteWebAuthnRegistrationClient } from '../../foundation/factories/serviceClients/cognitoIdentityProvider/createCompleteWebAuthnRegistrationClient.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Registers a new passkey for an authenticated user\n *\n * @returns Promise<void>\n * @throws - {@link PasskeyError}:\n * - Thrown when intermediate state is invalid\n * @throws - {@link AuthError}:\n * - Thrown when user is unauthenticated\n * @throws - {@link StartWebAuthnRegistrationException}\n * - Thrown due to a service error retrieving WebAuthn registration options\n * @throws - {@link CompleteWebAuthnRegistrationException}\n * - Thrown due to a service error when verifying WebAuthn registration result\n */\nasync function associateWebAuthnCredential() {\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolEndpoint,\n    userPoolId\n  } = authConfig;\n  const {\n    tokens\n  } = await fetchAuthSession();\n  assertAuthTokens(tokens);\n  const startWebAuthnRegistration = createStartWebAuthnRegistrationClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const {\n    CredentialCreationOptions: credentialCreationOptions\n  } = await startWebAuthnRegistration({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.StartWebAuthnRegistration)\n  }, {\n    AccessToken: tokens.accessToken.toString()\n  });\n  assertValidCredentialCreationOptions(credentialCreationOptions);\n  const cred = await registerPasskey(credentialCreationOptions);\n  const completeWebAuthnRegistration = createCompleteWebAuthnRegistrationClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  await completeWebAuthnRegistration({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.CompleteWebAuthnRegistration)\n  }, {\n    AccessToken: tokens.accessToken.toString(),\n    Credential: cred\n  });\n}\nexport { associateWebAuthnCredential };","map":{"version":3,"names":["associateWebAuthnCredential","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","userPoolEndpoint","userPoolId","tokens","fetchAuthSession","assertAuthTokens","startWebAuthnRegistration","createStartWebAuthnRegistrationClient","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","CredentialCreationOptions","credentialCreationOptions","region","getRegionFromUserPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","StartWebAuthnRegistration","AccessToken","accessToken","toString","assertValidCredentialCreationOptions","cred","registerPasskey","completeWebAuthnRegistration","createCompleteWebAuthnRegistrationClient","CompleteWebAuthnRegistration","Credential"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/auth/src/client/apis/associateWebAuthnCredential.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { assertAuthTokens } from '../../providers/cognito/utils/types';\nimport { createCognitoUserPoolEndpointResolver } from '../../providers/cognito/factories';\nimport { getRegionFromUserPoolId } from '../../foundation/parsers';\nimport { getAuthUserAgentValue } from '../../utils';\nimport { registerPasskey } from '../utils';\nimport { createCompleteWebAuthnRegistrationClient, createStartWebAuthnRegistrationClient, } from '../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { assertValidCredentialCreationOptions } from '../utils/passkey/types';\n/**\n * Registers a new passkey for an authenticated user\n *\n * @returns Promise<void>\n * @throws - {@link PasskeyError}:\n * - Thrown when intermediate state is invalid\n * @throws - {@link AuthError}:\n * - Thrown when user is unauthenticated\n * @throws - {@link StartWebAuthnRegistrationException}\n * - Thrown due to a service error retrieving WebAuthn registration options\n * @throws - {@link CompleteWebAuthnRegistrationException}\n * - Thrown due to a service error when verifying WebAuthn registration result\n */\nexport async function associateWebAuthnCredential() {\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolEndpoint, userPoolId } = authConfig;\n    const { tokens } = await fetchAuthSession();\n    assertAuthTokens(tokens);\n    const startWebAuthnRegistration = createStartWebAuthnRegistrationClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const { CredentialCreationOptions: credentialCreationOptions } = await startWebAuthnRegistration({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.StartWebAuthnRegistration),\n    }, {\n        AccessToken: tokens.accessToken.toString(),\n    });\n    assertValidCredentialCreationOptions(credentialCreationOptions);\n    const cred = await registerPasskey(credentialCreationOptions);\n    const completeWebAuthnRegistration = createCompleteWebAuthnRegistrationClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    await completeWebAuthnRegistration({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.CompleteWebAuthnRegistration),\n    }, {\n        AccessToken: tokens.accessToken.toString(),\n        Credential: cred,\n    });\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,2BAA2BA,CAAA,EAAG;EAChD,MAAMC,UAAU,GAAGC,OAAO,CAACC,SAAS,EAAE,CAACC,IAAI,EAAEC,OAAO;EACpDC,yBAAyB,CAACL,UAAU,CAAC;EACrC,MAAM;IAAEM,gBAAgB;IAAEC;EAAU,CAAE,GAAGP,UAAU;EACnD,MAAM;IAAEQ;EAAM,CAAE,GAAG,MAAMC,gBAAgB,EAAE;EAC3CC,gBAAgB,CAACF,MAAM,CAAC;EACxB,MAAMG,yBAAyB,GAAGC,qCAAqC,CAAC;IACpEC,gBAAgB,EAAEC,qCAAqC,CAAC;MACpDC,gBAAgB,EAAET;IAC9B,CAAS;EACT,CAAK,CAAC;EACF,MAAM;IAAEU,yBAAyB,EAAEC;EAAyB,CAAE,GAAG,MAAMN,yBAAyB,CAAC;IAC7FO,MAAM,EAAEC,uBAAuB,CAACZ,UAAU,CAAC;IAC3Ca,cAAc,EAAEC,qBAAqB,CAACC,UAAU,CAACC,yBAAyB;EAClF,CAAK,EAAE;IACCC,WAAW,EAAEhB,MAAM,CAACiB,WAAW,CAACC,QAAQ;EAChD,CAAK,CAAC;EACFC,oCAAoC,CAACV,yBAAyB,CAAC;EAC/D,MAAMW,IAAI,GAAG,MAAMC,eAAe,CAACZ,yBAAyB,CAAC;EAC7D,MAAMa,4BAA4B,GAAGC,wCAAwC,CAAC;IAC1ElB,gBAAgB,EAAEC,qCAAqC,CAAC;MACpDC,gBAAgB,EAAET;IAC9B,CAAS;EACT,CAAK,CAAC;EACF,MAAMwB,4BAA4B,CAAC;IAC/BZ,MAAM,EAAEC,uBAAuB,CAACZ,UAAU,CAAC;IAC3Ca,cAAc,EAAEC,qBAAqB,CAACC,UAAU,CAACU,4BAA4B;EACrF,CAAK,EAAE;IACCR,WAAW,EAAEhB,MAAM,CAACiB,WAAW,CAACC,QAAQ,EAAE;IAC1CO,UAAU,EAAEL;EACpB,CAAK,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}