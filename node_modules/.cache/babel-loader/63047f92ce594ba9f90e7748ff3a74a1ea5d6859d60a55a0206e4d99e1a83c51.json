{"ast":null,"code":"import { AuthAction } from '@aws-amplify/core/internals/utils';\nimport { getUserContextData } from '../../../providers/cognito/utils/userContextData.mjs';\nimport { createInitiateAuthClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createInitiateAuthClient.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport '../../../providers/cognito/types/errors.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { handlePasswordSRP } from '../shared/handlePasswordSRP.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { setActiveSignInUsername } from '../../../providers/cognito/utils/signInHelpers.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Handles user authentication flow with configurable challenge preferences.\n * Supports AuthFactorType challenges through the USER_AUTH flow.\n *\n * @param {HandleUserAuthFlowInput} params - Authentication flow parameters\n * @param {string} params.username - The username for authentication\n * @param {Record<string, string>} [params.clientMetadata] - Optional metadata to pass to authentication service\n * @param {CognitoUserPoolConfig} params.config - Cognito User Pool configuration\n * @param {AuthTokenOrchestrator} params.tokenOrchestrator - Manages authentication tokens and device tracking\n * @param {AuthFactorType} [params.preferredChallenge] - Optional preferred authentication method\n * @param {string} [params.password] - Required when preferredChallenge is 'PASSWORD' or 'PASSWORD_SRP'\n *\n * @returns {Promise<InitiateAuthCommandOutput>} The authentication response from Cognito\n */\nasync function handleUserAuthFlow({\n  username,\n  clientMetadata,\n  config,\n  tokenOrchestrator,\n  preferredChallenge,\n  password,\n  session\n}) {\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = config;\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const authParameters = {\n    USERNAME: username\n  };\n  if (preferredChallenge) {\n    if (preferredChallenge === 'PASSWORD_SRP') {\n      assertValidationError(!!password, AuthValidationErrorCode.EmptySignInPassword);\n      return handlePasswordSRP({\n        username,\n        password,\n        clientMetadata,\n        config,\n        tokenOrchestrator,\n        authFlow: 'USER_AUTH',\n        preferredChallenge\n      });\n    }\n    if (preferredChallenge === 'PASSWORD') {\n      assertValidationError(!!password, AuthValidationErrorCode.EmptySignInPassword);\n      authParameters.PASSWORD = password;\n    }\n    authParameters.PREFERRED_CHALLENGE = preferredChallenge;\n  }\n  const jsonReq = {\n    AuthFlow: 'USER_AUTH',\n    AuthParameters: authParameters,\n    ClientMetadata: clientMetadata,\n    ClientId: userPoolClientId,\n    UserContextData\n  };\n  if (session) {\n    jsonReq.Session = session;\n  }\n  const initiateAuth = createInitiateAuthClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const response = await initiateAuth({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.SignIn)\n  }, jsonReq);\n  // Set the active username immediately after successful authentication attempt\n  // If a user starts a new sign-in while another sign-in is incomplete,\n  // this ensures we're tracking the correct user for subsequent auth challenges.\n  setActiveSignInUsername(username);\n  return response;\n}\nexport { handleUserAuthFlow };","map":{"version":3,"names":["handleUserAuthFlow","username","clientMetadata","config","tokenOrchestrator","preferredChallenge","password","session","userPoolId","userPoolClientId","userPoolEndpoint","UserContextData","getUserContextData","authParameters","USERNAME","assertValidationError","AuthValidationErrorCode","EmptySignInPassword","handlePasswordSRP","authFlow","PASSWORD","PREFERRED_CHALLENGE","jsonReq","AuthFlow","AuthParameters","ClientMetadata","ClientId","Session","initiateAuth","createInitiateAuthClient","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","response","region","getRegionFromUserPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","SignIn","setActiveSignInUsername"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@aws-amplify/auth/src/client/flows/userAuth/handleUserAuthFlow.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AuthAction } from '@aws-amplify/core/internals/utils';\nimport { getUserContextData } from '../../../providers/cognito/utils/userContextData';\nimport { createInitiateAuthClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../../../providers/cognito/factories';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { handlePasswordSRP } from '../shared/handlePasswordSRP';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { setActiveSignInUsername } from '../../../providers/cognito/utils/signInHelpers';\n/**\n * Handles user authentication flow with configurable challenge preferences.\n * Supports AuthFactorType challenges through the USER_AUTH flow.\n *\n * @param {HandleUserAuthFlowInput} params - Authentication flow parameters\n * @param {string} params.username - The username for authentication\n * @param {Record<string, string>} [params.clientMetadata] - Optional metadata to pass to authentication service\n * @param {CognitoUserPoolConfig} params.config - Cognito User Pool configuration\n * @param {AuthTokenOrchestrator} params.tokenOrchestrator - Manages authentication tokens and device tracking\n * @param {AuthFactorType} [params.preferredChallenge] - Optional preferred authentication method\n * @param {string} [params.password] - Required when preferredChallenge is 'PASSWORD' or 'PASSWORD_SRP'\n *\n * @returns {Promise<InitiateAuthCommandOutput>} The authentication response from Cognito\n */\nexport async function handleUserAuthFlow({ username, clientMetadata, config, tokenOrchestrator, preferredChallenge, password, session, }) {\n    const { userPoolId, userPoolClientId, userPoolEndpoint } = config;\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const authParameters = { USERNAME: username };\n    if (preferredChallenge) {\n        if (preferredChallenge === 'PASSWORD_SRP') {\n            assertValidationError(!!password, AuthValidationErrorCode.EmptySignInPassword);\n            return handlePasswordSRP({\n                username,\n                password,\n                clientMetadata,\n                config,\n                tokenOrchestrator,\n                authFlow: 'USER_AUTH',\n                preferredChallenge,\n            });\n        }\n        if (preferredChallenge === 'PASSWORD') {\n            assertValidationError(!!password, AuthValidationErrorCode.EmptySignInPassword);\n            authParameters.PASSWORD = password;\n        }\n        authParameters.PREFERRED_CHALLENGE = preferredChallenge;\n    }\n    const jsonReq = {\n        AuthFlow: 'USER_AUTH',\n        AuthParameters: authParameters,\n        ClientMetadata: clientMetadata,\n        ClientId: userPoolClientId,\n        UserContextData,\n    };\n    if (session) {\n        jsonReq.Session = session;\n    }\n    const initiateAuth = createInitiateAuthClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const response = await initiateAuth({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.SignIn),\n    }, jsonReq);\n    // Set the active username immediately after successful authentication attempt\n    // If a user starts a new sign-in while another sign-in is incomplete,\n    // this ensures we're tracking the correct user for subsequent auth challenges.\n    setActiveSignInUsername(username);\n    return response;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,kBAAkBA,CAAC;EAAEC,QAAQ;EAAEC,cAAc;EAAEC,MAAM;EAAEC,iBAAiB;EAAEC,kBAAkB;EAAEC,QAAQ;EAAEC;AAAO,CAAG,EAAE;EACtI,MAAM;IAAEC,UAAU;IAAEC,gBAAgB;IAAEC;EAAgB,CAAE,GAAGP,MAAM;EACjE,MAAMQ,eAAe,GAAGC,kBAAkB,CAAC;IACvCX,QAAQ;IACRO,UAAU;IACVC;EACR,CAAK,CAAC;EACF,MAAMI,cAAc,GAAG;IAAEC,QAAQ,EAAEb;EAAQ,CAAE;EAC7C,IAAII,kBAAkB,EAAE;IACpB,IAAIA,kBAAkB,KAAK,cAAc,EAAE;MACvCU,qBAAqB,CAAC,CAAC,CAACT,QAAQ,EAAEU,uBAAuB,CAACC,mBAAmB,CAAC;MAC9E,OAAOC,iBAAiB,CAAC;QACrBjB,QAAQ;QACRK,QAAQ;QACRJ,cAAc;QACdC,MAAM;QACNC,iBAAiB;QACjBe,QAAQ,EAAE,WAAW;QACrBd;MAChB,CAAa,CAAC;IACd;IACQ,IAAIA,kBAAkB,KAAK,UAAU,EAAE;MACnCU,qBAAqB,CAAC,CAAC,CAACT,QAAQ,EAAEU,uBAAuB,CAACC,mBAAmB,CAAC;MAC9EJ,cAAc,CAACO,QAAQ,GAAGd,QAAQ;IAC9C;IACQO,cAAc,CAACQ,mBAAmB,GAAGhB,kBAAkB;EAC/D;EACI,MAAMiB,OAAO,GAAG;IACZC,QAAQ,EAAE,WAAW;IACrBC,cAAc,EAAEX,cAAc;IAC9BY,cAAc,EAAEvB,cAAc;IAC9BwB,QAAQ,EAAEjB,gBAAgB;IAC1BE;EACR,CAAK;EACD,IAAIJ,OAAO,EAAE;IACTe,OAAO,CAACK,OAAO,GAAGpB,OAAO;EACjC;EACI,MAAMqB,YAAY,GAAGC,wBAAwB,CAAC;IAC1CC,gBAAgB,EAAEC,qCAAqC,CAAC;MACpDC,gBAAgB,EAAEtB;IAC9B,CAAS;EACT,CAAK,CAAC;EACF,MAAMuB,QAAQ,GAAG,MAAML,YAAY,CAAC;IAChCM,MAAM,EAAEC,uBAAuB,CAAC3B,UAAU,CAAC;IAC3C4B,cAAc,EAAEC,qBAAqB,CAACC,UAAU,CAACC,MAAM;EAC/D,CAAK,EAAEjB,OAAO,CAAC;EACf;EACA;EACA;EACIkB,uBAAuB,CAACvC,QAAQ,CAAC;EACjC,OAAOgC,QAAQ;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}