{"ast":null,"code":"import { fromUtf8 } from \"@smithy/util-utf8\";\nimport { alphabetByValue, bitsPerByte, bitsPerLetter, maxLetterValue } from \"./constants.browser\";\nexport function toBase64(_input) {\n  let input;\n  if (typeof _input === \"string\") {\n    input = fromUtf8(_input);\n  } else {\n    input = _input;\n  }\n  const isArrayLike = typeof input === \"object\" && typeof input.length === \"number\";\n  const isUint8Array = typeof input === \"object\" && typeof input.byteOffset === \"number\" && typeof input.byteLength === \"number\";\n  if (!isArrayLike && !isUint8Array) {\n    throw new Error(\"@smithy/util-base64: toBase64 encoder function only accepts string | Uint8Array.\");\n  }\n  let str = \"\";\n  for (let i = 0; i < input.length; i += 3) {\n    let bits = 0;\n    let bitLength = 0;\n    for (let j = i, limit = Math.min(i + 3, input.length); j < limit; j++) {\n      bits |= input[j] << (limit - j - 1) * bitsPerByte;\n      bitLength += bitsPerByte;\n    }\n    const bitClusterCount = Math.ceil(bitLength / bitsPerLetter);\n    bits <<= bitClusterCount * bitsPerLetter - bitLength;\n    for (let k = 1; k <= bitClusterCount; k++) {\n      const offset = (bitClusterCount - k) * bitsPerLetter;\n      str += alphabetByValue[(bits & maxLetterValue << offset) >> offset];\n    }\n    str += \"==\".slice(0, 4 - bitClusterCount);\n  }\n  return str;\n}","map":{"version":3,"names":["fromUtf8","alphabetByValue","bitsPerByte","bitsPerLetter","maxLetterValue","toBase64","_input","input","isArrayLike","length","isUint8Array","byteOffset","byteLength","Error","str","i","bits","bitLength","j","limit","Math","min","bitClusterCount","ceil","k","offset","slice"],"sources":["/Users/yaki/digi-coin/digi-coin-app/node_modules/@smithy/util-base64/dist-es/toBase64.browser.js"],"sourcesContent":["import { fromUtf8 } from \"@smithy/util-utf8\";\nimport { alphabetByValue, bitsPerByte, bitsPerLetter, maxLetterValue } from \"./constants.browser\";\nexport function toBase64(_input) {\n    let input;\n    if (typeof _input === \"string\") {\n        input = fromUtf8(_input);\n    }\n    else {\n        input = _input;\n    }\n    const isArrayLike = typeof input === \"object\" && typeof input.length === \"number\";\n    const isUint8Array = typeof input === \"object\" &&\n        typeof input.byteOffset === \"number\" &&\n        typeof input.byteLength === \"number\";\n    if (!isArrayLike && !isUint8Array) {\n        throw new Error(\"@smithy/util-base64: toBase64 encoder function only accepts string | Uint8Array.\");\n    }\n    let str = \"\";\n    for (let i = 0; i < input.length; i += 3) {\n        let bits = 0;\n        let bitLength = 0;\n        for (let j = i, limit = Math.min(i + 3, input.length); j < limit; j++) {\n            bits |= input[j] << ((limit - j - 1) * bitsPerByte);\n            bitLength += bitsPerByte;\n        }\n        const bitClusterCount = Math.ceil(bitLength / bitsPerLetter);\n        bits <<= bitClusterCount * bitsPerLetter - bitLength;\n        for (let k = 1; k <= bitClusterCount; k++) {\n            const offset = (bitClusterCount - k) * bitsPerLetter;\n            str += alphabetByValue[(bits & (maxLetterValue << offset)) >> offset];\n        }\n        str += \"==\".slice(0, 4 - bitClusterCount);\n    }\n    return str;\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,eAAe,EAAEC,WAAW,EAAEC,aAAa,EAAEC,cAAc,QAAQ,qBAAqB;AACjG,OAAO,SAASC,QAAQA,CAACC,MAAM,EAAE;EAC7B,IAAIC,KAAK;EACT,IAAI,OAAOD,MAAM,KAAK,QAAQ,EAAE;IAC5BC,KAAK,GAAGP,QAAQ,CAACM,MAAM,CAAC;EAC5B,CAAC,MACI;IACDC,KAAK,GAAGD,MAAM;EAClB;EACA,MAAME,WAAW,GAAG,OAAOD,KAAK,KAAK,QAAQ,IAAI,OAAOA,KAAK,CAACE,MAAM,KAAK,QAAQ;EACjF,MAAMC,YAAY,GAAG,OAAOH,KAAK,KAAK,QAAQ,IAC1C,OAAOA,KAAK,CAACI,UAAU,KAAK,QAAQ,IACpC,OAAOJ,KAAK,CAACK,UAAU,KAAK,QAAQ;EACxC,IAAI,CAACJ,WAAW,IAAI,CAACE,YAAY,EAAE;IAC/B,MAAM,IAAIG,KAAK,CAAC,kFAAkF,CAAC;EACvG;EACA,IAAIC,GAAG,GAAG,EAAE;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,KAAK,CAACE,MAAM,EAAEM,CAAC,IAAI,CAAC,EAAE;IACtC,IAAIC,IAAI,GAAG,CAAC;IACZ,IAAIC,SAAS,GAAG,CAAC;IACjB,KAAK,IAAIC,CAAC,GAAGH,CAAC,EAAEI,KAAK,GAAGC,IAAI,CAACC,GAAG,CAACN,CAAC,GAAG,CAAC,EAAER,KAAK,CAACE,MAAM,CAAC,EAAES,CAAC,GAAGC,KAAK,EAAED,CAAC,EAAE,EAAE;MACnEF,IAAI,IAAIT,KAAK,CAACW,CAAC,CAAC,IAAK,CAACC,KAAK,GAAGD,CAAC,GAAG,CAAC,IAAIhB,WAAY;MACnDe,SAAS,IAAIf,WAAW;IAC5B;IACA,MAAMoB,eAAe,GAAGF,IAAI,CAACG,IAAI,CAACN,SAAS,GAAGd,aAAa,CAAC;IAC5Da,IAAI,KAAKM,eAAe,GAAGnB,aAAa,GAAGc,SAAS;IACpD,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIF,eAAe,EAAEE,CAAC,EAAE,EAAE;MACvC,MAAMC,MAAM,GAAG,CAACH,eAAe,GAAGE,CAAC,IAAIrB,aAAa;MACpDW,GAAG,IAAIb,eAAe,CAAC,CAACe,IAAI,GAAIZ,cAAc,IAAIqB,MAAO,KAAKA,MAAM,CAAC;IACzE;IACAX,GAAG,IAAI,IAAI,CAACY,KAAK,CAAC,CAAC,EAAE,CAAC,GAAGJ,eAAe,CAAC;EAC7C;EACA,OAAOR,GAAG;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}